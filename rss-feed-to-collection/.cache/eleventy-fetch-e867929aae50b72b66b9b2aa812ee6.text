<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
	xmlns:georss="http://www.georss.org/georss"
	xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
	>

<channel>
	<title>Rob O&#039;Leary, Author at LogRocket Blog</title>
	<atom:link href="https://blog.logrocket.com/author/rob-oleary/feed/" rel="self" type="application/rss+xml" />
	<link>https://blog.logrocket.com/author/rob-oleary/</link>
	<description>Resources to Help Product Teams Ship Amazing Digital Experiences</description>
	<lastBuildDate>Thu, 02 May 2024 18:26:26 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.5.3</generator>

<image>
	<url>https://blog.logrocket.com/wp-content/uploads/2019/06/cropped-cropped-favicon-196x196.png?w=32</url>
	<title>Rob O&#039;Leary, Author at LogRocket Blog</title>
	<link>https://blog.logrocket.com/author/rob-oleary/</link>
	<width>32</width>
	<height>32</height>
</image> 
<site xmlns="com-wordpress:feed-additions:1">217016018</site>	<item>
		<title>Using Prettier and ESLint for JavaScript formatting</title>
		<link>https://blog.logrocket.com/using-prettier-eslint-javascript-formatting/</link>
					<comments>https://blog.logrocket.com/using-prettier-eslint-javascript-formatting/#comments</comments>
		
		<dc:creator><![CDATA[Rob O'Leary]]></dc:creator>
		<pubDate>Thu, 18 Apr 2024 16:00:14 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[vanilla javascript]]></category>
		<guid isPermaLink="false">https://blog.logrocket.com/?p=52051</guid>

					<description><![CDATA[<p>Learn how to use ESLint and Prettier together to automatically format and fix JavaScript code in your projects.</p>
<p>The post <a href="https://blog.logrocket.com/using-prettier-eslint-javascript-formatting/">Using Prettier and ESLint for JavaScript formatting</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[<!DOCTYPE html>
<html><p><strong><em>Editor’s note:</em></strong> <em>This post was updated by</em> <a href="https://blog.logrocket.com/author/muhammedali/"><em>Muhammed Ali</em></a> <em>on 18 May 2024 to explore a few advanced configuration examples for working with Prettier and ESLint, such as configuring Prettier’s maximum line length and setting ESLint indentation settings.</em></p>
<img fetchpriority="high" decoding="async" width="895" height="597" src="https://blog.logrocket.com/wp-content/uploads/2024/04/using-prettier-eslint-javascript-formatting.png" class="attachment-full size-full wp-post-image" alt="Using Prettier And ESLint For JavaScript Formatting" srcset="https://blog.logrocket.com/wp-content/uploads/2024/04/using-prettier-eslint-javascript-formatting.png 895w, https://blog.logrocket.com/wp-content/uploads/2024/04/using-prettier-eslint-javascript-formatting.png?resize=300,200 300w, https://blog.logrocket.com/wp-content/uploads/2024/04/using-prettier-eslint-javascript-formatting.png?resize=768,512 768w" sizes="(max-width: 895px) 100vw, 895px" data-attachment-id="189673" data-permalink="https://blog.logrocket.com/using-prettier-eslint-javascript-formatting/attachment/using-prettier-eslint-javascript-formatting/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2024/04/using-prettier-eslint-javascript-formatting.png" data-orig-size="895,597" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Using Prettier and ESLint for JavaScript formatting" data-image-description data-image-caption data-medium-file="https://blog.logrocket.com/wp-content/uploads/2024/04/using-prettier-eslint-javascript-formatting.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2024/04/using-prettier-eslint-javascript-formatting.png?w=895"><p>Linting and pretty-printing JavaScript code can help developers catch errors early, make code more legible, and improve overall code quality. However, when using a formatter for pretty-printing and a linter side-by-side, there can be some friction.</p>
<p>For example, the formatter might do something that the linter deems problematic. The linter can then overwrite style changes from the formatter, causing the two to pull in different directions. To use these tools together successfully, developers must get them on the same page.</p>
<p>In this article, we’ll explore how to use these tools together successfully by using the popular formatter, Prettier, with the popular linter, ESLint. We’ll learn how to set them up and use them together on the command line and in Visual Studio Code (VS Code) to automatically fix and format code.</p>
<p>I have seen different methods for tackling how to use them together, but some are hacky solutions because of limitations in code editors. So, I will discuss the pros and cons of some of these, and you can make your own decision on what is best.</p>
<p>First, let’s get a clear understanding of what ESLint and Prettier do, and highlight how they differ.</p>
<h2 id="prettier-vs-eslint">Prettier vs. ESLint</h2>
<h3 id="what-prettier">What is Prettier?</h3>
<p>Prettier is an opinionated code formatter for JavaScript and other popular languages. Prettier enforces a consistent format by parsing code and reprinting it with its own rules that take the maximum line length into account, wrapping code when necessary.</p>
<p>This reprinting/rewriting process prevents developers from introducing any formatting mistakes. The primary reason Prettier was created was to eliminate debates over code styles. The idea is that Prettier’s style guide is fully automatic. Even if Prettier does not format your code 100% the way you like, it’s worth the sacrifice for the simplicity of the approach.</p>
<p>While a big reason to use Prettier is to avoid configuration altogether, Prettier does support a configuration file that has a <a href="https://prettier.io/docs/en/options.html">handful of formatting options</a>.</p>
<h3 id="what-eslint">What is ESLint?</h3>
<p>ESLint is a JavaScript linting utility that was first released in June 2013 and is now by far the number one linting utility. <a href="https://en.wikipedia.org/wiki/Lint_(software)">Linting</a> is a type of static analysis that finds problematic patterns and codes that don’t adhere to certain style guidelines.</p>
<p>Because JavaScript is a dynamic and loosely typed language, it is especially prone to developer errors. Without the benefit of a compilation process, JavaScript code typically executes to find syntax or other errors.</p>
<p>However, ESLint enables developers to discover problems with their code without actually executing their code. The primary reason ESLint was created was to allow developers to create their own linting rules. ESLint has built-in rules that make it useful from the start, but you can add rules specific to your project and whatever flavor of JavaScript you use.</p>
<p>Many people have done the heavy lifting for you by creating <a href="https://eslint.org/docs/developer-guide/shareable-configs">shareable configs</a>, which have rulesets for popular JavaScript frameworks and common style guides/coding standards such as <a href="https://google.github.io/styleguide/jsguide.html">Google’s JavaScript Style Guide</a>.</p>
<p>You can find some of these shared configs on <a href="https://www.npmjs.com/search?q=eslint%20config">npmjs.com by searching for “eslint-config”</a> (the naming convention for shared configs).</p>
<p>ESLint also has a pluggable architecture that enables creating <a href="https://eslint.org/docs/developer-guide/working-with-plugins">plugins</a>, which can add extra capabilities to ESLint and give a new baseline to add your own custom rules. An example of this is <a href="https://github.com/vuejs/eslint-plugin-vue/">eslint-plugin-vue</a>, which is the official plugin for Vue.js. This plugin allows us to lint the <code>&lt;template&gt;</code> and <code>&lt;script&gt;</code> sections of <code>.vue</code> files, as well as Vue code contained in <code>.js</code> files.</p>
<p>In a dedicated ESLint configuration file, you can manage the rules your project uses and disable any you don’t wish to use. ESLint allows rules to be set as errors or warnings and some errors can be automatically fixed.</p>
<h3 id="why-use-prettier-eslint-can-format">Why use Prettier if ESLint can format?</h3>
<p>While ESLint can handle some formatting tasks, Prettier offers several advantages that make it a valuable addition to the development workflow.</p>
<p>Prettier enforces a consistent code style across your entire codebase. This consistency is especially useful in large projects with multiple contributors. Prettier focuses solely on code formatting, making it easier to set up and use when compared to ESLint, which has a broader range of functionality, including code linting and style checking.</p>
<p>So, why are there any options at all? It is mostly due to historical reasons. A few were added during Prettier’s infancy to entice more people into using it, a couple of options were added due to demand, and some rules were added for compatibility reasons.</p>
<p>The bottom line is that the development team intends to never add more options from now on; you can read more about this in Prettier’s <a href="https://prettier.io/docs/en/option-philosophy.html">Option Philosophy</a>.</p>
<h3 id="differences-between-eslint-prettier">Differences between ESLint and Prettier</h3>
<table>
<thead>
<tr>
<th></th>
<th><strong>ESLint</strong></th>
<th><strong>Prettier</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Reports code errors</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>Automatically fixes code errors</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>Formats code</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>Offer configuration options</td>
<td>Yes</td>
<td>Limited</td>
</tr>
<tr>
<td>Adds custom rules/options</td>
<td>Yes</td>
<td>No</td>
</tr>
</tbody>
</table>
<p>In a nutshell, you’d use Prettier to simplify the formatting of your code and ESLint for catching bugs.</p>
<h2 id="managing-eslint-rules-avoid-conflict-prettier">Managing ESLint’s rules to avoid conflict with Prettier</h2>
<p>There are two broad categories of linting rules: formatting rules and code-quality rules. Formatting rules are the rules that affect the style of the code and are not concerned with bugs. For example, the rule <code><a href="https://eslint.org/docs/rules/no-mixed-spaces-and-tabs">no-mixed-spaces-and-tabs</a></code> rule in ESLint ensures that only tabs or spaces are used for indentation. Prettier has a <a href="https://prettier.io/docs/en/options.html#tabs"><code>tabs</code> option</a> for the same thing.</p>
<p>Secondly, the code-quality rules improve code quality and can prevent or catch bugs. For example, the ESLint rule <a href="https://eslint.org/docs/rules/no-implicit-globals"><code>no-implicit-globals</code></a> disallows global scope variables.</p>
<p>Name collisions can occur with global variables created from other scripts, which usually leads to runtime errors or unexpected behavior:</p>
<p><img decoding="async" data-attachment-id="189670" data-permalink="https://blog.logrocket.com/using-prettier-eslint-javascript-formatting/attachment/prettier-eslint-overlapping/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/02/prettier-eslint-overlapping.png" data-orig-size="730,486" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Prettier&#8217;s formatting rules and ESLint&#8217;s code-quality rules overlap on linting rules Venn diagram" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/02/prettier-eslint-overlapping.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/02/prettier-eslint-overlapping.png?w=730" class="aligncenter size-full wp-image-189670" src="https://blog.logrocket.com/wp-content/uploads/2022/02/prettier-eslint-overlapping.png" alt="Prettier's Formatting Rules And ESLint's Code-Quality Rules Overlap On Linting Rules Venn Diagram" width="730" height="486" srcset="https://blog.logrocket.com/wp-content/uploads/2022/02/prettier-eslint-overlapping.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/02/prettier-eslint-overlapping.png?resize=300,200 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>The problem is that the rules of Prettier and ESLint overlap, and we’d prefer that they didn’t! Generally, we want Prettier to handle the first category and ESLint to handle the second. Some rules may be difficult to categorize as one or the other — we don’t need to be pedantic about which category they fit into. Our interest is in ensuring that either Prettier or ESLint perform a particular action and do not bump into one another:</p>
<p><img decoding="async" data-attachment-id="189671" data-permalink="https://blog.logrocket.com/using-prettier-eslint-javascript-formatting/attachment/separating-prettier-eslint-formatting-rules/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/02/separating-prettier-eslint-formatting-rules.png" data-orig-size="730,486" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Separation between Prettier&#8217;s formatting rules and ESLint&#8217;s code-quality rules" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/02/separating-prettier-eslint-formatting-rules.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/02/separating-prettier-eslint-formatting-rules.png?w=730" class="aligncenter size-full wp-image-189671" src="https://blog.logrocket.com/wp-content/uploads/2022/02/separating-prettier-eslint-formatting-rules.png" alt="Separation Between Prettier's Formatting Rules And ESLint's Code-Quality Rules" width="730" height="486" srcset="https://blog.logrocket.com/wp-content/uploads/2022/02/separating-prettier-eslint-formatting-rules.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/02/separating-prettier-eslint-formatting-rules.png?resize=300,200 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>As for the order to run them in, it is generally best to run Prettier before ESLint because Prettier reprints your entire program from scratch. So, if you want to let ESLint in on the formatting act, you should run it after Prettier to prevent the changes from being overwritten.</p>
<p>If you’re not familiar with ESLint and Prettier, let’s cover how you can configure and use them in the next section.</p>
<h2 id="eslint-prettier-initial-configuration-basic-usage">ESLint and Prettier initial configuration and basic usage</h2>
<p>Both ESLint and Prettier are available to download from npm and Yarn. For every project, you must create a <code>package.json</code> and add them as <code>devDependencies</code>:</p>
<pre class="language-shell hljs">npm install --save-dev eslint
npm install --save-dev --save-exact prettier
</pre>
<p>ESLint starts as a blank slate. It won’t do anything until you create a configuration with some rules. You must put the configuration file, <code>.eslintrc.{js,yml,json}</code>, into the project directory and you’ll be ready to lint.</p>
<p>You can create the configuration on the command line with the following commands:</p>
<pre class="language-yarn hljs">npm init @eslint/config

# or

yarn create @eslint/config
</pre>
<p>Note that <code>npm init @eslint/config</code> assumes you have a <code>package.json</code> file already. If you don’t, you can run <code>npm init</code> or <code>yarn init</code> to create one.</p>
<p>This command will lead to a wizard with a series of questions to establish what it is you want to lint, such as module type, the framework used, where your code runs, and so on. It will spit out a configuration file and install any related dependencies for you.</p>
<p>If you just want to use the <a href="https://eslint.org/docs/rules/">built-in recommended rules</a>, you can simply add <code>eslint.json</code> like so:</p>
<pre class="language-javascript hljs">{
    "extends": "eslint:recommended"
}
</pre>
<p>With a configuration in place, you can run ESLint on any file or directory. For example, here I am linting my <code>src</code> directory:</p>
<pre class="language-yarn hljs">npx eslint src

# or

yarn run eslint src
</pre>
<p><img loading="lazy" decoding="async" class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2021/05/eslint-cli.png" alt="Running ESLint In Code" width="687" height="218"></p>
<p>As you can see in the image above, ESLint outputs a list of problems with the details: location of the error (formatted as <code>&lt;line number: character number&gt;</code>), type (error or warning), a description, and the rule name. You can read <a href="https://eslint.org/docs/latest/use/getting-started">ESLint’s Getting Started Guide</a> for more details.</p>
<p>You can also set up a global configuration, but ESLint has deprecated it (and discourages it). I still use a global configuration. <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f92b.png" alt="🤫" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>On the other hand, Prettier has a default configuration. It can run without creating a configuration file, so you can begin using it straight away. The recommendation is to use a specific version of Prettier on big projects, otherwise, updates may cause changes to files and add noise to your Git commits.</p>
<p>You should also use a <a href="https://prettier.io/docs/en/ignore.html"><code>.prettierignore</code></a> file to ignore things that should not be formatted. You can read Prettier’s <a href="https://prettier.io/docs/en/install.html">installation guide</a> for more information:</p>
<p><img loading="lazy" decoding="async" class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2021/05/prettier-cli.png" alt="Inserting Prettier Code" width="687" height="44"></p>
<p>A typical <code>package.json</code> will look something like the following. Here, we target the files in the folders <code>src</code> and <code>test</code> for the npm scripts.</p>
<p>I prefer to skip <code>.eslintignore</code> and <code>.prettierignore</code> files if possible — simpler is preferable! <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f605.png" alt="😅" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<pre class="language-javascript hljs">{
  "name": "basic-project",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "lint": "npx eslint src test",
    "lint:fix": "npm run lint -- --fix",
    "prettier": "npx prettier src test --check",
    "prettier:fix": "npm run prettier -- --write",
  },
  "author": "rob o'leary",
  "license": "ISC",
  "devDependencies": {
    "eslint": "^7.25.0",
    "prettier": "^2.2.1"
  }
}
</pre>
<h2 id="methods-linting-pretty-printing-code">Methods for linting and pretty-printing your code</h2>
<h3 id="remove-conflicting-rules-run-serially">Remove conflicting rules and run serially</h3>
<p>This method is the cleanest, most efficient, and the best recommended to use.</p>
<p>It’s easy to turn off rules that conflict with Prettier in ESLint by using the following configs:</p>
<ul>
<li><code><a href="https://github.com/prettier/eslint-config-prettier">eslint-config-prettier</a></code> for JavaScript</li>
<li><a href="https://github.com/alexjoverm/tslint-config-prettier"><code>tslint-config-prettier</code></a> for TypeScript</li>
</ul>
<p>First, install the config for JavaScript:</p>
<pre class="language-shell hljs">npm install --save-dev eslint-config-prettier
</pre>
<p>Then, append that config name to the <code>extends</code> array in your local <code>.stylelintrc.*</code> ESLint config file. Make sure to put the Prettier config last so it overrides the settings from other configs.</p>
<p>Here is an example <code>.eslintrc.json</code>:</p>
<pre class="language-javascript hljs">{
  // ...
  extends: [
    // ...
    'eslint:recommended',
    "prettier" // Make sure this is the last
  ],
  // ...
}
</pre>
<p>Now, you can run Prettier and ESLint together without any side effects. You can also run Prettier and ESLint one after another like on the command line by defining them as npm scripts. Here is how that looks in a <code>package.json</code>:</p>
<pre class="language-javascript hljs">{
   "name": "no-worries-setup",   
   "version": "1.0.0",
   "scripts": {
    "lint": "npx eslint src test",
    "lint:fix": "npm run lint -- --fix",
    "prettier": "npx prettier src test --check",
    "prettier:fix": "npm run prettier -- --write",
    "format": "npm run prettier:fix &amp;&amp; npm run lint:fix",
  }
  // ...
}
</pre>
<p>Now, you can run the <code>npm run format</code> command to format and fix all your code in one go.</p>
<h2 id="integrating-prettier-eslint-vscode">Integrating Prettier and ESLint in VSCode</h2>
<p>All the major code editors have extensions for ESLint and Prettier. For VS Code, the official extensions are <a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier – Code formatter</a> and <a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a>:</p>
<p><img loading="lazy" decoding="async" class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2021/05/vscode-eslint.png" alt="Inserting ESLint In VS Code" width="730" height="349"></p>
<p>To use with VS code, install the extensions: ESLint, Prettier, and <a href="https://marketplace.visualstudio.com/items?itemName=rohit-gohri.format-code-action&amp;ssr=false#review-details">Format Code Action</a>, and update your user settings (<code>settings.json</code>) as shown below. You can access this file with the <code>Preferences: Open User Settings (JSON)</code> command in the Command Palette (Ctrl+Shift+P):</p>
<pre class="language-javascript hljs">{
  //...
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "eslint.probe": [
      "javascript",
      "javascriptreact",
      "vue"
  ],
  "editor.formatOnSave": false,
  // Runs Prettier, then ESLint
  "editor.codeActionsOnSave": [
    "source.formatDocument",
    "source.fixAll.eslint"
  ],
  "vetur.validation.template": false
  // ...
}
</pre>
<p>Next, you need to disable the editor formatting on save (<code>editor.formatOnSave</code>) because we want to handle everything through code actions.</p>
<p>The <code>editor.codeActionsOnSave</code> property accepts an array of code actions, which permits ordered code actions. If we install the <a href="https://marketplace.visualstudio.com/items?itemName=rohit-gohri.format-code-action&amp;ssr=false#review-details">Format Code Action</a> extension, we can make formatting available as a code action.</p>
<p>So now, we can run Prettier and ESLint as code actions in whichever order we like. Sweet!</p>
<p>In this example, we run Prettier first with the action <code>source.formatDocument</code> (it uses the default formatter), and then we run <code>eslint --fix</code> with the <code>source.fixAll.eslint</code> action.</p>
<p>The <code>eslint.probe</code> property targets the languages that ESLint should validate. You can use <code>eslint.validate</code> if you want to see pop-up messages instead.</p>
<p>If you use the Vetur extension, ensure it does not do its own validation. There is a setting <code>vetur.validation.template</code>, which you should not enable.</p>
<h3 id="configuring-prettier-maximum-line-length">Configuring Prettier’s maximum line length</h3>
<p>Prettier does not have a specific configuration option for maximum line length. Instead, it formats the code according to its own rules. However, you can indirectly control line length by setting the <code>printWidth</code> option in your Prettier configuration file (<code>.prettierrc</code> or <code>prettier.config.js</code>).</p>
<p>For example, to limit the line length to 100 characters, you can add the following to your <code>.prettierrc</code> file:</p>
<pre class="language-javascript hljs">{
 "printWidth": 100
}
</pre>
<h3 id="disabling-prettier-vs-code">Disabling Prettier in VS&nbsp;Code</h3>
<p>To disable Prettier in VS Code for a specific language, you can use the <code>prettier.disableLanguages</code> setting in your VS Code settings (<code>.vscode/settings.json</code>).</p>
<p>For example, to disable Prettier for JavaScript files, add the following to your <code>settings.json</code> file:</p>
<pre class="language-javascript hljs">"prettier.disableLanguages": ["javascript"]
</pre>
<p>You can also disable Prettier globally by setting <code>"prettier.enable": false</code> in your VS Code settings.</p>
<h3 id="setting-eslint-indentation-settings">Setting ESLint indentation settings</h3>
<p>ESLint does not directly control indentation, but it can work alongside Prettier to enforce consistent indentation. To configure ESLint’s indentation settings, you can use the <code>indent</code> rule in your ESLint configuration file (<code>.eslintrc</code> or <code>.eslintrc.json</code>).</p>
<p>For example, to enforce double-space indentation, add the following to your ESLint configuration file:</p>
<pre class="language-javascript hljs">{
 "rules": {
   "indent": ["error", 2]
 }
}
</pre>
<h3 id="run-prettier-followed-eslint-programmatically">Run Prettier followed by ESLint programmatically</h3>
<p>The following applications offer a unified way to run <code>prettier</code> followed immediately by <code>eslint --fix</code> on files:</p>
<ul>
<li><a href="https://github.com/prettier/prettier-eslint"><code>prettier-eslint</code></a> for JavaScript</li>
<li><a href="https://github.com/azz/prettier-tslint"><code>prettier-tslint</code></a> for TypeScript</li>
</ul>
<p>First, install the package. This is just for JavaScript:</p>
<pre class="language-shell hljs">npm install --save-dev prettier-eslint
</pre>
<p>Next, write your own implementation to target your files and run the formatting. Below is a basic example of formatting a string:</p>
<pre class="language-javascript hljs">const format = require("prettier-eslint");

// notice, no semicolon in the original text
const sourceCode = "const {foo} = bar";

const options = {
  text: sourceCode,
  eslintConfig: {
    parserOptions: {
      ecmaVersion: 7,
    },
    rules: {
      semi: ["error", "never"],
    },
  },
  prettierOptions: {
    bracketSpacing: true,
  },
  fallbackPrettierOptions: {
    singleQuote: false,
  },
};

const formatted = format(options);

// notice no semicolon in the formatted text
formatted; // const { foo } = bar
</pre>
<p>Obviously, this method requires more work to target the files, read the content, and write the output. To use in VS Code, you can install and use the <a href="https://marketplace.visualstudio.com/items?itemName=rvest.vs-code-prettier-eslint">Prettier ESLint</a> extension.</p>
<h3 id="running-prettier-eslint-rule">Running Prettier as an ESLint rule</h3>
<p>This is generally not recommended because:</p>
<ul>
<li>Of formatting issues reported as problems by ESLint</li>
<li>It is a bit slower than running Prettier directly</li>
<li>It introduces another layer where bugs can be introduced</li>
</ul>
<p>You can use ESLint plugins that let you run Prettier as if it is a linter rule:</p>
<ul>
<li><a href="https://github.com/prettier/eslint-plugin-prettier"><code>eslint-plugin-prettier</code></a> for JavaScript</li>
<li><a href="https://github.com/ikatyang/tslint-plugin-prettier"><code>tslint-plugin-prettier</code></a> for TypeScript</li>
</ul>
<p>First, install the plugin. This is just for JavaScript:</p>
<pre class="language-yarn hljs">npm install --save-dev eslint-plugin-prettier
</pre>
<p>Then, append the plugin(s) to the <a href="https://stylelint.io/user-guide/configure/#:~:text=Plugins%20are%20custom%20rules%20or%20sets%20of%20custom%20rules%20built%20to%20support%20methodologies%2C%20toolsets%2C%20non%2Dstandard%20CSS%20features%2C%20or%20very%20specific%20use%20cases."><code>plugins</code></a> array in your <code>.stylelintrc.*</code> file. For example, in <code>.eslintrc.json</code>:</p>
<pre class="language-javascript hljs">{
  "plugins": ["prettier"],
  "rules": {
    "prettier/prettier": "error"
  }
}
</pre>
<h2>Conclusion</h2>
<p>Prettier and ESLint can be used together very effectively. It requires some configuration, but that should be straightforward after reading this article!</p>
<p>Personally, I love having this setup. It’s great to have some tasks taken off your hands and reclaim some headspace. It will help you to improve your code quality and give you a more legible codebase without manual intervention.</p>
</html>
<p>The post <a href="https://blog.logrocket.com/using-prettier-eslint-javascript-formatting/">Using Prettier and ESLint for JavaScript formatting</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.logrocket.com/using-prettier-eslint-javascript-formatting/feed/</wfw:commentRss>
			<slash:comments>6</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">52051</post-id>	</item>
		<item>
		<title>Using CSS content-visibility to boost your rendering performance</title>
		<link>https://blog.logrocket.com/using-css-content-visibility-boost-rendering-performance/</link>
					<comments>https://blog.logrocket.com/using-css-content-visibility-boost-rendering-performance/#respond</comments>
		
		<dc:creator><![CDATA[Rob O'Leary]]></dc:creator>
		<pubDate>Wed, 08 Nov 2023 15:30:09 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[css]]></category>
		<guid isPermaLink="false">https://blog.logrocket.com/?p=30286</guid>

					<description><![CDATA[<p>CSS <code>content-visibility</code> helps boost rendering performance by controlling whether or not an element renders its contents. </p>
<p>The post <a href="https://blog.logrocket.com/using-css-content-visibility-boost-rendering-performance/">Using CSS content-visibility to boost your rendering performance</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[<!DOCTYPE html>
<html><p><code>content-visibility</code> is a CSS property that controls whether or not an element renders its contents. It enables the browser to bypass layout and rendering work for elements not immediately needed by a user. This can make the initial page load faster.</p>
<img loading="lazy" decoding="async" width="895" height="597" src="https://blog.logrocket.com/wp-content/uploads/2023/11/using-css-content-visibility-boost-rendering-performance.png" class="attachment-full size-full wp-post-image" alt="Using CSS Content-Visibility To Boost Your Rendering Performance" srcset="https://blog.logrocket.com/wp-content/uploads/2023/11/using-css-content-visibility-boost-rendering-performance.png 895w, https://blog.logrocket.com/wp-content/uploads/2023/11/using-css-content-visibility-boost-rendering-performance.png?resize=300,200 300w, https://blog.logrocket.com/wp-content/uploads/2023/11/using-css-content-visibility-boost-rendering-performance.png?resize=768,512 768w" sizes="(max-width: 895px) 100vw, 895px" data-attachment-id="181604" data-permalink="https://blog.logrocket.com/using-css-content-visibility-boost-rendering-performance/attachment/using-css-content-visibility-boost-rendering-performance/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/11/using-css-content-visibility-boost-rendering-performance.png" data-orig-size="895,597" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Using CSS content-visibility to boost your rendering performance" data-image-description data-image-caption data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/11/using-css-content-visibility-boost-rendering-performance.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/11/using-css-content-visibility-boost-rendering-performance.png?w=895"><p>The <code>content-visibility</code> property is part of the <a href="https://drafts.csswg.org/css-contain/">CSS Containment Specification</a>, whose objective is to improve performance.</p>
<p>In this article, we will dive into the benefits and practical use cases of the <code>content-visibility</code> CSS property, as well as situations where it might not be the most suitable option. But first, we’ll lay the groundwork with an exploration of the fundamentals of rendering.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="180605" data-permalink="https://blog.logrocket.com/demo-app-optimize-performance-reducing-work-content-outside-viewport/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/10/demo-app-optimize-performance-reducing-work-content-outside-viewport.jpeg" data-orig-size="730,859" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Demo Of An App Where We Can Optimize Performance By Reducing Work On Content Outside The Viewport" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/10/demo-app-optimize-performance-reducing-work-content-outside-viewport.jpeg?w=255" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/10/demo-app-optimize-performance-reducing-work-content-outside-viewport.jpeg?w=730" class="aligncenter size-full wp-image-180605" src="https://blog.logrocket.com/wp-content/uploads/2023/10/demo-app-optimize-performance-reducing-work-content-outside-viewport.jpeg" alt="Demo Of An App Where We Can Optimize Performance By Reducing Work On Content Outside The Viewport" width="730" height="859" srcset="https://blog.logrocket.com/wp-content/uploads/2023/10/demo-app-optimize-performance-reducing-work-content-outside-viewport.jpeg 730w, https://blog.logrocket.com/wp-content/uploads/2023/10/demo-app-optimize-performance-reducing-work-content-outside-viewport.jpeg?resize=255,300 255w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<h2 id="quick-guide-rendering">A quick guide to rendering</h2>
<p>Rendering is the process of transforming the code of a webpage into pixels that a user can see in the web browser.</p>
<p>When you enter a URL in the address bar of a browser and fire off a request for a webpage, a series of events are kicked off. There are some technical background processes, but the main event is to download the resources that make up the webpage, such as the HTML file, font files, and CSS files.</p>
<p>The part of the process that relates most to our discussion of rendering performance is what happens after the HTML file has been loaded in the browser. Google refers to this process as the <a href="https://web.dev/rendering-performance/">rendering pixel pipeline</a>. The areas involved are:</p>
<ol>
<li style="margin-bottom: 7px; padding-bottom: 7px;"><strong>JavaScript</strong>: JavaScript can be used to do things that result in visual changes, such as adding DOM elements to the page</li>
<li style="margin-bottom: 7px; padding-bottom: 7px;"><strong>Style</strong>: This is the process of deciding which CSS rules apply to which elements. Once rules are known, they are applied and the final styles for each element are calculated</li>
<li style="margin-bottom: 7px; padding-bottom: 7px;"><strong>Layout</strong>: Once the browser has applied the style rules to an element, it can begin to calculate how much space it takes up and its position on the screen. The layout of one element can affect other elements. For example, the width of the <code>&lt;body&gt;</code> element typically affects its children’s widths all the way down the tree, a process that can be quite intensive</li>
<li style="margin-bottom: 7px; padding-bottom: 7px;"><strong>Paint</strong>: Painting is the process of filling in pixels. It involves drawing the visual part of the elements. The drawing is typically done onto multiple surfaces, often called layers</li>
<li><strong>Compositing</strong>: When parts of the page are drawn into multiple layers, they need to be drawn to the screen in the correct order so that the page renders correctly. The layers can be painted independently but overlapping elements require more careful work</li>
</ol>
<p>It’s important to understand that the rendering pixel pipeline is a transformative series of operations — the result of the previous operation is carried into the next operation to create new data. Updating the rendering pipeline is costly, so if we can skip an area, it can have a positive impact on performance.</p>
<p>Google has color-coded and categorized the areas as follows:</p>
<ul>
<li><strong>Scripting</strong>&nbsp;— yellow covering the JavaScript area</li>
<li><strong>Rendering</strong> — purple covering the Style and Layout areas</li>
<li><strong>Painting</strong> — green covering the Paint and Composite areas</li>
</ul>
<figure id="attachment_180560" aria-describedby="caption-attachment-180560" style="width: 730px" class="wp-caption aligncenter"><img loading="lazy" decoding="async" data-attachment-id="180560" data-permalink="https://blog.logrocket.com/pixel-pipeline/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/10/pixel-pipeline.jpeg" data-orig-size="730,112" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="Pixel Pipeline" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/10/pixel-pipeline.jpeg?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/10/pixel-pipeline.jpeg?w=730" class="wp-image-180560 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/10/pixel-pipeline.jpeg" alt="Pixel Pipeline" width="730" height="112" srcset="https://blog.logrocket.com/wp-content/uploads/2023/10/pixel-pipeline.jpeg 730w, https://blog.logrocket.com/wp-content/uploads/2023/10/pixel-pipeline.jpeg?resize=300,46 300w" sizes="(max-width: 730px) 100vw, 730px" /><figcaption id="caption-attachment-180560" class="wp-caption-text">Image credit: <a href="https://web.dev/articles/rendering-performance">Web.dev under CC BY 4.0 license</a></figcaption></figure>
<p>This facet of categorization is significant because this is how they are visually represented in the <strong>Performance</strong> tab of Chrome’s DevTools. You can see the matching color encoding in the summary pane below:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="180561" data-permalink="https://blog.logrocket.com/devtools-performance-tab-2/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/10/devtools-performance-tab.jpeg" data-orig-size="730,450" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="DevTools Performance Tab" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/10/devtools-performance-tab.jpeg?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/10/devtools-performance-tab.jpeg?w=730" class="aligncenter size-full wp-image-180561" src="https://blog.logrocket.com/wp-content/uploads/2023/10/devtools-performance-tab.jpeg" alt="DevTools Performance Tab" width="730" height="450" srcset="https://blog.logrocket.com/wp-content/uploads/2023/10/devtools-performance-tab.jpeg 730w, https://blog.logrocket.com/wp-content/uploads/2023/10/devtools-performance-tab.jpeg?resize=300,185 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>DevTools can be used to tell us if we have realized performance gains. We can compare recorded sessions of a page’s performance before and after changes have been made. If you are unsure how to profile performance, you can consult <a href="https://developer.chrome.com/docs/devtools/performance/">the docs on analyzing runtime performance</a>.</p>
<p>If you read articles from Google on <code>content-visibility</code>, you might find that the term “rendering” is used in different contexts. Some tutorials may be talking about the rendering of a webpage, or the category that you see in Chrome’s DevTools that includes the style and layout areas.</p>
<p>Overloading the term like this can be a source of confusion. In this tutorial, we will follow the definition of rendering that we introduced at the start of this section.</p>
<h2 id="what-css-containment">What is CSS Containment?</h2>
<p>The goal of the <a href="https://drafts.csswg.org/css-contain/">CSS Containment Specification</a> is to improve the performance of webpages by allowing the browser to isolate a portion of the page (DOM subtree) from the rest of the page. Containment enables much more powerful optimizations by browsers because it limits how widely a given change can affect a document.</p>
<p>The reason that developers have to intervene is that the browser can’t accurately guess by itself if parts of a page are independent. The specification defines the <code>contain</code> and <code>content-visibility</code> properties to give developers the capability to identify isolated parts of the page.</p>
<p>There are four types of containment:</p>
<ul>
<li style="margin-bottom: 7px; padding-bottom: 7px;"><strong>Size</strong>: Size containment on an element ensures that the element’s box can be laid out without needing to examine its descendant to determine its size. For example, if an element has <code>width: 100px</code> and <code>aspect-ratio: 1/1</code> and <code>overflow: hidden</code>, its descendants will not influence its size, so we don’t need to examine them</li>
<li style="margin-bottom: 7px; padding-bottom: 7px;"><strong>Layout</strong>: The element <a href="https://www.w3.org/TR/css-display-3/#establish-an-independent-formatting-context">has an independent formatting context</a>. This allows us to potentially skip the layout of the descendants if all we want to do is lay out other boxes</li>
<li style="margin-bottom: 7px; padding-bottom: 7px;"><strong>Style</strong>: Style containment ensures that properties do not affect elements outside of the container. Counters are an example of properties that can do this. The style of the <code>counter-increment</code>, <code>counter-set</code> , and <code>content</code> properties must be scoped to the container. This allows us to potentially skip style computation for the descendants if all we need is to compute styles on other elements</li>
<li style="margin-bottom: 7px; padding-bottom: 7px;"><strong>Paint</strong>: Paint containment ensures that the descendants of the containing box don’t display outside its bounds. This allows us to potentially skip painting the descendants if the element is outside of the viewport.</li>
</ul>
<p>The <code>contain</code> property tells the browser what type of containment an element has. It may be hard to figure out which containment values to use for different use cases. But this article won’t dive any deeper into the <code>contain</code> property — we’ll be looking at <code>content-visibility</code>, which can apply containment to an element automatically. It ensures that you get the largest performance gains the browser can provide with minimal effort from you as a developer.</p>
<h2 id="why-use-content-visibility">Why use <code>content-visibility</code>?</h2>
<p>The <code>content-visibility</code> property enables the browser to skip an element’s layout and painting until it is needed, which makes the initial page load faster. Because the browser does not have to re-render the DOM or page layout as often, this can result in performance benefits over the entire lifecycle of a page or web app.</p>
<h2 id="content-visibility-drawbacks"><code>content-visibility</code> drawbacks</h2>
<p>To reap the benefits of the <code>content-visibility</code> property, you may need to reorganize your HTML into sections. This may not be a big deal for you, but it may be more work than anticipated if some styles are broken by restructuring your page. Just keep in mind that it is not the case that simply adding the <code>content-visibility</code> property to any page will magically improve performance.</p>
<p>Additionally, the <code>content-visibility</code> property may introduce scrollbar jumping when sections come into the viewport and are fully rendered. The height of an element outside of the viewport may be zero or may have an estimated size applied to it through the <code>contain-intrinsic-size</code> property. When the styles are applied to an element as it comes into view, it may grow or shrink the element, which will resize the page and affect the scrollbar length.</p>
<p>From my exploration, you can incur a performance penalty by applying <code>content-visibility</code> to a section that is relevant to the user (on-screen, focused, or selected), similar to lazy loading with the <code>loading</code> attribute in HTML.</p>
<p>As a result, you may need to tweak styles to ensure the browser considers something off-screen. The <a href="https://drafts.csswg.org/css-contain/#:~:text=overflow%20clip%20edge%20intersects">CSS Containment Spec</a> says that an element is onscreen if the “<a href="https://www.w3.org/TR/css-overflow-3/#overflow-clip-edge">overflow clip edge</a> intersects with the viewport, or a browser-defined margin around the viewport.”</p>
<p>It is not clear what the value of the browser-defined margin is — there is a possibility that something may be off-screen to the user, but the browser considers it on-screen because of this fine, unknown margin! However, this is literally an edge case.</p>
<p>One of the features of <code>content-visibility: auto</code> is that off-screen content is available in the DOM and the accessibility tree. The flip side of this is that <a href="https://www.w3.org/TR/wai-aria-1.1/#landmark_roles">landmark</a> elements with style features such as <code>display: none</code> or <code>visibility: hidden</code> will also appear in the accessibility tree when off-screen because the browser won’t render these styles until they enter the viewport. To prevent these from being visible in the accessibility tree as you may expect, you will need to manually add <code>aria-hidden="true"</code>.</p>
<p>It is good to keep in mind that CSS Containment is a new concept and people are unlikely to know how to use it. In the <a href="https://2023.stateofcss.com/en-US/features/#reading_list">State of CSS 2023 survey</a> reading list, it was the third most featured item. We can deduce from this that there is awareness of the property, but people haven’t gotten around to learning it yet!</p>
<p>During the maintenance of a codebase in a team, people can alter the HTML of a page unaware that their change has affected containment conditions, which undoes the performance gains accrued from using <code>content-visibility</code>. After all, it is a new concept, so it won’t always be front of mind for people to check.</p>
<h2 id="when-consider-content-visibility-project">When to consider <code>content-visibility</code> in a project</h2>
<p>Performance is a tricky topic because it often involves tradeoffs. It is becoming more common to set a <a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Performance_budgets">performance budget</a> to be explicit about the decisions you have made and the rationale you followed. Ideally, you will be confident that you’ll achieve your performance goals before you build something, but none of us have a crystal ball!</p>
<p>As you build something for the web, you may find that you are falling below your desired performance thresholds. Is this the time to reach for <code>content-visibility</code>? Or should you be using it as a common practice and factor the savings in beforehand?</p>
<p>It is difficult to draw a general conclusion here because this is new territory for CSS. The question is: do we treat <code>content-visibility</code> as a performance optimization technique or do we treat it as a common practice?</p>
<p>In the optimization camp, you don’t use the property until you need it. Otherwise, you’re in premature optimization territory. The trouble there is that you won’t actually notice the poor performance unless you are actively testing on the lowest-specced devices available.</p>
<p>In the common practice camp, you could use <code>content-visibility</code> almost everywhere. Potentially any page could benefit from using the property when you have content that is off-screen, but the payoff will vary. You will need to draw a line somewhere to be practical. You may want to focus on larger pages where the payoff is greater.</p>
<p>In any case, you should be considerate of how you use the <code>content-visibility</code> property. If there is a lot of churn in the layout or contents of a page, it is probably better to defer using <code>content-visibility</code> until that part is in a more stable state. You need to be sure something is off-screen and will be targeted correctly.</p>
<p>I think that this would be easier to manage in a component-driven frontend where the encapsulation of fragments of a page is more explicit. Containment and web components are complementary in their pursuit of identifying independent pieces of a webpage. Conversely, if your content is written in Markdown, it is likely that your document has fewer identifiable sections and it is more challenging to use <code>content-visibility</code>.</p>
<h2 id="how-to-use-content-visibility">How to use <code>content-visibility</code></h2>
<p>The <code>content-visibility</code> property accepts one of three values:</p>
<ul>
<li><code>visible</code>: An element’s contents are laid out and rendered as normal. This is the default</li>
<li><code>auto</code>: The element turns on layout containment, style containment, and paint containment. If the element is not relevant to the user, it also skips its contents. The skipped contents are accessible to the browser</li>
<li><code>hidden</code>: The element skips its contents. The skipped contents are not accessible to browser-affected elements and are not available to browser features such as find-in-page, and tab order navigation</li>
</ul>
<p>You may need to use the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/contain-intrinsic-size"><code>contain-intrinsic-size</code></a> property alongside <code>content-visibility</code> to realize performance gains associated with size containment.</p>
<h3 id="specifying-size-element-contain-intrinsic-size">Specifying the size of an element with <code>contain-intrinsic-size</code></h3>
<p>To realize the potential benefits of <code>content-visibility</code>, the browser needs to apply size containment. Size containment allows the browser to lay out an element as though it has a fixed size, preventing unnecessary <a href="https://developer.mozilla.org/en-US/docs/Glossary/Reflow">reflows</a> by avoiding the re-rendering of child elements to determine the actual size.</p>
<p>By default, size containment treats elements as though they have no content, and may collapse the layout in the same way as if the contents had no width or height. This means that the element will lay out as if it were empty. The <code>contain-intrinsic-size</code> property allows developers to specify an appropriate value to be used as the size for layout.</p>
<p>If you are not sure of the exact dimensions of an element, there is an <code>auto</code> keyword for <code>contain-intrinsic-size</code> that can help. The <code>auto &lt;length&gt;</code> value allows you to supply a placeholder value as the second number.</p>
<p>For example, if you specified <code>contain-intrinsic-size: auto 500px</code>, the element will start out with a 500px intrinsic width and height. When the element comes into view and its contents are rendered, it will change to the actual rendered intrinsic size:</p>
<pre class="language-css hljs">.offscreen-section{
  content-visibility: auto;
  contain-intrinsic-size: auto 500px;
}
</pre>
<p>Any subsequent rendering size changes will also be remembered. In practice, this means that if you scroll an element with <code>content-visibility: auto</code> applied, and then scroll it back off-screen, it will automatically retain its ideal width and height, and not revert to the placeholder sizing.</p>
<h3 id="hiding-content-content-visibility-hidden">Hiding content with <code>content-visibility: hidden</code></h3>
<p>Applying <code>content-visibility: hidden</code> to an element keeps the contents unrendered regardless of whether or not it is on-screen. It is up to you to change the value to <code>visible</code> in order for the user to see it when needed.</p>
<p>For me, the use cases for this are not super clear. Perhaps you can accrue benefits in UI patterns that involve revealing contents such as disclosure widgets and hidden nav menus.</p>
<p>I could see single-page applications (SPAs) benefitting from it, where inactive app views can be left in the DOM with <code>content-visibility: hidden</code> applied to them cached with the rest of the page. This can make a view quick to render when it is activated again.</p>
<p>Would you use <code>content-visibility: hidden</code> over <code>display:none</code>? Let’s compare it to other common ways of hiding an element’s contents to evaluate the differences:</p>
<ul>
<li><code>display: none</code>: Hides the element and destroys its rendering state. Unhiding the element is expensive because it renders a new element with the same contents</li>
<li><code>visibility: hidden</code>: Hides the element and keeps its rendering state. It still occupies space on the page and can be clicked on. It also updates the rendering state any time it is needed, even when hidden</li>
</ul>
<h2 id="practical-example-landing-page">Practical example: A landing page</h2>
<p>I want to explore how the <code>content-visibility</code> property can be applied to different sections of a typical webpage and demonstrate what the impact on performance is. I will explore two different use cases in the subsequent subsections:</p>
<ol>
<li>Something that is always hidden — the website’s main navigation menu, in this case</li>
<li>The major sections that are off-screen when the page is loaded</li>
</ol>
<p>The example is a landing page for the artist <a href="https://en.wikipedia.org/wiki/Ang%C3%A8le_(singer)">Angèle</a>, coded by <a href="https://codepen.io/rafaelavlucas/pen/BaBVWyL">Rafaela Lucas.</a> It is of typical size with five major sections (hero, tour dates, videos, album, follow):</p>
<p><img loading="lazy" decoding="async" data-attachment-id="180563" data-permalink="https://blog.logrocket.com/angele-landing-page/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/10/angele-landing-page.png" data-orig-size="730,982" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Angele Landing Page" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/10/angele-landing-page.png?w=223" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/10/angele-landing-page.png?w=730" class="aligncenter size-full wp-image-180563" src="https://blog.logrocket.com/wp-content/uploads/2023/10/angele-landing-page.png" alt="Angele Landing Page" width="730" height="982" srcset="https://blog.logrocket.com/wp-content/uploads/2023/10/angele-landing-page.png 730w, https://blog.logrocket.com/wp-content/uploads/2023/10/angele-landing-page.png?resize=223,300 223w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>I will audit the desktop performance for these scenarios to understand the outcomes. I ran a performance audit to establish a baseline, which I refer to as the default. You can see how I did that in the video below using the Chrome DevTools incognito mode:</p>
<div style="width: 956px;" class="wp-video"><!--[if lt IE 9]><script>document.createElement('video');</script><![endif]-->
<video class="wp-video-shortcode" id="video-30286-1" width="956" height="990" preload="metadata" controls="controls"><source type="video/mp4" src="https://blog.logrocket.com/wp-content/uploads/2023/10/audit-perf.mp4?_=1" /><a href="https://blog.logrocket.com/wp-content/uploads/2023/10/audit-perf.mp4">https://blog.logrocket.com/wp-content/uploads/2023/10/audit-perf.mp4</a></video></div>
<p>You can find the code for this example in this <a href="https://github.com/robole/content-visibility-css-property-exploration">GitHub repo</a>, where I also explored scenarios and examples not discussed here.</p>
<h3 id="use-case-a-applying-content-visibility-hidden-section">Use case A: Applying <code>content-visibility</code> to a hidden section</h3>
<p>The website navigation section (main navigation) is hidden by default. You must click on the hamburger menu to open it:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="180564" data-permalink="https://blog.logrocket.com/hidden-nav-menu/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/10/hidden-nav-menu.jpeg" data-orig-size="730,624" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="Hidden Nav Menu" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/10/hidden-nav-menu.jpeg?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/10/hidden-nav-menu.jpeg?w=730" class="aligncenter size-full wp-image-180564" src="https://blog.logrocket.com/wp-content/uploads/2023/10/hidden-nav-menu.jpeg" alt="Hidden Nav Menu" width="730" height="624" srcset="https://blog.logrocket.com/wp-content/uploads/2023/10/hidden-nav-menu.jpeg 730w, https://blog.logrocket.com/wp-content/uploads/2023/10/hidden-nav-menu.jpeg?resize=300,256 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>First, I added <code>content-visibility:auto;</code> to the menu and found that the performance was worse (see scenario A2 in table below). I was a bit surprised:</p>
<pre class="language-css hljs">.menu {
    content-visibility:auto;
}
</pre>
<p>Then, I added <code>content-intrinsic-size</code>. Because the menu has a fixed size (100vw by 100vh), I could provide the exact dimensions. This pushed the performance in the other direction and resulted in a small improvement in both rendering and painting (see scenario A3 in the table below):</p>
<pre class="language-css hljs">.menu {
    content-visibility:auto;
    content-intrinsic-size: 100vw 100vh;
}
</pre>
<p>Finally, using <code>content-visibility:hidden</code> was worse than scenario A3 (see scenario A4 in table below):</p>
<pre class="language-css hljs">.menu {
    content-visibility: hidden;
}
</pre>
<p>Based on these scenarios, we can conclude that you can achieve a small gain in performance when you use <code>content-visibility:auto</code> along with <code>content-intrinsic-size</code> on a hidden element like this. However, it is probably not worth pursuing this type of marginal gain unless you want things really optimized.</p>
<p>Here is a table of the auditing results:</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Scenario</strong></th>
<th><strong>Loading</strong></th>
<th><strong>Scripting</strong></th>
<th><strong>Rendering</strong></th>
<th><strong>Painting</strong></th>
<th><strong>System</strong></th>
<th><strong>Idle</strong></th>
<th><strong>Total</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>A1</td>
<td>Default</td>
<td>21</td>
<td>6</td>
<td>114</td>
<td>30</td>
<td>178</td>
<td>4608</td>
<td>4957</td>
</tr>
<tr>
<td>A2</td>
<td>Nav main menu has <code>content-visibility:auto</code> applied to it</td>
<td>34</td>
<td>7</td>
<td>181</td>
<td>82</td>
<td>212</td>
<td>4479</td>
<td>4995</td>
</tr>
<tr>
<td>A3</td>
<td>Nav main menu with content-visibility:auto and content-intrinsic-size: 100vw 100vh; specified.</td>
<td>22</td>
<td>6</td>
<td>106</td>
<td>22</td>
<td>128</td>
<td>4715</td>
<td>4999</td>
</tr>
<tr>
<td>A4</td>
<td>Nav main menu with <code>content-visibility:hidden</code> specified.</td>
<td>30</td>
<td>7</td>
<td>144</td>
<td>21</td>
<td>155</td>
<td>4752</td>
<td>5109</td>
</tr>
</tbody>
</table>
<h3 id="use-case-b-applying-content-visibility-off-screen-sections">Use case B: Applying <code>content-visibility</code> to off-screen sections</h3>
<p>There are three major sections that are initially off-screen. Let’s apply <code>content-visibility:auto</code> to them:</p>
<pre class="language-css hljs">.videos,
.album,
.follow {
  content-visibility: auto;
}
</pre>
<p>There was a significant improvement in rendering and painting of about 40% (see scenario B2 in the table below).</p>
<p>When I added <code>contain-intrinsic-size</code>, the performance also improved significantly (see scenario B2 in the table below). However, it was marginally worse than scenario B2. It would be better to omit <code>contain-intrinsic-size</code> in this case. This contrasts with results from scenarios A2 and A3.</p>
<p>The summary of the auditing results is below:</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Scenario</strong></th>
<th><strong>Loading</strong></th>
<th><strong>Scripting</strong></th>
<th><strong>Rendering</strong></th>
<th><strong>Painting</strong></th>
<th><strong>System</strong></th>
<th><strong>Idle</strong></th>
<th><strong>Total</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>B1</td>
<td>Default</td>
<td>21</td>
<td>6</td>
<td>114</td>
<td>30</td>
<td>178</td>
<td>4608</td>
<td>4957</td>
</tr>
<tr>
<td>B2</td>
<td>Lower 3 sections have <code>content-visibility:auto</code> applied.</td>
<td>19</td>
<td>5</td>
<td>61</td>
<td>11</td>
<td>145</td>
<td>4744</td>
<td>4985</td>
</tr>
<tr>
<td>B3</td>
<td>Lower 3 sections have <code>content-visibility:auto</code> and <code>contain-intrinsic-size</code> specified.</td>
<td>23</td>
<td>5</td>
<td>64</td>
<td>16</td>
<td>137</td>
<td>4673</td>
<td>4918</td>
</tr>
</tbody>
</table>
<h2 id="content-visibility-ready-general-usage">Is <code>content-visibility</code> ready for general usage?</h2>
<p>At the time of writing, the <code>content-visibility</code> property is <a href="https://caniuse.com/?search=content-visibility">only available</a> in Chrome, Edge, and Opera.</p>
<p>It is in Firefox behind a flag. The CSS Containment Specification is slated to be adopted by all major browsers as a focus area of <a href="https://web.dev/interop-2023/">Interop 2023</a>.</p>
<p>There are cases where you can treat usage as a progressive enhancement. I could not find a polyfill, so you may have to skip it if this is essential for you.</p>
<h2 id="comparison-other-performance-optimization-techniques">Comparison with other performance optimization techniques</h2>
<p>There are plenty of existing techniques to boost web performance. You will need to evaluate if <code>content-visibility</code> is complementary or not with the other techniques you deploy. Here are a couple that come to mind.</p>
<h3 id="comparing-content-visibility-lazy-loading">Comparing <code>content-visibility</code> with lazy loading</h3>
<p>Lazy loading does not request the resource (<code>img</code> or <code>iframe</code>) until it is needed. However, for <code>content-visibility: auto</code>, the browser will still request the data, but it just won’t render it.</p>
<p>The number of network requests and the volume of data sent over the wire are two of the most significant factors affecting page loading speed. In this regard, lazy loading would usually offer bigger performance gains than adding <code>content-visibility: auto</code> to some sections.</p>
<p>In theory, you can use both. However, I haven’t seen usage of this in the wild, so I can’t say if you would encounter any issues.</p>
<h3 id="comparing-content-visibility-react-virtualized">Comparing <code>content-visibility</code> with React Virtualized</h3>
<p>React Virtualized is a library for <a href="https://blog.logrocket.com/rendering-large-lists-react-virtualized/">efficiently rendering large lists and tabular data</a>. This library presents only the required rows and indicates the presence of other hidden rows via CSS styles. It manipulates the DOM elements to remove past elements and add new elements that come into view.</p>
<p>React Virtualized only loads the data that is needed, whereas <code>content-visibility: auto</code> loads all of the data but skips rendering. These are not complementary techniques when applied to the same elements.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The <code>content-visibility</code> property and CSS containment offer valuable performance-boosting power to CSS. For the landing page example I explored, I was able to reduce rendering and layout by approximately 40 percent.</p>
<p>On the surface, usage looks straightforward — you get performance gains by using just two properties! However, it is challenging to apply them correctly to your code if you know little about web performance. You can hamper performance if you aren’t careful.</p>
<p>Using <code>content-visibility</code> comes with its own set of considerations and potential challenges. First, it might require you to restructure your content into distinct sections to prevent issues like scrollbar inconsistencies as content becomes visible on the screen. Additionally, there are accessibility concerns that need to be addressed. I realized that it’s crucial to carefully monitor performance, as the results were often not what I was expecting.</p>
<p>Embarking on this journey brings about various questions about the division of responsibilities within a team. As the knowledge required for frontend development continues to expand, who should take the lead on this — is it the UI engineer, aka “the CSS guy”? Or should an architect or a performance specialist be responsible?</p>
<p>As our product continues to grow and evolve, we must establish a method to regularly review these properties to ensure they are indeed optimizing — rather than hindering — our performance.</p>
<h3 id="further-information">Further information</h3>
<ol>
<li><a href="https://drafts.csswg.org/css-contain/#content-visibility">CSS Containment Module Level 2 Specification – <code>content-visibility</code> section</a></li>
<li><a href="https://developer.mozilla.org/docs/Web/CSS/CSS_Containment">MDN Docs on CSS Containment</a></li>
<li><a href="https://www.youtube.com/watch?v=FFA-v-CIxJQ">Slashing layout cost with content-visibility – HTTP 203 (YouTube Video)</a></li>
</ol>
</html>
<p>The post <a href="https://blog.logrocket.com/using-css-content-visibility-boost-rendering-performance/">Using CSS content-visibility to boost your rendering performance</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.logrocket.com/using-css-content-visibility-boost-rendering-performance/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">30286</post-id>	</item>
		<item>
		<title>CSS trig functions: Practical applications</title>
		<link>https://blog.logrocket.com/css-trig-functions-practical-applications/</link>
					<comments>https://blog.logrocket.com/css-trig-functions-practical-applications/#respond</comments>
		
		<dc:creator><![CDATA[Rob O'Leary]]></dc:creator>
		<pubDate>Wed, 21 Jun 2023 16:00:06 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[css]]></category>
		<guid isPermaLink="false">https://blog.logrocket.com/?p=172327</guid>

					<description><![CDATA[<p>We use CSS trigonometry functions to make precise measurements and create shapes, layouts, animations, and creative designs.</p>
<p>The post <a href="https://blog.logrocket.com/css-trig-functions-practical-applications/">CSS trig functions: Practical applications</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[<!DOCTYPE html>
<html><p>Several trigonometry functions have been added to CSS and they are now supported in all major browsers. Having the mathematical power of trig available in CSS opens up some interesting possibilities!</p>
<img loading="lazy" decoding="async" width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/06/css-trigonometry-practical-applications.png" class="attachment-full size-full wp-post-image" alt="CSS Trigonometry Practical Applications" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/css-trigonometry-practical-applications.png 730w, https://blog.logrocket.com/wp-content/uploads/2023/06/css-trigonometry-practical-applications.png?resize=300,200 300w" sizes="(max-width: 730px) 100vw, 730px" data-attachment-id="173034" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/css-trigonometry-practical-applications/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/css-trigonometry-practical-applications.png" data-orig-size="730,487" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="CSS trigonometry practical applications" data-image-description data-image-caption data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/css-trigonometry-practical-applications.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/css-trigonometry-practical-applications.png?w=730"><p>If you get flooded with panic or a sense of inadequacy when you hear the word “math” (or “maths” if you are not from North America), don’t worry! If you find math abstract and challenging to comprehend, try thinking of it in terms of everyday activities. Numbers underpin structures and patterns all around us. Web design is no different in this respect.</p>
<p>This article will provide you with a gentle crash course in trigonometry followed by some examples. Instead of getting bogged down in long-winded explanations and difficult equations, I will try to give you just enough information to apply some math to web design.</p>
<p>Let’s get started!</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#what-is-trigonometry">What is trigonometry?</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#making-precise-measurements">Making precise measurements</a></li>
<li><a href="#using-triangulation">Using triangulation</a></li>
<li><a href="#positioning-points-circle">Positioning points on a circle</a></li>
<li><a href="#modeling-wave-functions">Modeling wave functions</a></li>
</ul>
</li>
<li><a href="#understanding-trig-functions">Understanding trig functions</a></li>
<li><a href="#understanding-trigonometry-functions-css">The trigonometry functions in CSS</a></li>
<li><a href="#applications-trigonometry-web">Applications of trigonometry on the web</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#placing-elements-on-circle">Placing elements on a circle</a></li>
<li><a href="#creating-shapes">Creating shapes</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#creating-triangles">Creating triangles</a></li>
<li><a href="#creating-parallelograms">Creating parallelograms</a></li>
<li><a href="#creating-complex-shapes">Creating complex shapes</a></li>
</ul>
</li>
<li><a href="#creating-layouts">Creating layouts</a></li>
<li><a href="#creating-animations">Creating animations</a></li>
<li><a href="#building-creative-designs">Building creative designs</a></li>
</ul>
</li>
</ul>
<h2 id="what-is-trigonometry">What is trigonometry?</h2>
<p>Trigonometry is concerned with triangles. This mathematical function helps us find the dimensions of a triangle’s sides and angles. Often, we know some of a triangle’s dimensions but need to find the others:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="172337" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/trigonometry-purpose/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/trigonometry-purpose.png" data-orig-size="720,612" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Trigonometry purpose finding triangle dimensions" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/trigonometry-purpose.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/trigonometry-purpose.png?w=720" class="aligncenter wp-image-172337 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/trigonometry-purpose.png" alt="Trigonometry Purpose Finding Triangle Dimensions" width="720" height="612" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/trigonometry-purpose.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/06/trigonometry-purpose.png?resize=300,255 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>It’s fairly straightforward to use trig to calculate the dimensions of right-angled triangles. However, we can use trigonometry on other types of triangles too:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="172339" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/special-one/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/special-one.png" data-orig-size="720,612" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Trigonometry finding dimensions oblique triangles" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/special-one.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/special-one.png?w=720" class="aligncenter wp-image-172339 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/special-one.png" alt="Trigonometry Finding Dimensions Oblique Triangles" width="720" height="612" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/special-one.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/06/special-one.png?resize=300,255 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>Trigonometry is not an abstract subject that lives in school books; it’s used frequently in the real world in many different disciplines. Let’s look at a few common use cases.</p>
<h3 id="making-precise-measurements">Making precise measurements</h3>
<p>Trigonometry is used in cases where precise measurements are needed. For example, surveyors historically used a device called an <a href="https://en.wikipedia.org/wiki/Inclinometer">inclinometer</a> to get the angle of a slope and then applied trigonometry to precisely measure the horizontal distance:</p>
<figure id="attachment_172340" aria-describedby="caption-attachment-172340" style="width: 480px" class="wp-caption aligncenter"><img loading="lazy" decoding="async" data-attachment-id="172340" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/shadow-square-stoffler/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/shadow-square-stoffler.webp" data-orig-size="480,389" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Trigonometry precise measurements inclinometer" data-image-description="" data-image-caption="&lt;p&gt;Shadow-square-stoffler courtesy of Wikipedia Commons; https://commons.wikimedia.org/wiki/File:Shadow-square-stoffler_large.webp&lt;/p&gt;
" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/shadow-square-stoffler.webp?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/shadow-square-stoffler.webp?w=480" class="wp-image-172340 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/shadow-square-stoffler.webp" alt="Trigonometry Precise Measurements Inclinometer" width="480" height="389" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/shadow-square-stoffler.webp 480w, https://blog.logrocket.com/wp-content/uploads/2023/06/shadow-square-stoffler.webp?resize=300,243 300w" sizes="(max-width: 480px) 100vw, 480px" /><figcaption id="caption-attachment-172340" class="wp-caption-text">Shadow-square-stoffler courtesy of <a href="https://commons.wikimedia.org/wiki/File:Shadow-square-stoffler_large.webp">Wikipedia Commons</a>.</figcaption></figure>
<p>More modern surveying equipment is equipped with digital sensors and lasers, but the underlying theory has remained unchanged for centuries. In fact, it was the Greeks who are credited with the formalization of trigonometry as a branch of mathematics. The name is derived from the ancient Greek words trígōnon (meaning “triangle”) and métron (meaning “measure”).<br>
Greek letters, such as θ (theta), are often used to represent variables in trigonometric equations. But, we can actually use any letters. I think the Greek letter conversion may contribute to the intimidation factor around trigonometry.</p>
<h3 id="using-triangulation">Using triangulation</h3>
<p>A technique known as <a href="https://en.wikipedia.org/wiki/Triangulation">triangulation</a> is used to determine the location of a particular point by forming triangles to the point from other known points. In the example below, we can use triangulation to ascertain the position of the ship entering the bay using the angles observed from points A and B and the baseline, b, between them:<br>
<img loading="lazy" decoding="async" data-attachment-id="172341" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/triangulation-example/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/triangulation-example.jpg" data-orig-size="720,512" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="Triangulation example" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/triangulation-example.jpg?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/triangulation-example.jpg?w=720" class="aligncenter wp-image-172341 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/triangulation-example.jpg" alt="Triangulation Example" width="720" height="512" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/triangulation-example.jpg 720w, https://blog.logrocket.com/wp-content/uploads/2023/06/triangulation-example.jpg?resize=300,213 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<h3 id="positioning-points-circle">Positioning points on a circle</h3>
<p>Trigonometry can be used with circles too. We can use trigonometry to position a point on a circle using triangles. I will discuss how to do this in CSS later in this article:<br>
<img loading="lazy" decoding="async" data-attachment-id="172342" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/position-on-a-circle/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/position-on-a-circle.png" data-orig-size="694,651" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Trigonometry position on circle" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/position-on-a-circle.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/position-on-a-circle.png?w=694" class="aligncenter wp-image-172342 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/position-on-a-circle.png" alt="Trigonometry Position On Circle" width="694" height="651" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/position-on-a-circle.png 694w, https://blog.logrocket.com/wp-content/uploads/2023/06/position-on-a-circle.png?resize=300,281 300w" sizes="(max-width: 694px) 100vw, 694px" /></p>
<h3 id="modeling-wave-functions">Modeling wave functions</h3>
<p>Trigonometry is also associated with curved graphs. This mathematical function can be used to model a variety of curved or wave functions, such as planet orbits, sound waves, or vibrations.<br>
If we rotate a triangle around a circle using trigonometry functions, we generate a series of values. For example, here’s how the cosine function relates to a circle:</p>
<figure id="attachment_172343" aria-describedby="caption-attachment-172343" style="width: 550px" class="wp-caption aligncenter"><img loading="lazy" decoding="async" data-attachment-id="172343" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/cosine-wave/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/cosine-wave.webp" data-orig-size="550,400" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Cosine wave" data-image-description="" data-image-caption="&lt;p&gt;Courtesy of Wikipedia Commons; https://en.wikipedia.org/wiki/Sine_wave#/media/File:ComplexSinInATimeAxe.gif&lt;/p&gt;
" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/cosine-wave.webp?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/cosine-wave.webp?w=550" class="wp-image-172343 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/cosine-wave.webp" alt="Cosine Wave" width="550" height="400" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/cosine-wave.webp 550w, https://blog.logrocket.com/wp-content/uploads/2023/06/cosine-wave.webp?resize=300,218 300w" sizes="(max-width: 550px) 100vw, 550px" /><figcaption id="caption-attachment-172343" class="wp-caption-text">Courtesy of <a href="hhttps://en.wikipedia.org/wiki/Sine_wave#/media/File:ComplexSinInATimeAxe.gif">Wikipedia</a></figcaption></figure>
<p>If we plot these values on a graph, it looks like a smooth wave:</p>
<figure id="attachment_172344" aria-describedby="caption-attachment-172344" style="width: 600px" class="wp-caption aligncenter"><img loading="lazy" decoding="async" data-attachment-id="172344" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/cosine-one-period/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/cosine-one-period.jpg" data-orig-size="600,240" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Cosine one period" data-image-description="" data-image-caption="&lt;p&gt;Courtesy of Wikipedia Commons; https://commons.wikimedia.org/wiki/File:Cosine_one_period.svg&lt;/p&gt;
" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/cosine-one-period.jpg?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/cosine-one-period.jpg?w=600" class="wp-image-172344 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/cosine-one-period.jpg" alt="Cosine One Period" width="600" height="240" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/cosine-one-period.jpg 600w, https://blog.logrocket.com/wp-content/uploads/2023/06/cosine-one-period.jpg?resize=300,120 300w" sizes="(max-width: 600px) 100vw, 600px" /><figcaption id="caption-attachment-172344" class="wp-caption-text">Courtesy of <a href="https://commons.wikimedia.org/wiki/File:Cosine_one_period.svg">Wikimedia Commons</a></figcaption></figure>
<p>These waves create repeating patterns. While it seems abstract, we could apply this facet of trigonometry to elements on our webpages.</p>
<p>If this seems a bit intimidating, just keep reading; seeing some examples will help! First, let’s take a brief look at the trigonometric functions.</p>
<h2 id="understanding-trig-functions">Understanding trig functions</h2>
<p>Let’s start by looking at a right-angled triangle and discussing the terminology associated with triangles:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="172345" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/right-angled-triangle/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/right-angled-triangle.png" data-orig-size="720,382" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Right-angled triangle" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/right-angled-triangle.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/right-angled-triangle.png?w=720" class="aligncenter wp-image-172345 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/right-angled-triangle.png" alt="Right-angled Triangle" width="720" height="382" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/right-angled-triangle.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/06/right-angled-triangle.png?resize=300,159 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<ul>
<li><strong>right angle</strong>: 90-degree angle; indicated by the blue box in the corner</li>
<li><strong>other angle</strong>: located adjacent to the right angle, we usually know the value of this angle; it’s is represented by the theta symbol, θ</li>
<li><strong>opposite</strong>: side opposite the θ angle</li>
<li><strong>hypotenuse</strong>: side opposite the right angle; this is the longest side</li>
<li><strong>adjacent</strong>: side next to the θ angle that is not the hypotenuse</li>
</ul>
<p>The main functions in trigonometry are <a href="https://www.mathsisfun.com/sine-cosine-tangent.html">sine,</a> <a href="https://www.mathsisfun.com/sine-cosine-tangent.html">cosine</a>, and <a href="https://www.mathsisfun.com/sine-cosine-tangent.html">tangent</a>. They are the ratio of one side of a right triangle to another side:</p>
<ul>
<li>sin (θ) = opposite / hypotenuse</li>
<li>cos (θ) = adjacent / hypotenuse</li>
<li>tan (θ) = opposite/ adjacent</li>
</ul>
<p>To learn more about trigonometry, I recommend reading the <a href="https://www.mathsisfun.com/algebra/trigonometry.html">Math is Fun “Introduction to Trigonometry.”</a> For even more in-depth information on this topic, Michell Barker wrote a three-part series called “<a href="https://tympanus.net/codrops/2021/06/01/trigonometry-in-css-and-javascript-introduction-to-trigonometry/">Trigonometry in CSS and JavaScript</a>.” Michelle provides some alternative examples that may be useful.</p>
<p>Sometimes hearing something described in a different way can make a concept click. Keep in mind that the series was written in 2021, so the trigonometry is done using Sass. With the addition of the trigonometric functions to CSS, we should now be able to do all of what Michelle covers using just plain ‘ol CSS!</p>
<h2 id="understanding-trigonometry-functions-css">Understanding trigonometry functions in CSS</h2>
<p>The trigonometric functions — sine, cosine, and tangent — are expressed like so in CSS: <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/sin"><code>sin()</code>, </a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/cos"><code>cos()</code></a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/tan"><code>tan()</code>.</a></p>
<p>We supply a single parameter to these functions, and it can be anything that resolves to a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/number"><code>&lt;number&gt;</code></a> or an <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/angle"><code>&lt;angle&gt;</code></a>. For example, <code>sin(45deg)</code>, <code>sin(0.125turn)</code>, and <code>sin(3.14159 / 4)</code> are all equivalent. The return values for <a href="https://www.w3.org/TR/css-values-4/#funcdef-sin"><code>sin()</code> and <code>cos()</code></a> will always be between −1 and 1, while <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/angle"><code>tan()</code></a> can return any number between −∞ and +∞.</p>
<p>There are also the <a href="https://en.wikipedia.org/wiki/Inverse_trigonometric_functions">“arc” or “inverse” trigonometric functions</a> — <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/asin"><code>asin()</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/acos"><code>acos()</code></a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/atan"><code>atan()</code></a> — which are used to obtain an angle from any of the triangle’s trigonometric ratios. “Inverse” means that they take the opposite set of values. For example, <code>asin()</code> accepts a value between 1 and -1, and returns an angle.</p>
<p>These functions are useful for a couple of cases. We can use them when we have the length of two sides of a triangle and need to get the related angle. Since those two sides are associated with the cosine formula, we can use <code>acos()</code> <code>adjacent /</code> <code>hypotenuse )</code> to calculate the value of the angle. We can also use the inverse functions to calculate the value of the third side:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="172346" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/trigonometry-purpose-with-functions/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/trigonometry-purpose-with-functions.png" data-orig-size="720,612" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Trigonometry purpose with functions" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/trigonometry-purpose-with-functions.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/trigonometry-purpose-with-functions.png?w=720" class="aligncenter wp-image-172346 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/trigonometry-purpose-with-functions.png" alt="Trigonometry Purpose With Functions" width="720" height="612" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/trigonometry-purpose-with-functions.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/06/trigonometry-purpose-with-functions.png?resize=300,255 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>Make more sense now? No? Well, I tried! <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f60a.png" alt="😊" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>To read about this in more detail, check out: “<a href="https://www.w3.org/TR/css-values-4/#trig-funcs">CSS Values and Units Module Level 4 specification</a>.”</p>
<h2 id="applications-trigonometry-web">Applications of trigonometry on the web</h2>
<p>Here are some applications for trigonometry functions:</p>
<ul>
<li>Unique layouts based on shape: use trigonometric functions to place elements on a shape, and aid in the creation of different shapes</li>
<li>Data visualization and charts: use trigonometric functions to push CSS frameworks, like <a href="https://chartscss.org/">Charts.CSS</a>, forward</li>
<li>Animations: use trigonometric functions to coordinate actions</li>
<li>Dynamic layouts: use trigonometric functions to replace simple units with calculations</li>
<li>Creative designs</li>
</ul>
<p>Let’s explore these applications with some examples.</p>
<h3 id="placing-elements-on-circle">Placing elements on a circle</h3>
<p>We can use trigonometry to place a point on a circle. You thought trigonometry was all about triangles? Well, yes it is. But, we can decompose problems into sub-problems that involve triangles, and this is one such example.</p>
<p>Let’s look at positioning at the one o’clock position on a circle. An important point to note is that zero degrees is at the three o’clock position:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="172348" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/position-on-a-circle-intro/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/position-on-a-circle-intro.png" data-orig-size="599,534" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Position on a circle" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/position-on-a-circle-intro.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/position-on-a-circle-intro.png?w=599" class="aligncenter wp-image-172348 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/position-on-a-circle-intro.png" alt="Position On A Circle" width="599" height="534" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/position-on-a-circle-intro.png 599w, https://blog.logrocket.com/wp-content/uploads/2023/06/position-on-a-circle-intro.png?resize=300,267 300w" sizes="(max-width: 599px) 100vw, 599px" /></p>
<p>In mathematics, positive degrees go in a counterclockwise direction. Therefore, we would position this at 60 degrees:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="172349" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/circle-quadrants/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/circle-quadrants.png" data-orig-size="646,534" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Circle quadrants" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/circle-quadrants.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/circle-quadrants.png?w=646" class="aligncenter wp-image-172349 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/circle-quadrants.png" alt="Circle Quadrants" width="646" height="534" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/circle-quadrants.png 646w, https://blog.logrocket.com/wp-content/uploads/2023/06/circle-quadrants.png?resize=300,248 300w" sizes="(max-width: 646px) 100vw, 646px" /></p>
<p>Another thing about the above diagram is that we have divided the circle into quadrants, or four parts, by drawing four radii. If we draw a line between two radii, we create a triangle and can do some trigonometry. By creating right-angled triangles in a quadrant, we can determine the x and y position of a point:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="172350" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/position-on-a-circle-equations/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/position-on-a-circle-equations.png" data-orig-size="694,543" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Position on circle trigonometric equations" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/position-on-a-circle-equations.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/position-on-a-circle-equations.png?w=694" class="aligncenter wp-image-172350 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/position-on-a-circle-equations.png" alt="Position On Circle Trigonometric Equations" width="694" height="543" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/position-on-a-circle-equations.png 694w, https://blog.logrocket.com/wp-content/uploads/2023/06/position-on-a-circle-equations.png?resize=300,235 300w" sizes="(max-width: 694px) 100vw, 694px" /></p>
<p>Therefore, the formulas for the x and y positions are as follows:</p>
<ul>
<li>x = radius * cosine(θ)</li>
<li>y = radius * sine(θ)</li>
</ul>
<p>Now, let’s create this example using CSS.</p>
<p>In CSS, negative degrees go in a counterclockwise direction (this is the opposite of mathematics). Therefore, we will position our point at -60 degrees:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="172351" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/css-circle-quadrants/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/css-circle-quadrants.png" data-orig-size="646,534" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="CSS circle quadrants" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/css-circle-quadrants.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/css-circle-quadrants.png?w=646" class="aligncenter wp-image-172351 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/css-circle-quadrants.png" alt="CSS Circle Quadrants" width="646" height="534" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/css-circle-quadrants.png 646w, https://blog.logrocket.com/wp-content/uploads/2023/06/css-circle-quadrants.png?resize=300,248 300w" sizes="(max-width: 646px) 100vw, 646px" /></p>
<p>Here’s a CodePen to see this in action:</p>
<p class="codepen" style="height: 399.046875px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="399.046875" data-default-tab="result" data-slug-hash="gOBKpPx" data-user="robatronbobby">See the Pen <a href="https://codepen.io/robatronbobby/pen/gOBKpPx"><br>
Point on a circle</a> by Rob O’Leary (<a href="https://codepen.io/robatronbobby">@robatronbobby</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<p>Here’s a CodePen by Mads Stoumann demonstrating how to build a clock with CSS trigonometry functions:</p>
<p class="codepen" style="height: 399.046875px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="399.046875" data-default-tab="result" data-slug-hash="wvxOQKo" data-user="stoumann">See the Pen <a href="https://codepen.io/stoumann/pen/wvxOQKo"><br>
CSS trig clock</a> by Mads Stoumann (<a href="https://codepen.io/stoumann">@stoumann</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<p>Mads used the formulas that we’re discussing in this article to position the numbers inside the clock face.</p>
<p>Ryan Mulligan used CSS trigonometry functions to create an interesting diamond pattern by positioning diamond shapes of increasing sizes around concentric circles:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="172352" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/diamond-spin-codepen-screnshot/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/diamond-spin-codepen-screnshot.png" data-orig-size="488,492" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Diamond spin trig pattern" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/diamond-spin-codepen-screnshot.png?w=298" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/diamond-spin-codepen-screnshot.png?w=488" class="aligncenter wp-image-172352 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/diamond-spin-codepen-screnshot.png" alt="Diamond Spin Trig Pattern" width="488" height="492" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/diamond-spin-codepen-screnshot.png 488w, https://blog.logrocket.com/wp-content/uploads/2023/06/diamond-spin-codepen-screnshot.png?resize=150,150 150w, https://blog.logrocket.com/wp-content/uploads/2023/06/diamond-spin-codepen-screnshot.png?resize=298,300 298w" sizes="(max-width: 488px) 100vw, 488px" /></p>
<p>View his <a href="https://codepen.io/hexagoncircle/pen/XWxZgqx">CodePen</a> to see how he turned this image into a cool animation.</p>
<h3 id="creating-shapes">Creating shapes</h3>
<p>It’s possible to create more accurate and complex shapes in CSS with mathematical functions including trigonometry functions – there have been other math functions added recently too that can help us go even further.</p>
<p>Remember that every element on a webpage is a box. To deviate from this can feel fresh and liberating.</p>
<p>Let’s start with a triangle.</p>
<h4 id="creating-triangles">Creating triangles</h4>
<p>There are a <a href="https://www.coding-dude.com/wp/css/create-a-triangle/">few ways to create triangles in CSS</a>, but not every method allows us to be precise with the length of the sides and sizes of the angles.</p>
<p>The CSS <code>clip-path</code> property offers the most control. We can create a triangle using the <code>polygon()</code> shape function and provide three points:</p>
<pre class="language-css hljs">/* this is a triangle with equal sides and angles */
.triangle{
    width:100px;
    height:100px;
    background-color:red;
    clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
}
</pre>
<p>However, we’d have to experiment with different values to come up with points that will allow us to create the type of triangle that we want. Firefox DevTools permits <code>clip-path</code> editing where the points can be dragged around. Alternatively, we can use a <code>clip-path</code> editing tool, like <a href="https://bennettfeely.com/clippy/">clippy</a>, to come up with the points to use.</p>
<p>With trigonometry, we can make a triangle in a more precise manner and also make it responsive. With custom properties, we can create a series of custom properties to create a particular triangle. For example, the below CSS code allows us to change the size of the triangle using the <code>hypotenuse</code> custom property:</p>
<pre class="language-css hljs">.triangle {
        --hypotenuse: 8rem;
        --angle: 30deg;

        --size: 20rem;
        --opposite: calc(sin(var(--angle)) * var(--hypotenuse));
        --adjacent: calc(var(--hypotenuse) / 2);
        --startPosX: calc(var(--size) / 2 - var(--adjacent));
        --startPosY: calc(var(--size) / 2 - var(--opposite) / 2);
        --endPosX: calc(var(--size) / 2 + var(--adjacent));
        --endPosY: calc(var(--size) / 2 + var(--opposite) / 2);

        clip-path: polygon(
          var(--startPosX) var(--endPosX),
          50% var(--startPosY),
          var(--endPosX) var(--endPosY)
        );

        width: var(--size);
        height: var(--size);
        background: linear-gradient(45deg, deeppink, red);
}

  .triangle:nth-of-type(2) {
    --hypotenuse: 100%;
  }
</pre>
<p>Here is a CodePen to show this in action:</p>
<p class="codepen" style="height: 399.046875px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="399.046875" data-default-tab="result" data-slug-hash="QWZzJZQ" data-user="robatronbobby">See the Pen <a href="https://codepen.io/robatronbobby/pen/QWZzJZQ"><br>
Precise triangles</a> by Rob O’Leary (<a href="https://codepen.io/robatronbobby">@robatronbobby</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<h4 id="creating-parallelograms">Creating parallelograms</h4>
<p>Now, let’s look at how to create a parallelogram:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="172353" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/parallelogram/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/parallelogram.png" data-orig-size="443,244" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Parallelogram" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/parallelogram.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/parallelogram.png?w=443" class="aligncenter wp-image-172353 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/parallelogram.png" alt="Parallelogram" width="443" height="244" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/parallelogram.png 443w, https://blog.logrocket.com/wp-content/uploads/2023/06/parallelogram.png?resize=300,165 300w" sizes="(max-width: 443px) 100vw, 443px" /></p>
<p>We use the <code>skewX()</code> transformation to pivot the shape. Then, we use <code>tan()</code> to the correct proportions of the <code>width</code>:</p>
<pre class="language-css hljs">.parallelogram {
    --w: 400;
    --h: 200;
    --angle: 20deg;

    position: relative;
    width: calc(1px * var(--w));
    height: calc(1px * var(--h));
    border: 2px lightgray dotted;

    margin: 2rem auto;
 }

  .parallelogram::before {
    content: "";
    position: absolute;
    width: calc(100% - 100% * var(--h) / var(--w) * tan(var(--angle)));
    height: 100%;
    transform-origin: 0 100%;
    transform: skewX(calc(0deg - var(--angle)));
    background-color: blue;
  }
</pre>
<p>Here is the <a href="https://codepen.io/robatronbobby/pen/gOBZZbx">accompanying CodePen.</a></p>
<h4 id="creating-complex-shapes">Creating complex shapes</h4>
<p>We can create more complex two-dimensional or three-dimensional shapes with the help of trigonometry. The most obvious three-dimensional shape is a <a href="https://en.wikipedia.org/wiki/Pyramid_(geometry)">pyramid</a>, often referred to as a <a href="https://en.wikipedia.org/wiki/Tetrahedron">tetrahedron</a>. The names of geometric shapes are also derived from Greek, usually the name describes the number of sides; hédra means ”face” in Greek.</p>
<p>For a complex 3D example, check out this <a href="https://en.wikipedia.org/wiki/Dodecahedron">dodecahedron</a> made by Mack Fitz:</p>
<p class="codepen" style="height: 399.046875px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="399.046875" data-default-tab="result" data-slug-hash="JjmxqaM" data-user="MackFitz">See the Pen <a href="https://codepen.io/MackFitz/pen/JjmxqaM">Shimmer, you crazy diamond – a 3D CSS-only dodecahedron-based gem</a> by Mack Fitz (<a href="https://codepen.io/MackFitz">@MackFitz</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<p>Daniel Wilson covers creating shapes with trigonometry functions in his article, “<a href="https://danielcwilson.com/posts/css-shapes-with-trig-functions/">Improving CSS Shapes with Trigonometric Functions</a>.”</p>
<h3 id="creating-layouts">Creating layouts</h3>
<p>Now that we know how to create parallelograms, we can use them to create a diagonal layout:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="172354" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/diagonal-layout/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/diagonal-layout.png" data-orig-size="720,626" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Tips for pure CSS diagonal layouts" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/diagonal-layout.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/diagonal-layout.png?w=720" class="aligncenter wp-image-172354 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/diagonal-layout.png" alt="Tips For Pure CSS Diagonal Layouts" width="720" height="626" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/diagonal-layout.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/06/diagonal-layout.png?resize=300,261 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>Here is the CodePen of the diagonal layout, it is courtesy of Nils Bender:</p>
<p class="codepen" style="height: 399.046875px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="399.046875" data-default-tab="result" data-slug-hash="MWPwMMJ" data-user="enbee81">See the Pen <a href="https://codepen.io/enbee81/pen/MWPwMMJ">Diagonal layouts in 2023</a> by Nils Bender (<a href="https://codepen.io/enbee81">@enbee81</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<p>To add horizontal text to the diagonal section, we’d need to add vertical padding to the content to ensure it doesn’t overflow the outline of the section. We can use trigonometry to calculate the minimum height required.</p>
<p>In the following illustration, we already know the container width, a. Then, α is the same angle we use to skew our element. Since we know this forms a right-angle triangle, we can calculate x using the following formula:</p>
<p>x = tan(α) * a / 2</p>
<p><img loading="lazy" decoding="async" data-attachment-id="172355" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/diagonal-layout-figure/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/diagonal-layout-figure.png" data-orig-size="720,404" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Diagonal layout figure trigonometry" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/diagonal-layout-figure.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/diagonal-layout-figure.png?w=720" class="aligncenter wp-image-172355 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/diagonal-layout-figure.png" alt="Trigonometry" width="720" height="404" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/diagonal-layout-figure.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/06/diagonal-layout-figure.png?resize=300,168 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>Nils provides a complete walk-through of this method in his article “<a href="https://9elements.com/blog/create-diagonal-layouts-like-it-s-2020/">Create Diagonal Layouts Like It’s 2020</a>.” When Nils originally wrote the article, he used a custom property with <code>--magic-number: 0.09719;</code> — now we can use <code>tan()</code> to take the magic out of it!</p>
<p>We can create concentric layouts by using multiple repeating circles and placing elements on them. We covered how to place elements on a circle earlier in this article:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="172356" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/concentric-circle-layout/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/concentric-circle-layout.png" data-orig-size="512,512" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Concentric circle layout" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/concentric-circle-layout.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/concentric-circle-layout.png?w=512" class="aligncenter wp-image-172356 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/concentric-circle-layout.png" alt="Concentric Circle Layout" width="512" height="512" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/concentric-circle-layout.png 512w, https://blog.logrocket.com/wp-content/uploads/2023/06/concentric-circle-layout.png?resize=150,150 150w, https://blog.logrocket.com/wp-content/uploads/2023/06/concentric-circle-layout.png?resize=300,300 300w" sizes="(max-width: 512px) 100vw, 512px" /></p>
<p>Here is a dynamic version by Mads Stoumann with some parameters to vary the density and number of elements and circles (rings):</p>
<p class="codepen" style="height: 399.046875px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="399.046875" data-default-tab="result" data-slug-hash="oNMJvjO" data-user="stoumann">See the Pen <a href="https://codepen.io/stoumann/pen/oNMJvjO">CSS sin() and cos() Demo 3</a> by Mads Stoumann (<a href="https://codepen.io/stoumann">@stoumann</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<p>BBC recently this pattern to create a data visualization of election results in Turkey:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="172357" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/turkish-election-data-visualisation/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/turkish-election-data-visualisation.png" data-orig-size="639,761" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Turkish election data visualization" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/turkish-election-data-visualisation.png?w=252" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/turkish-election-data-visualisation.png?w=639" class="aligncenter wp-image-172357 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/turkish-election-data-visualisation.png" alt="Turkish Election Data Visualization" width="639" height="761" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/turkish-election-data-visualisation.png 639w, https://blog.logrocket.com/wp-content/uploads/2023/06/turkish-election-data-visualisation.png?resize=252,300 252w" sizes="(max-width: 639px) 100vw, 639px" /></p>
<p>We could also use trigonometry and other math functions to create repeating patterns. One example, referred to as tessellations, is the covering of a <a href="https://en.wikipedia.org/wiki/Surface">surface</a> using one or more <a href="https://en.wikipedia.org/wiki/Geometric_shape">geometric shapes</a> with no overlaps or gaps.</p>
<h3 id="creating-animations">Creating animations</h3>
<p>Let’s return to the concept of waves. Here is a sine wave:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="172358" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/sine-one-period/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/sine-one-period.jpg" data-orig-size="600,240" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Sine one period" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/sine-one-period.jpg?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/sine-one-period.jpg?w=600" class="aligncenter wp-image-172358 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/sine-one-period.jpg" alt="Sine One Period" width="600" height="240" srcset="https://blog.logrocket.com/wp-content/uploads/2023/06/sine-one-period.jpg 600w, https://blog.logrocket.com/wp-content/uploads/2023/06/sine-one-period.jpg?resize=300,120 300w" sizes="(max-width: 600px) 100vw, 600px" /></p>
<p>An example of the sine wave in nature is the oscillation of an undamped spring around an equilibrium:</p>
<figure id="attachment_172359" aria-describedby="caption-attachment-172359" style="width: 160px" class="wp-caption aligncenter"><img loading="lazy" decoding="async" data-attachment-id="172359" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/animated-mass-spring/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/animated-mass-spring.gif" data-orig-size="160,320" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Animated Mass Spring" data-image-description="" data-image-caption="&lt;p&gt;Image credit: Wikipedia; https://en.wikipedia.org/wiki/Sine_wave#/media/File:Animated-mass-spring.gif&lt;/p&gt;
" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/animated-mass-spring.gif?w=150" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/animated-mass-spring.gif?w=160" class="wp-image-172359 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/animated-mass-spring.gif" alt="Animated Mass Spring" width="160" height="320"><figcaption id="caption-attachment-172359" class="wp-caption-text">Image credit: <a href="https://en.wikipedia.org/wiki/Sine_wave#/media/File:Animated-mass-spring.gif">Wikipedia</a></figcaption></figure>
<p>We can use trigonometry in the tweening (animated) property or in the easing function. For the easing function, we would supply values to a <code>cubic-bezier()</code> to emulate the wave-like curve.</p>
<p>I have seen people use trigonometry functions in the <code>animation-delay</code>; in many cases, using a magic number. However, the same outcome could also be achieved using an arbitrary number:</p>
<pre class="language-css hljs">.dot {
  --count: 4;

  /* this is a magic number */
  animation-delay: calc(
    sin((var(--index) / var(--count) * 45deg) * -1s 
  );
}
</pre>
<p>To animate an object on a sine wave path, or sinusoidal curve, we can use the <code>cubic-bezier()</code> to calculate the y position. Temani Afif explains in his article, “<a href="https://dev.to/this-is-learning/advanced-css-animation-using-cubic-bezier-nho/comments">Advanced CSS Animation Using cubic-bezier()</a>”, but it’s quite involved to grasp how this works. Here’s his example:</p>
<p class="codepen" style="height: 399.046875px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="399.046875" data-default-tab="result" data-slug-hash="qBrEBEM" data-user="t_afif">See the Pen <a href="https://codepen.io/t_afif/pen/qBrEBEM"><br>
CSS cubic-bezier animation</a> by Temani Afif (<a href="https://codepen.io/t_afif">@t_afif</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<p>A direct application of trigonometry functions in an animation can be showcased by this rotating box animation by Ana Tudor:</p>
<p class="codepen" style="height: 399.046875px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="399.046875" data-default-tab="result" data-slug-hash="JjBEzMQ" data-user="thebabydino">See the Pen <a href="https://codepen.io/thebabydino/pen/JjBEzMQ"><br>
Pure CSS trig + Houdini: animate square tiling</a> by Ana Tudor (<a href="https://codepen.io/thebabydino">@thebabydino</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<p>The orange squares get squished into rhombi and then eventually into a line, all while rotating around a central point! The scaling factor of the orange boxes is the cosine of the skew angle. Ana Tudor explains the idea behind the animation in <a href="https://twitter.com/anatudor/status/1634139251792117762">this Twitter thread</a>.</p>
<h3 id="building-creative-designs">Building creative designs</h3>
<p>LukyVJ created an Apple-inspired loader using trigonometry functions and conical gradients:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="172361" data-permalink="https://blog.logrocket.com/css-trig-functions-practical-applications/attachment/apple-fitness-demo-2/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/06/apple-fitness-demo.gif" data-orig-size="470,253" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Apple Fitness demo" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/06/apple-fitness-demo.gif?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/06/apple-fitness-demo.gif?w=470" class="aligncenter wp-image-172361 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/06/apple-fitness-demo.gif" alt="Apple Fitness Demo" width="470" height="253"></p>
<p>Here’s the <a href="https://codepen.io/LukyVj/pen/rNqvowZ">CodePen</a>.</p>
<p>Ana Tudor created a captivating animation that she called Animated Mobius Strip.</p>
<p class="codepen" style="height: 399.046875px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="399.046875" data-default-tab="result" data-slug-hash="wvybyMo" data-user="thebabydino">See the Pen <a href="https://codepen.io/thebabydino/pen/wvybyMo"><br>
Animated Mobius Strip using CSS mathematical functions</a> by Ana Tudor (<a href="https://codepen.io/thebabydino">@thebabydino</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<p>She uses trigonometry functions as an input to the <code>hsl()</code> function to shift colors in unison with the rotation of the objects:</p>
<pre class="language-css hljs">.comp {
    --m: calc(.5*(var(--n) - 1)); /* middle index */
    --ba: calc(1turn/var(--n)); /* base angle */
    --ca: calc(var(--i)*var(--ba)); /* current angle */
    --sgn-i: sign(var(--i) - var(--m)); /* sign w.r.t. middle */

    /* other styles */

    background: hsl(calc(100 + var(--sgn)*90), 
                    calc((1 + cos(var(--ca)))*43%), 
                    calc((1 + .5*var(--sgn)*sin(var(--ca)))*50%));
}
</pre>
<p>Michelle Barker made a paper snowflake maker, where the viewer can drag control handles to clip out segments of a triangle to generate a snowflake pattern. The <code>clip-path</code> coordinates are calculated using trigonometric functions:</p>
<p class="codepen" style="height: 399.046875px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="399.046875" data-default-tab="result" data-slug-hash="VwKdONM" data-user="michellebarker">See the Pen <a href="https://codepen.io/michellebarker/pen/VwKdONM"><br>
Snowflakes with clip-path trigonometry</a> by Michelle Barker (<a href="https://codepen.io/michellebarker">@michellebarker</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<p>Michelle uses Sass, but now we could use CSS for the <code>clip-path</code> calculation!</p>
<h2 id="final-word">Final word</h2>
<p>Now that trigonometry functions are available in CSS, we can do some interesting things without reaching for JavaScript. I hope I was able to demonstrate some practical applications of the CSS trigonometry functions and take away some of the mystery around using math for things like layouts and animations.</p>
<p>Of course, you don’t need to use math to build webpages, but it can be helpful for creating some beautiful and unique things.</p>
<p>Thanks for reading!</p>
</html>
<p>The post <a href="https://blog.logrocket.com/css-trig-functions-practical-applications/">CSS trig functions: Practical applications</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.logrocket.com/css-trig-functions-practical-applications/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">172327</post-id>	</item>
		<item>
		<title>Can you create beautiful stroked text in CSS?</title>
		<link>https://blog.logrocket.com/create-beautiful-stroked-text-css/</link>
					<comments>https://blog.logrocket.com/create-beautiful-stroked-text-css/#comments</comments>
		
		<dc:creator><![CDATA[Rob O'Leary]]></dc:creator>
		<pubDate>Wed, 05 Apr 2023 13:00:41 +0000</pubDate>
				<category><![CDATA[Featured Posts]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[css]]></category>
		<guid isPermaLink="false">https://blog.logrocket.com/?p=165587</guid>

					<description><![CDATA[<p>We explore several approaches for creating stroked text (or outline text) in CSS and with SVGs and look at many stroked text examples.</p>
<p>The post <a href="https://blog.logrocket.com/create-beautiful-stroked-text-css/">Can you create beautiful stroked text in CSS?</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[<!DOCTYPE html>
<html><p>Stroked text, also referred to as outlined text, can be used to improve readability, helping letters stand out from a background. It can be employed in a variety of ways to give your webpage some additional punch.</p>
<img loading="lazy" decoding="async" width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/create-beautiful-stroked-text-css.png" class="attachment-full size-full wp-post-image" alt="Create Beautiful Stroked Text CSS" srcset="https://blog.logrocket.com/wp-content/uploads/2023/04/create-beautiful-stroked-text-css.png 730w, https://blog.logrocket.com/wp-content/uploads/2023/04/create-beautiful-stroked-text-css.png?resize=300,200 300w" sizes="(max-width: 730px) 100vw, 730px" data-attachment-id="166174" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/create-beautiful-stroked-text-css-2/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/04/create-beautiful-stroked-text-css.png" data-orig-size="730,487" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Create beautiful stroked text CSS" data-image-description data-image-caption data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/04/create-beautiful-stroked-text-css.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/04/create-beautiful-stroked-text-css.png?w=730"><p>Here’s an example of the type of text that’s usually seen on the web:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165591" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/example-typical-website-text/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/example-typical-website-text.png" data-orig-size="720,480" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Example typical website text" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/example-typical-website-text.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/example-typical-website-text.png?w=720" class="aligncenter wp-image-165591 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/example-typical-website-text.png" alt="Example Typical Website Text" width="720" height="480" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/example-typical-website-text.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/03/example-typical-website-text.png?resize=300,200 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>Here’s an example of stroked text, sometimes referred to as outlined text:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165593" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/example-stroked-text/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/example-stroked-text.png" data-orig-size="720,480" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Example stroked text" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/example-stroked-text.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/example-stroked-text.png?w=720" class="aligncenter wp-image-165593 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/example-stroked-text.png" alt="Example Stroked Text" width="720" height="480" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/example-stroked-text.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/03/example-stroked-text.png?resize=300,200 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>A stroke is a border drawn along the outline of a letter. Stroked text can bring a different aesthetic to a webpage and can be utilized in some cool ways. The example above makes me think of American football jerseys! What do you think?</p>
<p>In this article, we’ll clarify some terminology pertaining to web fonts and explore how a stroke is applied to text. Then, we’ll move on to some examples, and dive into the CSS.</p>
<p>Let’s get started!</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#basic-primer-stroke">Basic primer on stroke</a></li>
<li><a href="#where-use-stroked-text">Where would you use stroked text?</a></li>
<li><a href="#stroked-text-css">Stroked text in CSS</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#non-standard-webkit-text-stroke-property">The non-standard <code>-webkit-text-stroke</code> property</a></li>
<li><a href="#shadow-hack">The shadow hack</a></li>
<li><a href="#pseudo-element-hack">The pseudo-element hack</a></li>
</ul>
</li>
<li><a href="#stroked-text-svgs">Stroked text in SVGs</a></li>
<li><a href="#stroked-text-variable-fonts">Stroked text with variable fonts</a></li>
<li><a href="#creating-stroked-text-css-vs-svgs">Creating stroked text with CSS vs. SVGs</a></li>
</ul>
<h2 id="basic-primer-stroke">Basic primer on stroke</h2>
<p>In graphic design or web design, the outside bit of outlined text is referred to as the stroke, and the inside bit as the fill:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165597" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/stroke-fill-stroked-text/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-fill-stroked-text.png" data-orig-size="720,480" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Stroke fill stroked text" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-fill-stroked-text.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-fill-stroked-text.png?w=720" class="aligncenter wp-image-165597 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-fill-stroked-text.png" alt="Stroke Fill Stroked Text" width="720" height="480" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-fill-stroked-text.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-fill-stroked-text.png?resize=300,200 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>The stroke can have a color that is different from that of the fill, usually referred to as a stroke color. Also, it can vary in width (i.e., thickness). It is similar to a <code>border</code> in this regard. This is usually referred to as stroke width:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165603" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/stroke-width-stroked-text/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-width-stroked-text.png" data-orig-size="720,480" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Stroked width stroked text" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-width-stroked-text.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-width-stroked-text.png?w=720" class="aligncenter wp-image-165603 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-width-stroked-text.png" alt="Stroked Width Stroked Text" width="720" height="480" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-width-stroked-text.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-width-stroked-text.png?resize=300,200 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>Stroke text may have no fill, or may have a transparent fill, so that the background is visible through the text. In this scenario, the text looks like an outline:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165605" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/stroked-text-transparent-fill/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-transparent-fill.png" data-orig-size="720,480" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Stroked text transparent fill" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-transparent-fill.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-transparent-fill.png?w=720" class="aligncenter wp-image-165605 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-transparent-fill.png" alt="Stroked Text Transparent Fill" width="720" height="480" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-transparent-fill.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-transparent-fill.png?resize=300,200 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>A less obvious facet of a stroke is its alignment. Stroke is like a border — it lies outside of the fill area, but its placement can vary.</p>
<p>Most UI design tools, such as <a href="https://www.figma.com/">Figma</a>, usually have three values for alignment:</p>
<ul>
<li><strong>Center</strong>: The stroke lies half inside the fill area, and half outside</li>
<li><strong>Inside</strong>: The stroke is inset</li>
<li><strong>Outside</strong>: The stroke is like a border, lying on the edge of the fill area</li>
</ul>
<p><img loading="lazy" decoding="async" data-attachment-id="165607" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/ui-design-dashboard-text-alignment-values/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/ui-design-dashboard-text-alignment-values.png" data-orig-size="241,151" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="UI design dashboard text alignment values" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/ui-design-dashboard-text-alignment-values.png?w=241" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/ui-design-dashboard-text-alignment-values.png?w=241" class="aligncenter wp-image-165607 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/ui-design-dashboard-text-alignment-values.png" alt="UI Design Dashboard Text Alignment Values" width="241" height="151"></p>
<p>Each of the below three text examples has identical property values, but a different stroke alignment value:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165610" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/stroked-text-examples-alignment-center-inside-outside/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-examples-alignment-center-inside-outside.png" data-orig-size="720,480" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Stroked text examples alignment center inside outside" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-examples-alignment-center-inside-outside.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-examples-alignment-center-inside-outside.png?w=720" class="aligncenter wp-image-165610 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-examples-alignment-center-inside-outside.png" alt="Stroked Text Examples Alignment Center Inside Outside" width="720" height="480" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-examples-alignment-center-inside-outside.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-examples-alignment-center-inside-outside.png?resize=300,200 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>You can see that the inside value “eats up” the space inside each letter. The outside value is the only option that does not shrink the size of the fill area.</p>
<p>It is worthwhile to keep in mind that there are some differences in capabilities between design tools and CSS. Some things are simple to accomplish with a design tool but can be hard to do with CSS! This can create tension between designers and developers! Let’s keep this in mind when we revisit stroke alignment later in this article!</p>
<h2 id="where-use-stroked-text">Where would you use stroked text?</h2>
<p>Stroked text is not that prevalent on the web, but you probably see it more often than you realize! It is used in a variety of ways.</p>
<p>Stroked text was a more popular aesthetic in the 1980s. You can see that reflected in the design of the text logo for the television series <a href="https://en.wikipedia.org/wiki/Stranger_Things"><em>Stranger Things</em></a>:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165613" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/stranger-things-logo-stroked-text/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stranger-things-logo-stroked-text.png" data-orig-size="720,396" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Stranger Things logo stroked text" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stranger-things-logo-stroked-text.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stranger-things-logo-stroked-text.png?w=720" class="aligncenter wp-image-165613 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/stranger-things-logo-stroked-text.png" alt="Stranger Things Logo Stroked Text" width="720" height="396" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/stranger-things-logo-stroked-text.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/03/stranger-things-logo-stroked-text.png?resize=300,165 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>If you want to create neon-esque text, you can achieve the effect using stroked text and a shadow with some blur.</p>
<p>For me, stroked text is synonymous with comics and heavy metal album cover art. You can check out <a href="https://www.ironmaiden.com/discography/studio-albums">Iron Maiden’s album covers</a> for a range of examples. Stroked text can provide needed contrast for text to stand out against a busy or very graphic background:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165615" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/iron-maiden-album-covers-stroked-text/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/iron-maiden-album-covers-stroked-text.png" data-orig-size="720,454" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Iron maiden album covers stroked text" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/iron-maiden-album-covers-stroked-text.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/iron-maiden-album-covers-stroked-text.png?w=720" class="aligncenter wp-image-165615 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/iron-maiden-album-covers-stroked-text.png" alt="Iron Maiden Album Covers Stroked Text" width="720" height="454" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/iron-maiden-album-covers-stroked-text.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/03/iron-maiden-album-covers-stroked-text.png?resize=300,189 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>I see stroked text used often in fashion too. A classy font with a transparent fill overlaid on a beautiful background can convey elegance:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165617" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/stroked-text-example-transparent-fill-backgound-image/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-example-transparent-fill-backgound-image.png" data-orig-size="720,405" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Stroked text example transparent fill background image" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-example-transparent-fill-backgound-image.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-example-transparent-fill-backgound-image.png?w=720" class="aligncenter wp-image-165617 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-example-transparent-fill-backgound-image.png" alt="Stroked Text Example Transparent Fill Background Image" width="720" height="405" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-example-transparent-fill-backgound-image.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-example-transparent-fill-backgound-image.png?resize=300,169 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p><a href="https://us.costacoffee.com">Costa Coffee</a> drops in stroked text frequently in its promotional campaigns. Combining stroked text with filled text offers an intriguing contrast of style:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165619" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/costa-coffee-stroked-text-filled-text-combo/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/costa-coffee-stroked-text-filled-text-combo.png" data-orig-size="720,461" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Costa Coffee stroked text filled text combo" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/costa-coffee-stroked-text-filled-text-combo.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/costa-coffee-stroked-text-filled-text-combo.png?w=720" class="aligncenter wp-image-165619 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/costa-coffee-stroked-text-filled-text-combo.png" alt="Costa Coffee Stroked Text Filled Text Combo" width="720" height="461" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/costa-coffee-stroked-text-filled-text-combo.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/03/costa-coffee-stroked-text-filled-text-combo.png?resize=300,192 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>There is an interesting example of mixed typographic style in the hero section of IMDb’s <a href="https://www.imdb.com/best-of/top-tv-series-2022">“Top Series of 2022” article</a>. As you can see below, the text for each block of text varies in style by color, font family, or stroke. For example, the text “2022” is stroked and has no fill. It is eye-catching:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165621" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/imdb-mixed-typographic-styles-stroked-text/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/imdb-mixed-typographic-styles-stroked-text.png" data-orig-size="720,405" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="IMDb mixed typographic styles stroked text" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/imdb-mixed-typographic-styles-stroked-text.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/imdb-mixed-typographic-styles-stroked-text.png?w=720" class="aligncenter wp-image-165621 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/imdb-mixed-typographic-styles-stroked-text.png" alt="IMDb Mixed Typographic Styles Stroked Text" width="720" height="405" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/imdb-mixed-typographic-styles-stroked-text.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/03/imdb-mixed-typographic-styles-stroked-text.png?resize=300,169 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>In this case, IMDb used an SVG for the stroked text. We’ll discuss using CSS vs. SVGs later in this article.</p>
<h2 id="stroked-text-css">Stroked text in CSS</h2>
<p>Stroked text can be created in CSS through the following three methods:</p>
<ul>
<li>The non-standard <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-text-stroke"><code>webkit-text-stroke</code></a> property</li>
<li>A shadow hack</li>
<li>A pseudo-element hack</li>
</ul>
<p>Here’s a spoiler alert — all of the above methods have a significant drawback from a performance standpoint.</p>
<p>Let’s take a look at these methods to understand how we could use each to replicate the IMDb title. The proof is in the pudding!</p>
<h3 id="non-standard-webkit-text-stroke-property">The non-standard <code>-webkit-text-stroke</code> property</h3>
<p>The CSS <code>-webkit-text-stroke</code> property specifies the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/length">width</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color_value">color</a> of a stroke for text content.</p>
<p>For example, here we’re creating a top-level heading with a white stroke that is <code>3px</code> wide and has no fill:</p>
<pre class="language-css hljs">h1 {
  -webkit-text-stroke: 3px white;

   color:transparent;
}
</pre>
<p>The <code>-webkit-text-stroke</code> property is a shorthand CSS property for two longhand properties: <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-text-stroke-width"><code>webkit-text-stroke-width</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-text-stroke-color"><code>webkit-text-stroke-color</code></a>.</p>
<p>Here is the equivalent CSS rule with the longhand properties:</p>
<pre class="language-css hljs">h1 {
  -webkit-text-stroke-width: 3px;
  -webkit-text-stroke-color: white;

   color:transparent;
}
</pre>
<p>Here is an example of mixing stroked text with regular text:</p>
<p class="codepen" style="height: 399.046875px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="399.046875" data-default-tab="result" data-slug-hash="ExpVwrZ" data-user="robatronbobby">See the Pen <a href="https://codepen.io/robatronbobby/pen/ExpVwrZ"><br>
Example Stroked Text -webkit-text-stroke</a> by Rob O’Leary (<a href="https://codepen.io/robatronbobby">@robatronbobby</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<p>It can be difficult to get an attractive result with CSS for stroked text that has a fill (i.e., that has a value other than “transparent” for <code>color</code>). This is because the stroke sits above the fill and lies inside the text. It is similar to the center stroke alignment that we mentioned earlier. So, wider strokes “swallow up”, or cover, more of the letter’s fill area. This can lead to the text appearing misshapen and blurry.</p>
<p>Here are some examples where we increase the <code>-webkit-text-stroke-width</code> on large text (<code>font-size: 40px</code>):</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165623" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/increasing-stroke-width-css-stroked-text/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/increasing-stroke-width-css-stroked-text.png" data-orig-size="720,356" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Increasing stroke width CSS stroked text" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/increasing-stroke-width-css-stroked-text.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/increasing-stroke-width-css-stroked-text.png?w=720" class="aligncenter wp-image-165623 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/increasing-stroke-width-css-stroked-text.png" alt="Increasing Stroke Width CSS Stroked Text" width="720" height="356" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/increasing-stroke-width-css-stroked-text.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/03/increasing-stroke-width-css-stroked-text.png?resize=300,148 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>When <code>-webkit-text-stroke-width</code> has a value of 4px, the text appears blurry. It’s like it’s had four whiskeys! Here is a <a href="https://codepen.io/robatronbobby/pen/QWBjOod">CodePen of the example</a>.</p>
<p>We can mitigate the blurry appearance with the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/paint-order"><code>paint-order</code></a> property, which lets us control the order in which the fill and stroke of text content are drawn. This means that we can place the stroke underneath the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/fill"><code>fill</code></a>, so that it does not consume space in the fill area.</p>
<p>This property is borrowed from SVG-land, so references to <code>fill</code> are equivalent to <code>color</code> in HTML-land. The default paint order is: <code>fill</code>, <code>stroke</code>, <code>markers</code>. We can reverse the paint order to put the stroke below the fill using the following CSS:</p>
<pre class="language-css hljs">h2 {
  paint-order: stroke fill;
}
</pre>
<p>The result looks much better in Firefox (Linux):</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165625" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/stroke-width-css-stroke-behind-fill-css/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-width-css-stroke-behind-fill-css.png" data-orig-size="720,356" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Stroke width CSS stroke behind fill CSS" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-width-css-stroke-behind-fill-css.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-width-css-stroke-behind-fill-css.png?w=720" class="aligncenter wp-image-165625 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-width-css-stroke-behind-fill-css.png" alt="Stroke Width CSS Stroke Behind Fill CSS" width="720" height="356" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-width-css-stroke-behind-fill-css.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-width-css-stroke-behind-fill-css.png?resize=300,148 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>In Chrome (Linux), it appears that the <code>paint-order</code> property is ignored:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165627" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/stroke-text-css-chrome-ignores-paint-order-property/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-text-css-chrome-ignores-paint-order-property.png" data-orig-size="720,356" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Stroked text CSS Chrome ignores paint-order property" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-text-css-chrome-ignores-paint-order-property.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-text-css-chrome-ignores-paint-order-property.png?w=720" class="aligncenter wp-image-165627 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-text-css-chrome-ignores-paint-order-property.png" alt="Stroked Text CSS Chrome Ignores Paint-Order Property" width="720" height="356" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-text-css-chrome-ignores-paint-order-property.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-text-css-chrome-ignores-paint-order-property.png?resize=300,148 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>In Chrome, when <code>-webkit-text-stroke-width</code> has a value of 4px, the text looks almost completely covered by the stroke. Here’s a <a href="https://codepen.io/robatronbobby/pen/xxJwPvQ">CodePen of the example</a> if you want to review it yourself.</p>
<p>The <code>-webkit-text-stroke</code> property is <a href="https://caniuse.com/?search=-webkit-text-stroke">currently supported by approximately 98% of modern browsers</a>. However, since it is a non-standard property, there’s always a chance that it could be removed from a browser in the future. If you want to create a fallback to hedge against the possibility of the property being unsupported, you can use <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@supports"><code>@supports</code></a> to have the text filled instead:</p>
<pre class="language-css hljs">@supports (-webkit-text-fill-color: white) {
  h1{ {
       color: white;
  }
}
</pre>
<h4 id="webkit-text-pros">Pros</h4>
<ol>
<li>Simple to use</li>
<li>May be used as a single property</li>
<li><a href="https://caniuse.com/?search=-webkit-text-stroke">Very well supported in modern browsers</a></li>
</ol>
<h4 id="webkit-text-cons">Cons</h4>
<ol>
<li>It’s difficult to get a pleasing outcome when you have a fill and a stroke together. This method requires consistent implementation of the <code>paint-order</code> property to be a more viable option</li>
<li>It is a non-standard property, so it could potentially be yanked and replaced in the future. Also, there may be some inconsistencies between browsers</li>
</ol>
<h3 id="shadow-hack">The shadow hack</h3>
<p>We can use the <a href="https://css-tricks.com/almanac/properties/t/text-shadow/"><code>text-shadow</code></a> property to simulate a stroke. Unfortunately, <code>text-shadow</code> does not have a value like <code>box-shadow</code>, which can create an expanded shadow to greatly simplify execution.</p>
<p>Instead, we can create multiple shadows offset on different sides of the text that overlap to form an outline. With this approach, we can’t use a transparent fill because shadows sit underneath and the shadow will cover the fill area too!</p>
<p>To demonstrate this technique, let’s give our text a blue fill and create a white “stroke” using the <code>text-shadow</code> property. We’ll use four shadows, each with <code>1px</code> offset to place them at the <code>top</code>, <code>left</code>, <code>bottom,</code> and <code>right</code> of the text:</p>
<pre class="language-css hljs">h1{
  color:blue;
  text-shadow: 
    1px 0 0 white, /*right */
    0 1px 0 white, /*top */
    -1px 0 0 white, /*left */
    0 -1px 0 white; /*bottom */
}
</pre>
<p>As you can see, the result looks fine:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165629" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/stroked-text-shadow-hack-example/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-shadow-hack-example.png" data-orig-size="512,291" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Stroked text shadow hack example" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-shadow-hack-example.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-shadow-hack-example.png?w=512" class="aligncenter wp-image-165629 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-shadow-hack-example.png" alt="Stroked Text Shadow Hack Example" width="512" height="291" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-shadow-hack-example.png 512w, https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-shadow-hack-example.png?resize=300,171 300w" sizes="(max-width: 512px) 100vw, 512px" /></p>
<p>See the <a href="https://codepen.io/robatronbobby/pen/ZEjbgGv">CodePen example</a>.</p>
<p>However, if we increase the offset values to 3px, there are noticeable gaps, or spaces, in the corner areas:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165631" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/stroked-text-shadow-hack-gaps-spaces/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-shadow-hack-gaps-spaces.png" data-orig-size="512,291" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Stroked text shadow hack gaps spaces" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-shadow-hack-gaps-spaces.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-shadow-hack-gaps-spaces.png?w=512" class="aligncenter wp-image-165631 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-shadow-hack-gaps-spaces.png" alt="Stroked Text Shadow Hack Gaps Spaces" width="512" height="291" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-shadow-hack-gaps-spaces.png 512w, https://blog.logrocket.com/wp-content/uploads/2023/03/stroked-text-shadow-hack-gaps-spaces.png?resize=300,171 300w" sizes="(max-width: 512px) 100vw, 512px" /></p>
<p>See the <a href="https://codepen.io/robatronbobby/pen/MWBaQda">CodePen example</a>.</p>
<p>We can fix this by adding more shadows to smooth it out, but doing this by hand is cumbersome and prone to errors. It’s probably best to create a SASS mixin to do the required math to provide a manageable implementation. But should we go that far?</p>
<p>Using <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/drop-shadow"><code>filter: drop-shadow</code></a> instead does not offer anything extra. In fact, it’s probably a more expensive action as filters are computationally more taxing.</p>
<p>In summary, this method is messy. I would avoid it.</p>
<h4 id="shadow-hack-pros">Pros</h4>
<ol>
<li>Works quite well with sans-serif fonts</li>
</ol>
<h4 id="shadow-hack-cons">Cons</h4>
<ol>
<li>Does not work well with text that has more edges or curves; more shadows would need to be added to provide a smoother appearance</li>
<li>Cannot be used with a transparent fill</li>
<li>Corners may take on a slightly different shape since this approach involves using multiple offset versions of the text</li>
</ol>
<h3 id="pseudo-element-hack">Pseudo-element hack</h3>
<p>We can simulate a stroke with outside alignment using a CSS pseudo-element. Basically, we create a surrogate element to serve as the stroke. Then, we position it below the text and apply the <code>-webkit-text-stroke</code> property.</p>
<p>The “gotcha” with this approach is that we need to duplicate the text content using a <a href="http://www.w3.org/html/wg/drafts/html/master/#custom"><code>data-*</code> custom attribute</a> to make it available to the pseudo-element. For example, here we use the custom <code>data-text</code> attribute:</p>
<pre class="language-html hljs">&lt;h1 data-text="HI"&gt;HI&lt;/h1&gt;
</pre>
<p>In the CSS code, we position the <code>::after</code> pseudo-element absolutely, and give it a lower <code>z-index</code> so that it will sit underneath the <code>h1</code> text:</p>
<pre class="language-css hljs">h1:after {
  content: attr(data-text);

  position: absolute;
  left: 0;
  z-index: -1;

  /* visible stroke is 10px because of alignment */
  -webkit-text-stroke: 20px white;

  /* is sized relative to h1 */
  font-size: 1em;
}
</pre>
<p>If we use <code>-webkit-text-stroke: 20px white;</code> on the pseudo-element to create the stroke, the stroke will actually appear to have a width of 10px. The stroke is aligned centrally, so 10px is the portion that overflows and is visible. If we change the value to 1px, no stroke is visible, as shown below:</p>
<p class="codepen" style="height: 399.046875px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="399.046875" data-default-tab="result" data-slug-hash="poZjmWB" data-user="robatronbobby">See the Pen <a href="https://codepen.io/robatronbobby/pen/poZjmWB"><br>
Stroked Text Example SVG</a> by Rob O’Leary (<a href="https://codepen.io/robatronbobby">@robatronbobby</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<p>Alternatively, we could do some math to position and size the pseudo-element to overflow equally and simulate a stroke, but this is more involved. Personally, I prefer to steer clear of adding calculations of this type in CSS!</p>
<h4 id="pseudo-element-pros">Pros</h4>
<ol>
<li>Does a decent job of creating a stroke</li>
<li>The stroke scales when the element’s <code>font-size</code> (the <code>h1</code> in our example) changes</li>
</ol>
<h4 id="pseudo-element-cons">Cons</h4>
<ol>
<li>Text content must be duplicated in a custom attribute</li>
<li>Actual stroke width is actually half the value of the <code>-webkit-text-stroke-width</code>; this is not intuitive</li>
<li>Has the same drawbacks as <code>-webkit-text-stroke-width</code> if you use it to create the stroke. To avoid this property, we’d need to get busy with some math!</li>
</ol>
<h2 id="stroked-text-svgs">Stroked text in SVGs</h2>
<p>SVGs have three specific attributes for stroke and fill that can be applied to the <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/text"><code>text</code></a> element:</p>
<ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke"><code>stroke</code></a>: stroke color</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-width"><code>stroke-width</code></a>: stroke width</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill"><code>fill</code></a>: fill color</li>
</ol>
<p>IMDb uses an SVG for the “2022” text in the <a href="https://www.imdb.com/best-of/top-tv-series-2022">“Top Series of 2022”</a> title. We can see this in DevTools below:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165633" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/devtools-examine-imdb-stroked-text-svg-approach/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/devtools-examine-imdb-stroked-text-svg-approach.png" data-orig-size="720,635" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="DevTools examine IMDb stroked text SVG approach" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/devtools-examine-imdb-stroked-text-svg-approach.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/devtools-examine-imdb-stroked-text-svg-approach.png?w=720" class="aligncenter wp-image-165633 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/devtools-examine-imdb-stroked-text-svg-approach.png" alt="DevTools Examine IMDb Stroked Text SVG Approach" width="720" height="635" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/devtools-examine-imdb-stroked-text-svg-approach.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/03/devtools-examine-imdb-stroked-text-svg-approach.png?resize=300,265 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>I was expecting IMDb to use a <code>text</code> element like this:</p>
<pre class="language-html hljs">&lt;svg width="308" height="104" viewBox="0 0 308 104" xmlns="http://www.w3.org/2000/svg"&gt;
  &lt;text x="0" y="90" fill="none" stroke="white" stroke-width="3" font-family="Noto Sans" font-size="100px" font-weight="800"&gt;2022&lt;/text&gt;
&lt;/svg&gt;
</pre>
<p>But, instead, the “2022” test was converted to a <code>path</code>. Maybe, this was done to save loading an extra font in the page.</p>
<p>There is an issue with IMDb’s implementation — it’s not accessible. The text “2022” does not exist for screen readers and assistive technologies. At a minimum, IMDb should have added an <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label"><code>aria-label</code></a> attribute on the SVG to give it an accessible label:</p>
<pre class="language-html hljs">&lt;svg width="308" height="104" viewBox="0 0 308 104" fill="none" aria-label="2022" xmlns="http://www.w3.org/2000/svg"&gt;
    &lt;!-- long-winded path goes here --&gt;
&lt;/svg&gt;
</pre>
<p>In fact, the HTML here is not well written — there’s no heading for the hero section, or the document as a whole (i.e., there’s no <code>h1</code>).</p>
<p>SVGs have more attributes available to style the stroke. For example, if we look at the “Stroke style” panel from the <a href="https://inkscape.org/">Inkscape</a> vector graphics editor below, we can get an idea of what else we may want to do with the styling of a stroke.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165635" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/stroke-style-panel-inkscape-vector-graphics-editor/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-style-panel-inkscape-vector-graphics-editor.png" data-orig-size="419,365" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Stroke style panel Inkspace vector graphics editor" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-style-panel-inkscape-vector-graphics-editor.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-style-panel-inkscape-vector-graphics-editor.png?w=419" class="aligncenter wp-image-165635 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-style-panel-inkscape-vector-graphics-editor.png" alt="Stroke Style Panel Inkspace Vector Graphics Editor" width="419" height="365" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-style-panel-inkscape-vector-graphics-editor.png 419w, https://blog.logrocket.com/wp-content/uploads/2023/03/stroke-style-panel-inkscape-vector-graphics-editor.png?resize=300,261 300w" sizes="(max-width: 419px) 100vw, 419px" /></p>
<p>These fields correlate to SVG attributes such as:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray"><code>stroke-dasharray</code></a>: Dash</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linejoin"><code>stroke-linejoin</code></a>: Join</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap"><code>stroke-linecap</code></a>: Cap</li>
</ul>
<p>I don’t know if it’s really necessary to use <code>stroke-linejoin</code> and <code>stroke-linecap</code> for text, but we can create dashed stroked text with <code>stroke-dasharray</code>!</p>
<p>There’s a working draft, <a href="https://www.w3.org/TR/fill-stroke-3/">W3C specification CSS Fill and Stroke Module Level 3</a>, for adding stroke properties to CSS such as <code>stroke-color</code>, <code>stroke-width</code>, and <code>stroke-align</code>. It looks like it is more oriented to SVGs, but I guess the properties could also be applied to text in HTML. The spec doesn’t appear to have moved forward too much since 2017. Tobi Reif made a <a href="https://github.com/w3c/fxtf-drafts/issues/117">specification request to the W3C</a> for an “outside stroke” property, and that hasn’t advanced either!</p>
<h2 id="stroked-text-variable-fonts">Stroked text with variable fonts</h2>
<p>You may be wondering – what about the font itself? Can variable fonts create stroked text? Well, some fonts do offer a stroked variant. For example, the <a href="https://www.fontspace.com/star-jedi-font-f9641">Star Jedi Font</a> has a hollow variant that is stroked text with a transparent fill:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165637" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/star-jedi-font-hollow-variant-stroked-text-transparent-fill/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/star-jedi-font-hollow-variant-stroked-text-transparent-fill.png" data-orig-size="720,202" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Star Jedi font hollow variant stroked text transparent fill" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/star-jedi-font-hollow-variant-stroked-text-transparent-fill.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/star-jedi-font-hollow-variant-stroked-text-transparent-fill.png?w=720" class="aligncenter wp-image-165637 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/star-jedi-font-hollow-variant-stroked-text-transparent-fill.png" alt="Star Jedi Font Hollow Variant Stroked Text Transparent Fill" width="720" height="202" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/star-jedi-font-hollow-variant-stroked-text-transparent-fill.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/03/star-jedi-font-hollow-variant-stroked-text-transparent-fill.png?resize=300,84 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>However, stroked variants of fonts aren’t very common.</p>
<p>With a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide">variable font,</a> we can create many different styles of a font through a single font file. The heart of the variable font format is the concept of an axis of variation, describing the allowable range of that particular aspect of the typeface design.</p>
<p>The axes we’d expect are a “weight axis” (describing how light or how bold the letterforms can be) and an “italic axis” (describing if italic letterforms are present and can be turned on or off accordingly). Font designers can create an endless variety of custom axes if they’d like. So, in theory, they could create axes or features related to stroke.</p>
<p>The only variable font that I found that has something related to stroke is the <a href="https://home.dootype.com/dt-jakob-variable-concept">dT Jakob Variable Concept</a> by <a href="https://home.dootype.com">dooType</a>. The website’s download link is broken, but fortunately, I could access it on the <a href="https://www.axis-praxis.org/specimens/dtjakob">Axis-Praxis font playground</a>.</p>
<p>The font’s features can create inline, shape (<code>ss02</code>), and shadow versions (<code>ss03</code>) of the text:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165639" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/dk-jakob-variable-concept-stroked-text/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/dk-jakob-variable-concept-stroked-text.png" data-orig-size="720,260" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="dk Jakob variable concept stroked text" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/dk-jakob-variable-concept-stroked-text.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/dk-jakob-variable-concept-stroked-text.png?w=720" class="aligncenter wp-image-165639 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/dk-jakob-variable-concept-stroked-text.png" alt="dk Jakob Variable Concept Stroked Text" width="720" height="260" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/dk-jakob-variable-concept-stroked-text.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/03/dk-jakob-variable-concept-stroked-text.png?resize=300,108 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>If we turn off the contextual alternatives (<code>calt</code>) and ligatures (<code>liga</code>) features in CSS, we’ll get text similar to the following:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165641" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/dk-jakob-stroked-text-css-features-off/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/dk-jakob-stroked-text-css-features-off.png" data-orig-size="675,245" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="dk Jakob stroked text CSS features off" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/dk-jakob-stroked-text-css-features-off.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/dk-jakob-stroked-text-css-features-off.png?w=675" class="aligncenter wp-image-165641 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/dk-jakob-stroked-text-css-features-off.png" alt="dk Jakob Stroked Text CSS Features Off" width="675" height="245" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/dk-jakob-stroked-text-css-features-off.png 675w, https://blog.logrocket.com/wp-content/uploads/2023/03/dk-jakob-stroked-text-css-features-off.png?resize=300,109 300w" sizes="(max-width: 675px) 100vw, 675px" /></p>
<pre class="language-css hljs">font-size: 180px;
font-family: "dT Jakob Variable Concept Regular";
font-variation-settings: "wght" 40;
font-feature-settings: "calt" 0, "liga" 0;
color: purple;
</pre>
<p>The inner part is transparent and cannot be given a color. You can see in this short video, how varying the font’s weight affects the text:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165643" data-permalink="https://blog.logrocket.com/create-beautiful-stroked-text-css/attachment/dt-jakob-variable-stroked-vary-weight_adobeexpress/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/dt-jakob-variable-stroked-vary-weight_AdobeExpress.gif" data-orig-size="688,218" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="dk Jakob variable stroked text vary weight" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/dt-jakob-variable-stroked-vary-weight_AdobeExpress.gif?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/dt-jakob-variable-stroked-vary-weight_AdobeExpress.gif?w=688" class="aligncenter wp-image-165643 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/dt-jakob-variable-stroked-vary-weight_AdobeExpress.gif" alt="DK Jakob Variable Stroked Text Vary Weight" width="688" height="218"></p>
<p>dooType calls this a “layer font”. We can overlay an inline version on top of a shape version to create stroked text. This allows us to change the color of the stroke and fill.</p>
<p>This is easier to accomplish with a vector graphics tool such as <a href="https://www.adobe.com/products/illustrator.html">Adobe Illustrator</a>. I guess when this is done in CSS, the text will line up well, but we’d probably need to tweak the font weight and size of each layer to get our desired result! Having two copies of text content is always a bit clunky.</p>
<p>So, in theory, variable fonts can achieve stroked text too. And, in fact, the example font I selected has this capability! However, this is a niche functionality, and may not offer the amount of control we’d like over different aspects of styling, such as alignment.</p>
<h2 id="creating-stroked-text-css-vs-svgs">Creating stroked text with CSS vs. SVGs</h2>
<p>To create stroked text, I would favor SVGs over the CSS <code>-webkit-text-stroke</code> property. The SVG approach is a standard that is consistently implemented across browsers. Hacks are simply harder to understand and maintain; you may understand them well, but your colleague may not!</p>
<p>You could probably get away with the <code>-webkit-text-stroke</code> approach for some use cases, such as letters with a transparent fill. I just wouldn’t have confidence that the resulting text would have a consistent appearance in all browsers across all operating systems. Do you want to test it across browsers to verify it? Or just go for it?</p>
<p>If you want a wider stroke, it will look bad quickly with inside or center stroke alignment. As mentioned earlier, the <code>paint-order</code> property doesn’t work as expected on Chrome (Linux), so I would not rely on it to create a stroke with an outside alignment. In that case, you could implement the pseudo-element hack, with some caveats such as using the <code>-webkit-text-stroke</code> property.</p>
<p>Also, you may want to have more control over the stroke to get your desired result. SVGs offer more control through stroke-related attributes compared to CSS.</p>
<p>Additionally, you can create dashed stroked text with <code>stroke-dasharray</code>! This is not possible through any CSS property.</p>
<p>I don’t want to portray SVGs as an ideal alternative though — this approach is a compromise. You may find the SVG approach a bit finicky to get the text the way you want it to appear. To get the outcome you want, you’ll need to create a document with dimensions and values for text attributes. But, there’s a high probability that your end result will look the same across browsers.</p>
<p>Here’s an example implemented using the SVG approach, by applying attributes for stroke and fill to the <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/text"><code>text</code></a> element:</p>
<p class="codepen" style="height: 399.046875px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="399.046875" data-default-tab="result" data-slug-hash="poZjmWB" data-user="robatronbobby">See the Pen <a href="https://codepen.io/robatronbobby/pen/poZjmWB"><br>
Stroked Text Example SVG</a> by Rob O’Leary (<a href="https://codepen.io/robatronbobby">@robatronbobby</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<h2 id="closing-thoughts">Closing thoughts</h2>
<p>It’s possible to create beautiful outlined (or stroked) text in CSS, but you may find the methods a bit unreliable and unwieldy for achieving your desired results sometimes. Using a non-standard property, or a hack, is not a great way to go.</p>
<p>Fortunately, transparent stroked text does appear to render reliably across browsers. Applying the CSS methods in other ways requires some care to look consistent across browsers!</p>
<p>I hope we can get a W3C-approved CSS <code>stroke</code> property soon. There is a dormant <a href="https://www.w3.org/TR/fill-stroke-3/">W3C specification CSS Fill and Stroke Module Level 3</a> to add stroke properties to CSS that could be dusted down!</p>
<p>Variable fonts offer the possibility of providing some stroke-like behavior. However, as a font designer is required to create this as an additional feature, I don’t see this becoming a typical offering.</p>
<p>For now, I would generally recommend using SVGs to create stroked text. When you use this approach, favor using the <code>text</code> element to ensure that the stroked text is accessible and can be copied and pasted in the same manner as the rest of your text.</p>
<p>Thanks for reading!</p>
</html>
<p>The post <a href="https://blog.logrocket.com/create-beautiful-stroked-text-css/">Can you create beautiful stroked text in CSS?</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.logrocket.com/create-beautiful-stroked-text-css/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">165587</post-id>	</item>
		<item>
		<title>How to create parallax scrolling with CSS</title>
		<link>https://blog.logrocket.com/create-parallax-scrolling-css/</link>
					<comments>https://blog.logrocket.com/create-parallax-scrolling-css/#comments</comments>
		
		<dc:creator><![CDATA[Rob O'Leary]]></dc:creator>
		<pubDate>Fri, 17 Mar 2023 13:00:28 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[css]]></category>
		<guid isPermaLink="false">https://blog.logrocket.com/?p=140996</guid>

					<description><![CDATA[<p>This article demystifies the parallax scrolling technique. Get insights on how to implement parallax scrolling with CSS without compromising UX.</p>
<p>The post <a href="https://blog.logrocket.com/create-parallax-scrolling-css/">How to create parallax scrolling with CSS</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[<!DOCTYPE html>
<html><p><em><strong>Editor’s note</strong>: This article was last updated on 17 March 2023 to include additional information about best practices for implementing a parallax scroll.&nbsp;</em></p>
<img loading="lazy" decoding="async" width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2022/11/create-parallax-scrolling-css-nocdn.png" class="attachment-full size-full wp-post-image" alt="CSS Logo Over Swirly Background" srcset="https://blog.logrocket.com/wp-content/uploads/2022/11/create-parallax-scrolling-css-nocdn.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/11/create-parallax-scrolling-css-nocdn.png?resize=300,200 300w" sizes="(max-width: 730px) 100vw, 730px" data-attachment-id="140998" data-permalink="https://blog.logrocket.com/create-parallax-scrolling-css/attachment/create-parallax-scrolling-css-nocdn/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/11/create-parallax-scrolling-css-nocdn.png" data-orig-size="730,487" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Create parallax scrolling with CSS" data-image-description data-image-caption data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/11/create-parallax-scrolling-css-nocdn.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/11/create-parallax-scrolling-css-nocdn.png?w=730"><p>Parallax scrolling can improve a website’s browsing experience by making it more dynamic and immersive. In the simplest of terms, parallax scrolling is a three-dimensional effect for adding more depth to a webpage. However, there is some nuance to this that we’ll clarify later.</p>
<p>In this article, we’ll discuss why you should consider using parallax scrolling, demonstrate how to implement it with CSS, and explore the benefits of using CSS instead of JavaScript. We’ll review several CSS parallax examples, use cases, and best practices.</p>
<p>A famous and well-executed example of parallax scrolling is the <a href="http://www.firewatchgame.com/">Firewatch computer game website</a>. The hero section contains a rural scene of a hiker peering across a valley to a hill station. As the user scrolls down, the parallax effect makes the scene fall away to reveal the content below:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="164852" data-permalink="https://blog.logrocket.com/1-parallax-scrolling-css-gif-example/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/1-parallax-scrolling-css-gif-example.gif" data-orig-size="730,341" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="parallax-scrolling-css-gif-example" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/1-parallax-scrolling-css-gif-example.gif?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/1-parallax-scrolling-css-gif-example.gif?w=730" class="aligncenter wp-image-164852 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/1-parallax-scrolling-css-gif-example.gif" alt="Parallax Scrolling CSS Gif Example" width="730" height="341"></p>
<p>Looks like magic, right? Let’s go backstage and see how the magic happens!</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#parallax-scrolling">What is parallax scrolling?</a></li>
<li><a href="#why-use-parallax-scrolling-effect">Why use a parallax scrolling effect?</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#improved-user-engagement">Improved user engagement</a></li>
<li><a href="#serves-storytelling-guide">Serves as a storytelling guide</a></li>
</ul>
</li>
<li><a href="#implement-parallax-effect-css">How to implement the parallax effect in CSS</a></li>
<li><a href="#fixing-position-background">Fixing the position of the background</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#laying-out-design">Laying out the design</a></li>
<li><a href="#scaling-design">Scaling the design</a></li>
<li><a href="#handling-mobile-browser-compatibility-issues">Handling mobile browser compatibility issues</a></li>
<li><a href="#pros-cons-fixing-background-position">Pros and cons of fixing the background position</a></li>
</ul>
</li>
<li><a href="#using-3d-translations">Using 3D translations</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#parallax-scrolling-demo">Parallax scrolling demo</a></li>
<li><a href="#good-examples-3d-translations">Good examples of using 3D translations</a></li>
<li><a href="#pros-cons-3d-translations">Pros and cons of using 3D translations</a></li>
</ul>
</li>
<li><a href="#where-use-parallax-scrolling">Where can you use parallax scrolling?</a></li>
<li><a href="#best-practices-parallax-scrolling">Best practices for parallax scrolling</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#use-parallax-scrolling-right-places">Use parallax scrolling in the right places</a></li>
<li><a href="#natural-scrolling">Don’t impede natural scrolling</a></li>
<li><a href="#Responsive design">Responsive design</a></li>
<li><a href="#performance">Performance</a></li>
<li><a href="#accessibility">Accessibility</a></li>
</ul>
</li>
<li><a href="#css-instead-javascript">Why use CSS instead of JavaScript?</a></li>
</ul>
<h2 id="parallax-scrolling">What is parallax scrolling?</h2>
<p>Parallax scrolling is a computer graphics technique in which background images move past the camera more slowly than the foreground images, creating an illusion of depth in a 2D scene. The technique grew out of the <a href="https://en.wikipedia.org/wiki/Multiplane_camera">multiplane camera</a> technique used in <a href="https://en.wikipedia.org/wiki/Traditional_animation">traditional animation</a> in the 1930s:</p>
<div style="width: 730px;" class="wp-video"><video class="wp-video-shortcode" id="video-140996-2" width="730" height="576" preload="metadata" controls="controls"><source type="video/webm" src="https://blog.logrocket.com/wp-content/uploads/2022/11/multiplane-demo.webm?_=2" /><a href="https://blog.logrocket.com/wp-content/uploads/2022/11/multiplane-demo.webm">https://blog.logrocket.com/wp-content/uploads/2022/11/multiplane-demo.webm</a></video></div>
<p><em>Example of 2.5D scrolling that simulates the appearance of a 3D scene.</em> <a href="https://en.wikipedia.org/wiki/File:MultiplaneDemo.webm"><em>Produced by Wikipedia user Janke</em></a><em>. Public domain, via Wikipedia.</em></p>
<p>The example above is often referred to as 2.5D, two-and-a-half dimensional, or pseudo-3D perspective because it simulates the appearance of a three-dimensional scene.</p>
<p>Parallax scrolling was popularized in <a href="https://en.wikipedia.org/wiki/2D_computer_graphics">2D computer graphics</a> and was included in video games starting in the early 1980s. Many people credit the arcade game <a href="https://en.wikipedia.org/wiki/Moon_Patrol">Moon Patrol</a> as being the first use of the effect in side-scrolling games. Parallax scrolling made its way into many popular platform games throughout the 80s and 90s, like Sonic the Hedgehog.</p>
<p>The game <a href="https://en.wikipedia.org/wiki/The_Whispered_World">The Whispered World</a> implemented the parallax effect through the composition of layers. Below is an isometric view of the game’s layers, with each distinguished by a colored frame:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="164854" data-permalink="https://blog.logrocket.com/2-whispered-world-parallax-scrollisometric-layers/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/2-whispered-world-parallax-scrollisometric-layers.jpeg" data-orig-size="730,342" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="whispered-world-parallax-scroll-isometric-layers" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/2-whispered-world-parallax-scrollisometric-layers.jpeg?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/2-whispered-world-parallax-scrollisometric-layers.jpeg?w=730" class="aligncenter wp-image-164854 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/2-whispered-world-parallax-scrollisometric-layers.jpeg" alt="Whispered World Parallax Scroll Isometric Layers" width="730" height="342" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/2-whispered-world-parallax-scrollisometric-layers.jpeg 730w, https://blog.logrocket.com/wp-content/uploads/2023/03/2-whispered-world-parallax-scrollisometric-layers.jpeg?resize=300,141 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p><em>A side view of the layers used for parallax scrolling in</em> <a href="https://en.wikipedia.org/wiki/The_Whispered_World"><em>The Whispered World</em></a><em>.</em> <a href="https://en.wikipedia.org/wiki/Parallax_scrolling#/media/File:The_Whispered_World_parallax_scrolling_sample_1.jpg"><em>Claas Paletta, PR &amp; New Business Manager of Daedalic Entertainment GmbH (rights owner)</em></a><em>. Free use, via Wikimedia Commons.</em></p>
<p>When viewed from the front, the layers form a complete scene:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="164856" data-permalink="https://blog.logrocket.com/3-whispered-world-layers-parallax-view/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/3-whispered-world-layers-parallax-view.jpeg" data-orig-size="730,342" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="whispered-world-layers-parallax-view" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/3-whispered-world-layers-parallax-view.jpeg?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/3-whispered-world-layers-parallax-view.jpeg?w=730" class="aligncenter wp-image-164856 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/3-whispered-world-layers-parallax-view.jpeg" alt="Whispered World Layers Parallax View" width="730" height="342" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/3-whispered-world-layers-parallax-view.jpeg 730w, https://blog.logrocket.com/wp-content/uploads/2023/03/3-whispered-world-layers-parallax-view.jpeg?resize=300,141 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p><em>A front view of the layers used for parallax scrolling in</em> <a href="https://en.wikipedia.org/wiki/The_Whispered_World"><em>The Whispered World</em></a><em>.</em><a href="https://en.wikipedia.org/wiki/Parallax_scrolling#/media/File:The_Whispered_World_parallax_scrolling_sample_1.jpg"> <em>Claas Paletta, PR &amp; New Business Manager of Daedalic Entertainment GmbH (rights owner)</em></a><em>. Free use, via Wikimedia Commons.</em></p>
<p>This technique was incorporated into web design, but it did not become popular until the 2011 introduction of <a href="https://en.wikipedia.org/wiki/HTML5">HTML5</a>and <a href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets#CSS_3">CSS 3</a>. As CSS has matured, it has become easier to pull off the parallax scroll effect without JavaScript and hacks.</p>
<p>One unfortunate outcome is that many treat the parallax effect as a blanket term; it has become synonymous with “gratuitous scrolling effects”. But, the parallax effect does not actually require any animation or scroll-triggered events; it is based purely on elements moving at different speeds to give a perception of depth.</p>
<p>In web design, this is achieved by grouping elements into layers and controlling how fast each layer moves. The elements are laid out vertically in a typical webpage, and the movement effect is a result of the user scrolling through the page.</p>
<h2 id="why-use-parallax-scrolling-effect">Why use a parallax scrolling effect?</h2>
<p>Before adding a parallax scroll to your website, it’s important to consider why you’d want to use one. Let’s discuss a few reasons.</p>
<h3 id="improved-user-engagement">Improved user engagement</h3>
<p>Parallax graphics can hold a user’s attention and improve engagement, thereby reducing the bounce rates of users that exit after visiting just one page on your website.</p>
<h3 id="serves-storytelling-guide">Serves as a storytelling aid</h3>
<p>Good design speaks to the user, and parallax graphics can help take users on an immersive journey. You can use parallax scrolling to produce a one-page website where visitors can read an entire story about your product or brand without navigating to multiple pages. For a great example, check out <a href="https://matterday.netlify.com/">Matterday made by Netlify</a>; this site tells a compelling story about how Netlify can save time and offers suggestions for how that extra time could be used.</p>
<h2 id="implement-parallax-effect-css">How to implement the parallax effect in CSS</h2>
<p>Broadly speaking, there are two methods for implementing a parallax effect with CSS. Let’s explore and compare both fixing the background position and using 3D translations.</p>
<h2 id="fixing-position-background">Fixing the position of the background</h2>
<p>Fixing the position of the background was the earliest method for creating a parallax effect with CSS. You can think of it as a 2.5D parallax implementation.</p>
<p>The secret to this method is to use a background image for a section and fix its position, typically with <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment"><code>background-attachment:fixed</code></a>. When the user scrolls through a particular section, the background does not scroll by, but the other elements do. However, once the user scrolls beyond that section, there is a different background. By having these elements move at different speeds, we can create a parallax effect.</p>
<p>One thing to keep in mind with this method is that <a href="https://caniuse.com/background-attachmenthttps://caniuse.com/background-attachment">mobile browser support for <code>background-attachment:fixed</code></a> still appears to be problematic at the time of writing. We’ll discuss workarounds for this later in this article.</p>
<p>To get a better understanding of how this method works, let’s explore a specific example. Below is a full-page example showcasing the activities available at Cerro Torre mountain in Argentina:</p>
<div style="width: 410px;" class="wp-video"><video class="wp-video-shortcode" id="video-140996-3" width="410" height="590" preload="metadata" controls="controls"><source type="video/mp4" src="https://blog.logrocket.com/wp-content/uploads/2022/11/cerro-torre-example.mp4?_=3" /><a href="https://blog.logrocket.com/wp-content/uploads/2022/11/cerro-torre-example.mp4">https://blog.logrocket.com/wp-content/uploads/2022/11/cerro-torre-example.mp4</a></video></div>
<h3 id="laying-out-design">Laying out the design</h3>
<p>When it comes to parallax examples, many developers seem to favor those with mountain scenes. I think this is because it looks pretty cool when you see something rise above a mountain, but don’t let this idea limit your application of the technique.</p>
<p>Below is an overview of the webpage’s design. We create a kind of banded design in which we interweave a parallax section with a non-parallax section; I call this a “buffer” section:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="164858" data-permalink="https://blog.logrocket.com/4-webpage-design-sections-parallax-scroll/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/4-webpage-design-sections-parallax-scroll.png" data-orig-size="730,1474" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="webpage-design-sections-parallax-scroll" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/4-webpage-design-sections-parallax-scroll.png?w=149" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/4-webpage-design-sections-parallax-scroll.png?w=507" class="aligncenter wp-image-164858 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/4-webpage-design-sections-parallax-scroll.png" alt="Webpage Design Sections Parallax Scroll" width="730" height="1474" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/4-webpage-design-sections-parallax-scroll.png 730w, https://blog.logrocket.com/wp-content/uploads/2023/03/4-webpage-design-sections-parallax-scroll.png?resize=149,300 149w, https://blog.logrocket.com/wp-content/uploads/2023/03/4-webpage-design-sections-parallax-scroll.png?resize=507,1024 507w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>&nbsp;</p>
<p>The “buffer” section is not required for the parallax effect to work, however, it can serve as a margin between parallax sections. It can also provide more control for the starting point of the background in the proceeding parallax section.</p>
<p>For example, on a 1920px screen, if we scroll down most of the first parallax section, we see the middle of the mountainous background in the second parallax section:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="164877" data-permalink="https://blog.logrocket.com/5-first-parallax-section-depitct-mountainous-background/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/5-first-parallax-section-depitct-mountainous-background.png" data-orig-size="730,411" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="first-parallax-section-depitct-mountainous-background" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/5-first-parallax-section-depitct-mountainous-background.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/5-first-parallax-section-depitct-mountainous-background.png?w=730" class="aligncenter wp-image-164877 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/5-first-parallax-section-depitct-mountainous-background.png" alt="First Parallax Section Mountainous Background" width="730" height="411" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/5-first-parallax-section-depitct-mountainous-background.png 730w, https://blog.logrocket.com/wp-content/uploads/2023/03/5-first-parallax-section-depitct-mountainous-background.png?resize=300,169 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>Without the first “buffer” section, we’ll see the image below at the same position on the page. You’ll notice that the initial view of the mountainous background of the second parallax section is higher:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="164870" data-permalink="https://blog.logrocket.com/6-mountainous-background-second-parallax-section/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/6-mountainous-background-second-parallax-section.png" data-orig-size="730,411" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="mountainous-background-second-parallax-section" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/6-mountainous-background-second-parallax-section.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/6-mountainous-background-second-parallax-section.png?w=730" class="aligncenter wp-image-164870 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/6-mountainous-background-second-parallax-section.png" alt="Mountainous Background Second Parallax Section" width="730" height="411" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/6-mountainous-background-second-parallax-section.png 730w, https://blog.logrocket.com/wp-content/uploads/2023/03/6-mountainous-background-second-parallax-section.png?resize=300,169 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>Ultimately, the “buffer” section is a design decision and not an implementation requirement. You can check out the CodePen for the above example:</p>
<p class="codepen" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="300" data-default-tab="css,result" data-slug-hash="KKRrKNz" data-user="robatronbobby">See the Pen <a href="https://codepen.io/robatronbobby/pen/KKRrKNz"><br>
Fixed background parallax scroll</a> by rob2 (<a href="https://codepen.io/robatronbobby">@robatronbobby</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script src="https://cpwebassets.codepen.io/assets/embed/ei.js" async></script></p>
<p>The key to creating the parallax container is to set the <code><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-image">background-image</a></code> property with the image of your choosing and then set the <code><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment">background-attachment</a></code> property to <code>fixed</code>. The <code>fixed</code> value fixes the position of the background image relative to the viewport.</p>
<h3 id="scaling-design">Scaling the design</h3>
<p>Using the <code>background-size: cover;</code> to scale the image to the smallest possible size to fill the container while preserving its aspect ratio is optional, but generally wise. In the code below, I also center the position of the background image using <code>background-position: center</code>:</p>
<pre>.parallax-container {
  /*  this is where the magic happens:  */
  background-image: url("https://images.unsplash.com/photo-1519120944692-1a8d8cfc107f?ixlib=rb-1.2.1&amp;amp;amp;amp;amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;amp;amp;amp;auto=format&amp;amp;amp;amp;amp;fit=crop&amp;amp;amp;amp;amp;w=872&amp;amp;amp;amp;amp;q=80");
  background-attachment: fixed;
  background-position: center;
  background-size: cover;

  /* dimensions are important, ensure it is tall enough to scroll */ 
  min-height: 100vh;

  /* you are free to lay out the container items with flexbox or whatever means you wish */
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}</pre>
<p>You must also be mindful of the parallax container dimensions; the container should be tall enough to require significant scrolling. A simple way to guarantee this is to set <code>min-height: 100vh</code> on the parallax container so that it will be at least as tall as the height of the screen, regardless of the elements it contains.</p>
<h3 id="handling-mobile-browser-compatibility-issues">Handling mobile browser compatibility issues</h3>
<p>At the time of writing, there are still lingering issues with <code>background-attachment:</code> <code>fixed</code> on mobile browsers. To better understand these issues, <a href="https://caniuse.com/background-attachment">read the documentation</a>. Fortunately, we have some options to overcome any mobile browser incompatibilities.</p>
<p>For example, we can take the nuclear approach and ditch parallax completely on mobile devices and smaller screens by using a media query. The CSS would look something like the following:</p>
<pre> /* Turn off parallax scrolling for all tablets and phones. Increase/decrease the pixels if needed */
@media only screen and (max-device-width: 1366px) {
  .parallax-container {
    background-attachment: scroll;
  }
} 
</pre>
<p>Murtuzaali Surti wrote about a <a href="https://css-tricks.com/the-fixed-background-attachment-hack/">fixed background hack</a> and showed how bugs manifest in mobile browsers when <code>background-attachment:</code> <code>fixed</code> is used. In a nutshell, Murtuzaali suggests creating an element with a background image using <code>position: fixed</code>, placing the content into a separate element, and then positioning it absolutely on top of, or stacked above, the background element.</p>
<p>Similarly, we could use a pseudo-element for the fixed background image, and it should work the same. However, I haven’t tried this method myself, so I can’t personally vouch for it.</p>
<h3 id="pros-cons-fixing-background-position">Pros and cons of fixing the position of the background</h3>
<p>Implementing parallax scrolling by fixing the background position is relatively straightforward and easy to understand. On the other hand, mobile browser support is still problematic, but workarounds are available. It’s only capable of having two layers, and we cannot control the speed of the layers.</p>
<h2 id="using-3d-translations">Using 3D translations</h2>
<p>In CSS, we can position elements in three dimensions; we can position elements along the z-axis to increase or decrease the perceivable distance between the user and the element:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="164867" data-permalink="https://blog.logrocket.com/7-x-y-z-axis-position-css-elements-3d/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/7-x-y-z-axis-position-css-elements-3d.jpeg" data-orig-size="368,402" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="7-x-y-z-axis-position-css-elements-3d" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/7-x-y-z-axis-position-css-elements-3d.jpeg?w=275" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/7-x-y-z-axis-position-css-elements-3d.jpeg?w=368" class="aligncenter wp-image-164867 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/7-x-y-z-axis-position-css-elements-3d.jpeg" alt="X Y Z Axis Position CSS Elements 3d" width="368" height="402" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/7-x-y-z-axis-position-css-elements-3d.jpeg 368w, https://blog.logrocket.com/wp-content/uploads/2023/03/7-x-y-z-axis-position-css-elements-3d.jpeg?resize=275,300 275w" sizes="(max-width: 368px) 100vw, 368px" /></p>
<p>Since 3D translations mimic reality, there are similar physical effects when we move things in the digital world. For example, something that is further away (i.e., negative translation on the z-axis), will move slower. Conversely, something that is closer (i.e., positive translation on the z-axis) will move faster.</p>
<p>Another physical effect is scale. If we move something further away, it will appear smaller. If it is closer, it will appear bigger. If you want to counter this adjustment, you’ll need to scale it up or down yourself.</p>
<p>To achieve the parallax effect, we’ll use three CSS properties, <code><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position">position</a></code>, <code><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/perspective">perspective</a></code>, and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform"><code>transform</code></a> to lay out and group our elements into layers. Then, we’ll use the <code>translateZ()</code> and <code>scale()</code> transformation functions to control the scrolling speed and sizes of layers relative to the <code>perspective</code> set on the parent element.</p>
<p>Before going further, keep in mind that this is a tricky topic because it deviates from what is typical. So, let’s make a small checklist of topics you should be comfortable with to truly grasp this method:</p>
<ul>
<li>CSS transformations: The <a href="https://blog.logrocket.com/deep-dive-css-individual-transform-properties/">transform properties are core to CSS</a>; the 3D aspect is particularly important to understand</li>
<li>z-index: Stacking elements through the <code>position</code> and <code>transform</code> properties can lead to situations where layers aren’t stacked as you might expect. <code>transform</code> creates a new stacking context, so you may need to intervene and <a href="https://blog.logrocket.com/best-practices-stacking-elements-css/">manage the <code>z-index</code> of the layers</a> depending on your design</li>
<li>Overflow: When working in 3D with overlapping elements, you must be <a href="https://blog.logrocket.com/how-to-prevent-overflow-scrolling-css/">mindful of overflow</a></li>
</ul>
<p>In 2014, Keith Clark wrote the seminal tutorial on the <a href="https://keithclark.co.uk/articles/pure-css-parallax-websites/">3D translation method</a>. This tutorial is a great exposition of the method, although it is a bit light on realistic examples that could make the method easier to grasp.</p>
<p>Rather than repeating the same information here, I’ll walk through a parallax scrolling example and share some of the finer points not covered in that article. I recommend you read Keith’s article; you can disregard any discussion about browser bugs because those are no longer an issue.</p>
<h3 id="parallax-scrolling-demo">Parallax scrolling demo</h3>
<p>Let’s create a basic parallax scrolling example with three layers that have some text as well as different background colors. Below is the HTML:</p>
<pre>&lt;div class="parallax"&gt;
&lt;!--layer 1 will be the bottom layer, layer 3 will be the top layer--&gt;
&lt;div class="parallax-layer layer1"&gt;LAYER 1&lt;/div&gt;
&lt;div class="parallax-layer layer2"&gt;LAYER 2&lt;/div&gt;
&lt;div class="parallax-layer layer3"&gt;LAYER 3&lt;/div&gt;
&lt;/div&gt;</pre>
<p>Below is the base CSS that we can reuse:</p>
<pre>/* if you do not remove the margin, you will see a vertical scrollbar on the .parallax div */
body {
  margin: 0;
}

/* parallax "viewport" */
.parallax {
  height: 100vh;

  overflow-x: hidden;
  overflow-y: auto;

  perspective: 1px;
}

.parallax-layer {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

.layer1 {
  transform: translateZ(0);
}

.layer2 {
  transform: translateZ(-1px);
}

.layer3 {
  transform: translateZ(-2px);
}
</pre>
<p>There are some things to note about this CSS code. First, the <code>parallax</code> class is where the magic happens. Defining an element’s&nbsp;<code>height</code> and <code>perspective</code> style properties creates a fixed origin 3D viewport.</p>
<p>The <code>perspective</code> property defines how far away the object is from the user. I have chosen a value of 1px for the <code>perspective</code> property for the <code>parallax</code> class, meaning we are very, very close to the div. You can increase this value if you want:</p>
<pre>  top: 10rem;

  width: 100%;
  height: 50rem;

  background-color: green;
}

.parallax-layer.layer3 {
  top: 20rem;

  width: 100%;
  height: 50rem;pronounced parallax effect.
</pre>
<p>The speed of the effect is controlled by the combination of the values provided for <code>perspective</code> and <code>translateZ()</code>.</p>
<p>Decreasing the value for <code>translateZ()</code>will push the element further away, and that element will scroll slower. The further the value is from zero, the more pronounced the parallax effect. <code>translateZ(-5px)</code> will scroll slower than <code>translateZ(-1px)</code>.</p>
<p>Beyond the base CSS, you should always consider the <code>height</code> of the layers. If a layer does not have much content, it may be too small to create appropriately tall scrolling context. Some people like to set a default size in <code>.parallax-layer</code>, but that is up to you.</p>
<p>We can change the position of the layers to fulfill our design using the properties <code>top</code>, <code>right</code>, <code>left</code>, and <code>bottom</code>. Alternatively, we can also use <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate3d"><code>translate3d()</code></a> to move an element along the x-axis and y-axis.</p>
<p>Now, let’s add size, position, and a background color to each of the layers to demonstrate how this all fits together. Below is an approximate figure of what we’re doing on the z-axis:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="164865" data-permalink="https://blog.logrocket.com/8-z-axis-layers-relating-parallax/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/8-z-axis-layers-relating-parallax.png" data-orig-size="730,730" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="z-axis-layers-relating-parallax" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/8-z-axis-layers-relating-parallax.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/8-z-axis-layers-relating-parallax.png?w=730" class="aligncenter wp-image-164865 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/8-z-axis-layers-relating-parallax.png" alt="Z Axis Layers Relating Parallax" width="730" height="730" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/8-z-axis-layers-relating-parallax.png 730w, https://blog.logrocket.com/wp-content/uploads/2023/03/8-z-axis-layers-relating-parallax.png?resize=150,150 150w, https://blog.logrocket.com/wp-content/uploads/2023/03/8-z-axis-layers-relating-parallax.png?resize=300,300 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>&nbsp;</p>
<p>Next, we’ll make layer 2 and layer 3 half the height of layer 1 so we can see each layer distinctly. Then, we’ll position layer 2 lower on the y-axis with <code>top</code>, so it begins below layer 1. We’ll do the same with layer 3 so that it begins below layer 2:</p>
<pre>.parallax-layer.layer1 {
  width: 100%;
  height: 100rem;

  background-color: red;
}

.parallax-layer.layer2 {
  top: 10rem;

  width: 100%;
  height: 50rem;

  background-color: green;
}
.parallax-layer.layer3 {
  top: 20rem;

  width: 100%;
  height: 50rem;

  background-color: blue;
}

div{
  font-size: 50px;
  text-align: center;
}
</pre>
<p class="codepen" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="300" data-default-tab="css,result" data-slug-hash="BaxGyKQ" data-user="robatronbobby">See the Pen <a href="https://codepen.io/robatronbobby/pen/BaxGyKQ"><br>
Basic parallax scrolling example</a> by rob2 (<a href="https://codepen.io/robatronbobby">@robatronbobby</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script src="https://cpwebassets.codepen.io/assets/embed/ei.js" async></script></p>
<p>In full screen, it looks kind of like a Russian nesting doll:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="164862" data-permalink="https://blog.logrocket.com/9-parallax-3d-layers-nesting/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/9-parallax-3d-layers-nesting.png" data-orig-size="730,973" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="parallax-3d-layers-nesting" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/9-parallax-3d-layers-nesting.png?w=225" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/9-parallax-3d-layers-nesting.png?w=730" class="aligncenter wp-image-164862 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/9-parallax-3d-layers-nesting.png" alt="Parallax 3D Layers Nesting" width="730" height="973" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/9-parallax-3d-layers-nesting.png 730w, https://blog.logrocket.com/wp-content/uploads/2023/03/9-parallax-3d-layers-nesting.png?resize=225,300 225w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>Do you notice that even though layer 2 and layer 3 have the same <code>height</code>, layer 3 appears to be shorter than layer 2? This is due to the 3D transformation we discussed earlier. Layer 3 is further away, so it appears smaller. You can use the <code>scale()</code> function if you want to make them appear equal in size.</p>
<p>Wondering why layer 1 is the bottom layer? In HTML, the layer 1 <code>div</code> comes before the layer 3 <code>div</code>. These <code>div</code>s are positioned absolutely, meaning that layer 3 should be the top layer because it comes last in the DOM. Well, a <code>transform</code> creates a new stacking context, which promotes each <code>div</code> to sit above what comes before it. So, the order of the layers is the reverse of the order in the DOM.</p>
<p>The takeaway is to remember that the first element in the “parallax” container or section will become the bottom layer. Also, it may be unexpected that our “parallax” <code>div</code> will have a visible scrollbar if you have a <code>margin</code> on the body, which is the default, as shown below. This is because the layers are taller than the container, so they overflow:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="164860" data-permalink="https://blog.logrocket.com/10-parallax-layers-overflowing/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/10-parallax-layers-overflowing.png" data-orig-size="730,732" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="parallax-layers-overflowing" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/10-parallax-layers-overflowing.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/10-parallax-layers-overflowing.png?w=730" class="aligncenter wp-image-164860 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/10-parallax-layers-overflowing.png" alt="Parallax Layers Overflowing" width="730" height="732" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/10-parallax-layers-overflowing.png 730w, https://blog.logrocket.com/wp-content/uploads/2023/03/10-parallax-layers-overflowing.png?resize=150,150 150w, https://blog.logrocket.com/wp-content/uploads/2023/03/10-parallax-layers-overflowing.png?resize=300,300 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>And that’s how the pieces fit together! If you want to create a design with separate parallax sections, you can consult <a href="https://keithclark.co.uk/articles/pure-css-parallax-websites/#parallax-sections">this section of Keith’s article</a>.</p>
<p>If this all feels a bit overwhelming, don’t worry! Once you explore the core mechanics as we have, you can fill in the missing pieces by exploring some good examples.</p>
<h3 id="good-examples-3d-translations">Good examples of using 3D translations</h3>
<p>For a guided walkthrough on how to create a parallax hero section, watch this <a href="https://www.youtube.com/watch?v=mxHoPYFsTuk">video tutorial</a>. Here’s a CodePen for the example discussed:</p>
<p class="codepen" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="300" data-default-tab="css,result" data-slug-hash="vYjQZNa" data-user="robatronbobby">See the Pen <a href="https://codepen.io/robatronbobby/pen/vYjQZNa"><br>
CSS</a> by rob2 (<a href="https://codepen.io/robatronbobby">@robatronbobby</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script src="https://cpwebassets.codepen.io/assets/embed/ei.js" async></script></p>
<p>To replicate the Firewatch website, here’s a CodePen with a pretty good CSS recreation; the code is written by <a href="https://codepen.io/lemmin">lemmin</a>:</p>
<p class="codepen" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="300" data-default-tab="css,result" data-slug-hash="dyeQWvN" data-user="robatronbobby">See the Pen <a href="https://codepen.io/robatronbobby/pen/dyeQWvN"><br>
CSS Only Parallax Example: Firewatch Launch Site</a> by rob2 (<a href="https://codepen.io/robatronbobby">@robatronbobby</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script src="https://cpwebassets.codepen.io/assets/embed/ei.js" async></script></p>
<p>To see a version that uses the original Firewatch artwork, Sam Beckham did a <a href="https://sam.beckham.io/wrote/css-parallax-effect/">short blog post on this topic</a>. Here’s a CodePen of this example:</p>
<p class="codepen" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="300" data-default-tab="css,result" data-slug-hash="OPXPNp" data-user="samdbeckham">See the Pen <a href="https://codepen.io/samdbeckham/pen/OPXPNp"><br>
Firewatch Parallax in CSS</a> by Sam Beckham (<a href="https://codepen.io/samdbeckham">@samdbeckham</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script src="https://cpwebassets.codepen.io/assets/embed/ei.js" async></script><br>
A next-level exposition of the technique is Lynn’s Fisher work on the <a href="https://matterday.netlify.com/">Matterday micro website</a>. It’s very fun and unique. I think the sticky mini “window” for each background to pass beneath other content is really novel:</p>
<div style="width: 730px;" class="wp-video"><video class="wp-video-shortcode" id="video-140996-4" width="730" height="952" preload="metadata" controls="controls"><source type="video/mp4" src="https://blog.logrocket.com/wp-content/uploads/2022/11/matterday-example.mp4?_=4" /><a href="https://blog.logrocket.com/wp-content/uploads/2022/11/matterday-example.mp4">https://blog.logrocket.com/wp-content/uploads/2022/11/matterday-example.mp4</a></video></div>
<p>Lynn wrote an <a href="https://www.netlify.com/blog/fun-parallax-scrolling-css-for-matterday/">excellent blog post</a> on how she created this effect. I need to pick through it in more detail to unlock all of the tricks she used! The code is available on <a href="https://github.com/netlify/matterday.netlify.com">GitHub</a>.</p>
<h3 id="pros-cons-3d-translations">Pros and cons of using 3D translations</h3>
<p>When implementing a parallax scroll using 3D translations, you can use multiple layers and control the speed of each layer. Additionally, cross-browser support is excellent. However, it’s more difficult to understand&nbsp;3D translations than fixing the background position, and implementation can be tricky.</p>
<h2 id="where-use-parallax-scrolling">Where can you use parallax scrolling?</h2>
<p>If you’re looking for some inspiration for where to use parallax scrolling, Adobe wrote an article called <a href="https://xd.adobe.com/ideas/principles/web-design/best-practices-for-parallax-websites/">10 Best Parallax Website Design Examples</a> that has some excellent designs. <a href="https://dribbble.com/">Dribble</a> is another good resource.</p>
<h2 id="best-practices-parallax-scrolling">Best practices for parallax scrolling</h2>
<p>There are many design choices that are at your discretion when applying the parallax scrolling technique, like changing the speed of layers, having a horizontal or vertical scrolling parallax section, or using text, images, or particular colors in parallax sections. However, there are a few things to keep in mind to ensure that you use parallax scrolling well.</p>
<h3 id="use-parallax-scrolling-right-places">Use parallax scrolling in the right places</h3>
<p>Be clear on what your objectives are and consider the user at all times. Parallax scrolling can create an interesting guided experience or a novel revelation of a product, but it’s not a good fit for many use cases!</p>
<p>For example, if a user is seeking an answer, parallax scrolling can slow the user down if the content is presented in a staggered manner or a non-linear way. For referential content, I would generally avoid using parallax scrolling.</p>
<p>Consider returning users. What happens when a user sees the webpage for the second, third, or fourth time? The novelty will wear out! Is this a page users will visit often? If the parallax effect is used in a gimmicky way, users will will be put off. Don’t crowbar it into a webpage to show off.</p>
<h3 id="natural-scrolling">Don’t impede natural scrolling</h3>
<p>A user should be able scroll through a page in whatever way they want to, for example, a mouse wheel, track pad finger gesture, arrow keys on the keyboard, or scroll gestures on touch screen. If you impede a user’s scrolling, you’ll cause frustration.</p>
<p>It’s harder to mess this up with CSS-only implementations, but it can happen with the 3D translation technique if you don’t understand it well. You need to be mindful of containers that have overflowing content and can trap focus. If clicking in a certain area or on a certain element derails the scrolling experience for the page, you need to rethink your design.</p>
<h3 id="#Responsive design">Responsive design</h3>
<p>With approximately <a href="https://www.statista.com/statistics/277125/share-of-website-traffic-coming-from-mobile-devices/#:~:text=Mobile%20accounts%20for%20approximately%20half,since%20the%20beginning%20of%202017.">59 percent of overall web traffic</a> coming from mobile devices, it’s vital to get the mobile user experience right. Your parallax design may not work well on mobile. It’s worth considering limiting or turning off parallax on mobile to give users the experience they deserve.</p>
<p>For example, if you visit the Firewatch homepage on a phone, you’ll see that they turn off parallax scrolling for smaller screens. Instead, they have a “nonparallax” section with a single background image for screens less than 600px, as shown below:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="165490" data-permalink="https://blog.logrocket.com/firewatch-nonparallax-section-mobile-ui/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/firewatch-nonparallax-section-mobile-ui.png" data-orig-size="730,1581" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="firewatch-nonparallax-section-mobile-ui" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/firewatch-nonparallax-section-mobile-ui.png?w=139" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/firewatch-nonparallax-section-mobile-ui.png?w=473" class="aligncenter wp-image-165490 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/firewatch-nonparallax-section-mobile-ui.png" alt="Firewatch Nonparallax Section Mobile UI" width="730" height="1581" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/firewatch-nonparallax-section-mobile-ui.png 730w, https://blog.logrocket.com/wp-content/uploads/2023/03/firewatch-nonparallax-section-mobile-ui.png?resize=139,300 139w, https://blog.logrocket.com/wp-content/uploads/2023/03/firewatch-nonparallax-section-mobile-ui.png?resize=473,1024 473w, https://blog.logrocket.com/wp-content/uploads/2023/03/firewatch-nonparallax-section-mobile-ui.png?resize=709,1536 709w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<h3 id="performance">Performance</h3>
<p>If you neglect performance, you’ll undo the benefits that the parallax effect gives a user.</p>
<p>According to Google, the probability of a bounce increases by 32 percent as page load time goes from one second to three seconds<em>.</em> Speed affects your bottom line. A <a href="https://www2.deloitte.com/content/dam/Deloitte/ie/Documents/Consulting/Milliseconds_Make_Millions_report.pdf">study conducted by Google</a> found that just a 100ms improvement in site speed led to retail consumers spending almost 10 percent more.</p>
<p>For a parallax hero section, it’s especially important to get this right. A hero section with images usually is the <a href="https://web.dev/lcp/">Largest Contentful Paint (LCP)</a>, which is one of Google’s <a href="https://web.dev/learn-core-web-vitals/">Core Web Vitals</a> performance metrics. LCP measures <a href="https://web.dev/user-centric-performance-metrics/#types-of-metrics">perceived load speed</a> because it marks the point in the page load timeline when the page’s main content has likely loaded. A fast LCP helps reassure the user that the page is <a href="https://web.dev/user-centric-performance-metrics/#questions">useful</a>.</p>
<p>Firewatch loads nine images in the hero section. If you don’t optimize this, then the initial page load and the perceived loading speed will be slow to the user. For this scenario, you should consider the following:</p>
<ol>
<li>If you use background images, ensure that the image is preloaded via <code>&lt;link rel="preload"&gt;</code> in the HTML markup. Typically, any <code>img</code> elements are identified by the browser’s <a href="https://web.dev/preload-scanner/">preload scanner</a> to optimize loading</li>
<li>Compress the images to reduce their file size using a library like <a href="https://www.npmjs.com/package/sharp">Sharp</a></li>
<li>Use <a href="https://css-tricks.com/a-guide-to-the-responsive-images-syntax-in-html/">responsive image syntax</a> in <code>img</code> or <code>picture</code> to offer different resolutions of the same image so the browser can serve the smallest version that suits the screen resolution</li>
<li>Use next generation image formats with superior compression like WebP and AVIF. You can use the <code>picture</code> element to offer different formats and let the browser decide which to use</li>
</ol>
<p>You can read this detailed guide on <a href="https://web.dev/optimize-lcp/">how to optimize the LCP for your page</a>. Site speed is also a factor for search engines ranking your website, so it will influence your site’s SEO too.</p>
<h3 id="accessibility">Accessibility</h3>
<p>Motion-based animations can trigger discomfort for those with vestibular motion sensitivity or be a distraction for those with attention deficits. You can reduce the speed of the parallax scroll or turn off it for sensitive users through the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion"><code>@prefers-reduced-motion</code> media query</a>:</p>
<pre>@media (prefers-reduced-motion) {
  /* styles to apply if the user's settings are set to reduced motion */
}
</pre>
<h2 id="css-instead-javascript">Why use CSS instead of JavaScript?</h2>
<p>If you can pull something off in CSS rather than JavaScript, you’ll often get a more performant outcome. As an industry, at one point it seemed that some folks wanted to do everything with JavaScript, but I think there is more enlightenment around this topic now.</p>
<p><a href="https://www.sketch.com/">Sketch</a> wrote about <a href="https://www.sketch.com/blog/2022/07/22/what-is-a-parallax-effect/">parallax on their design blog</a> and spoke about how they implemented a subtle parallax scrolling effect on the homepage of their website. They used a JavaScript framework called Stimulus:</p>
<blockquote><p>And it was simple from a development standpoint, too, as Richárd explains. “We use a super tiny JS framework called <a href="https://stimulus.hotwired.dev/">Stimulus</a>. It lets us create small JavaScript components that are controlled by HTML data attributes,” he continues. With just a few extra HTML data parameters, the team could control horizontal and vertical velocity based on the speed of scrolling. “So larger objects and elements can move slower and the smaller ones can move faster in the virtual space,” Richárd concludes.</p></blockquote>
<p>If this blog post was my first introduction to the parallax effect, I could be led to believe that I should implement it with a JavaScript framework too.</p>
<p>Development teams may opt for JavaScript because they are already using a framework and can achieve the same outcome with just a little extra JavaScript. I don’t want to admonish anyone for doing that, it may be justifiable. However, it can be easy to make a habit of shipping more and more JavaScript as you add independent features over time.</p>
<p>Also remember that it’s not a mutually exclusive choice. You can use mostly CSS with some JavaScript. The <a href="https://twitter.com/keyframers">keyframers</a> did an interesting example of this in <a href="https://youtu.be/vatBdNK-OiQ">a coding stream</a>. Here’s the accompanying CodePen:</p>
<p class="codepen" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="300" data-default-tab="css,result" data-slug-hash="PaRJWm" data-user="shshaw">See the Pen <a href="https://codepen.io/shshaw/pen/PaRJWm"><br>
Movable Mountains <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/26f0.png" alt="⛰" class="wp-smiley" style="height: 1em; max-height: 1em;" /> | @keyframers 1.12.0</a> by Shaw (<a href="https://codepen.io/shshaw">@shshaw</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p>It’s important to have a balanced approach like this. You shouldn’t feel polarized and think it’s a CSS vs. JavaScript thing.</p>
<p>There is a time when you’ll need to reach for JavaScript. For example, an animated scroll experience calls for JavaScript. <a href="https://greensock.com/">GreenSock</a> is the best JavaScript library for web animation in my opinion.</p>
<h2 id="conclusion">Conclusion</h2>
<p>A well-crafted parallax scrolling website can help you stand out from the crowd and create a lasting impression on your visitors. But, I would advise caution when using parallax scrolling. You must take care with the design and implementation to ensure that scrolling is not compromised and that the user experience is good on devices of all sizes.</p>
<p>I hope this article demystified the parallax scrolling technique for you and provided insights on how to implement it with CSS. Don’t forget to have fun with it. Create something awesome!</p>
</html>
<p>The post <a href="https://blog.logrocket.com/create-parallax-scrolling-css/">How to create parallax scrolling with CSS</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.logrocket.com/create-parallax-scrolling-css/feed/</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		<enclosure url="https://blog.logrocket.com/wp-content/uploads/2022/11/multiplane-demo.webm" length="284350" type="video/webm" />
<enclosure url="https://en.wikipedia.org/wiki/File:MultiplaneDemo.webm" length="15003" type="video/webm" />
<enclosure url="https://blog.logrocket.com/wp-content/uploads/2022/11/cerro-torre-example.mp4" length="1962600" type="video/mp4" />
<enclosure url="https://blog.logrocket.com/wp-content/uploads/2022/11/matterday-example.mp4" length="2289551" type="video/mp4" />

		<post-id xmlns="com-wordpress:feed-additions:1">140996</post-id>	</item>
		<item>
		<title>CSS breakpoints for responsive design</title>
		<link>https://blog.logrocket.com/css-breakpoints-responsive-design/</link>
					<comments>https://blog.logrocket.com/css-breakpoints-responsive-design/#comments</comments>
		
		<dc:creator><![CDATA[Rob O'Leary]]></dc:creator>
		<pubDate>Thu, 02 Mar 2023 14:00:32 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[css]]></category>
		<guid isPermaLink="false">https://blog.logrocket.com/?p=161039</guid>

					<description><![CDATA[<p>We discuss the role of CSS breakpoints in responsive design, reviewing different methods of choosing breakpoints and some best practices.</p>
<p>The post <a href="https://blog.logrocket.com/css-breakpoints-responsive-design/">CSS breakpoints for responsive design</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[<!DOCTYPE html>
<html><p>Responsive web design is an approach that ensures webpages render properly across all screen sizes and resolutions while ensuring high usability.</p>
<img loading="lazy" decoding="async" width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/02/css-breakpoints-responsive-design-nocdn.png" class="attachment-full size-full wp-post-image" alt="CSS Breakpoints Responsive Design" srcset="https://blog.logrocket.com/wp-content/uploads/2023/02/css-breakpoints-responsive-design-nocdn.png 730w, https://blog.logrocket.com/wp-content/uploads/2023/02/css-breakpoints-responsive-design-nocdn.png?resize=300,200 300w" sizes="(max-width: 730px) 100vw, 730px" data-attachment-id="161040" data-permalink="https://blog.logrocket.com/css-breakpoints-responsive-design/attachment/css-breakpoints-responsive-design-nocdn/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/02/css-breakpoints-responsive-design-nocdn.png" data-orig-size="730,487" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="CSS breakpoints responsive design" data-image-description data-image-caption data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/02/css-breakpoints-responsive-design-nocdn.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/02/css-breakpoints-responsive-design-nocdn.png?w=730"><p>In this article, we’ll look at the evolution of responsive design, from media queries to grid systems, container queries, and, finally, fluid design. We’ll discuss the role of breakpoints in responsive design, reviewing different methods of choosing breakpoints and some best practices.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#evolution-responsive-design">The evolution of responsive design</a></li>
<li><a href="#what-media-queries">What are media queries?</a></li>
<li><a href="#how-choose-breakpoints">How do you choose breakpoints?</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#breakpoints-based-device">Breakpoints based on device</a></li>
<li><a href="#breakpoints-based-content">Breakpoints based on content</a></li>
<li><a href="#which-approach-should-follow">Which approach should you follow?</a></li>
</ul>
</li>
<li><a href="#what-breakpoints-popular-css-frameworks-use">What breakpoints do popular CSS frameworks use?</a></li>
<li><a href="#common-practices-breakpoints">Common practices for breakpoints</a></li>
<li><a href="#really-need-breakpoints">Do you really need breakpoints?</a></li>
</ul>
<h2 id="evolution-responsive-design">The evolution of responsive design</h2>
<p>HTML is fundamentally responsive. If you create a webpage using only HTML and resize the window, the browser will automatically adjust the text to fit the viewport. But your content won’t look good on every screen!</p>
<p>For example, long lines of text can be difficult to read on a wide monitor. Similarly, if the line length is reduced with CSS by creating columns or adding a margin, the content may look squashed when viewed on a mobile device. You have to intervene to adapt the style to the screen based on the content and layout of your webpage.</p>
<p>The term responsive design was coined by Ethan Marcotte in 2010&nbsp;and described using fluid grids, fluid images, and media queries to create responsive content. At the time, the recommendation was to use <code>float</code> for layout and media queries to query the browser width or height to create layouts for different breakpoints.</p>
<p>A breakpoint is the point, usually a specific width, at which a webpage’s style is adapted in a particular way in order to provide the best possible user experience. Fluid images were set not to exceed the width of their container by setting their <code>max-width</code> property to <code>100%</code>. The prevailing attitude was to control every pixel of a layout for a given screen size.</p>
<p>Frameworks like Bootstrap rose in popularity as they provided developers with responsive grid systems. This contributed to a shift in the way we build and think about webpages. With the advent of design systems, there is a tendency to think in terms of components rather than pages. We combine components to make up a page and want them to live side by side without having to write a lot of CSS to create a harmonious layout.</p>
<p>With modern CSS, less intervention is required to resize or change layouts for different screen sizes. Layout methods such as CSS flexbox and&nbsp;grid have responsive capabilities, and other modern methods have been developed to make content responsive:</p>
<ul>
<li><strong><code>clamp()</code> function</strong>: Allows typography and spacing to be responsive to the viewport width</li>
<li><strong>Container queries</strong>: Enables a component to be responsive to its wrapper</li>
<li><strong>Logical properties</strong>: Permits spacing to be responsive to the language of the website</li>
</ul>
<p>In 2018, Jen Simmons introduced the term “Intrinsic Web Design” in her talk “<a href="https://talks.jensimmons.com/videos/h0XWcf">Everything You Know About Web Design Just Changed</a>.” Here are her three principles of intrinsic web design:</p>
<ol>
<li><strong>Contracting and expanding</strong>: The way we consider how our design will adapt to a change in available space</li>
<li><strong>Flexibility</strong>: Using modern CSS functions to adapt to the available space</li>
<li><strong>Viewport</strong>: The ability to use the width and height of the viewport as input to a responsive design</li>
</ol>
<p>Today, more people generally advocate going with the grain with regard to how content adapts to the space available. As <a href="https://heypresents.com/talks/be-the-browser-s-mentor-not-its-micromanager">Andy Bell put it recently</a>, maybe our preference should be to “be the browser’s mentor, not its micromanager.”</p>
<p>With the recent introduction of container queries, we are entering a new era of responsive design. Container queries allow us to look at a container size and apply styles to the content based on the size of their container rather than the viewport or other device characteristics. I see this more as an evolution than a revolution because now CSS can align more easily with component-based thinking.</p>
<p>Some people see container queries as a departure from what came before because now a design can be largely independent of the viewport size. However, container queries still involve breakpoints. So, we still need to consider where and when (at what point) to change the style of content.</p>
<p>While we have moved on from <code>float</code> for layouts, media queries are still relevant. They are just required less frequently than before. People have been predicting the end of media queries with the introduction of container queries, but <a href="https://blog.logrocket.com/choose-between-media-container-queries/">container queries do not solve everything</a>. Media queries still have a seat at the table. It will take some maturation before the roles are worked out with more clarity.</p>
<p>Let’s cover media queries first before we dive into breakpoints.</p>
<h2 id="what-media-queries">What are media queries?</h2>
<p>Media queries are useful when you want to modify the layout or appearance of your site depending on specific characteristics such as the screen resolution of the device or the browser viewport width or height.</p>
<p>A media query is composed of:</p>
<ol>
<li>An optional media type&nbsp;defining a broad category of devices to which the media query applies: <code>all</code>, <code>print</code>, or <code>screen</code>. This type is optional; it is assumed to be <code>all</code> if omitted</li>
<li>Any number of media feature expressions describing a specific characteristic of the user agent, output device, or environment. Examples are: <code>hover</code>, <code>prefers-reduced-motion</code>, and <code>width</code></li>
</ol>
<p>The common syntax for a CSS media query is as follows:</p>
<pre class="language-css hljs">@media media type and (media feature expression) {
/* CSS rules */
}
</pre>
<p>The logical operators <code>not</code>, <code>and</code>, <code>only</code>, and <code>or</code> can be used to compose a complex media query.</p>
<p>For responsive design, <code>min-width</code> and <code>max-width</code> are the most commonly used media features. They enable styles to be based on the width of the viewport. For example, the following CSS code will apply styles only if the browser’s viewport width is equal to or less than <code>80em</code>:</p>
<pre class="language-css hljs">@media (max-width: 80em) {
/* CSS rules */
}
</pre>
<p>You can also use height (<code>height</code>, <code>min-height</code>, and <code>max-height</code>), <code>aspect-ratio</code>, <code>resolution</code>, and <code>orientation</code> in media feature expressions to deal with the viewport’s dimensions and different aspects of the screen.</p>
<p>The Media Queries Level 4 specification includes some syntax improvements to make media features that have a less verbose “range” type, e.g., <code>width</code>. With this syntax improvement, our previous <code>max-width</code> example could be written like so:</p>
<pre class="language-css hljs">@media (width &lt;= 80em) {
/* CSS rules *
}
</pre>
<p>At the time of writing, this <a href="https://caniuse.com/css-media-range-syntax">new range syntax is in Chrome and Firefox</a> and will be available soon in Safari.</p>
<h2 id="how-choose-breakpoints">How do you choose breakpoints?</h2>
<p>A breakpoint is the point, usually a specific width, at which a webpage’s style is adapted in a particular way in order to provide the best possible user experience.</p>
<p>There are two broad approaches when choosing CSS breakpoints; one is based on devices and the other is based on content. Let’s take a look.</p>
<h3 id="breakpoints-based-device">Breakpoints based on device</h3>
<p>You can target and produce a different design for specific screen sizes. A design may work across multiple screen sizes, however, the content may be narrower when less space is available.</p>
<p>With the breadth and variety of devices available, determining breakpoints based on screen sizes is challenging. This approach is really not feasible to maintain:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="161065" data-permalink="https://blog.logrocket.com/css-breakpoints-responsive-design/attachment/devices/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/devices.jpg" data-orig-size="720,357" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="Devices display content differently based screen size" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/devices.jpg?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/devices.jpg?w=720" class="aligncenter wp-image-161065 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/devices.jpg" alt="Devices Display Content Differently Based Screen Size" width="720" height="357" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/devices.jpg 720w, https://blog.logrocket.com/wp-content/uploads/2023/03/devices.jpg?resize=300,149 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>To simplify this approach, people tend to loosely group devices based on a range of sizes. It’s really up to you to choose the groupings and specific breakpoints. The most common way is to group devices based on form factor (e.g., mobile devices, tablets, laptops, etc.):</p>
<p><img loading="lazy" decoding="async" data-attachment-id="161069" data-permalink="https://blog.logrocket.com/css-breakpoints-responsive-design/attachment/device-breakpoints/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/device-breakpoints.png" data-orig-size="720,335" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Device breakpoints grouping devices form factor" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/device-breakpoints.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/device-breakpoints.png?w=720" class="aligncenter wp-image-161069 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/device-breakpoints.png" alt="Device Breakpoints Grouping Devices Form Factor" width="720" height="335" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/device-breakpoints.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/03/device-breakpoints.png?resize=300,140 300w" sizes="(max-width: 720px) 100vw, 720px" /><br>
Here is some data you could use to arrive at this decision:</p>
<ol>
<li><a href="https://gs.statcounter.com/screen-resolution-stats">Worldwide stats for the most common screen resolutions for 2022</a></li>
<li>Data analytics from your website</li>
<li>Breakpoints selected by CSS frameworks (we’ll discuss this further in the next section)</li>
</ol>
<p>For example, David Gilbertson wrote an article in 2016 with the ambitious title “<a href="https://www.freecodecamp.org/news/the-100-correct-way-to-do-css-breakpoints-88d6a5ba1862/">The 100% correct way to do CSS breakpoints</a>.” I am always skeptical of such clickbaity claims! However, David’s approach was solid.</p>
<p>He arrived at his set of breakpoints by taking the 14 most common screen sizes from StatCounter for 2016 and grouping them using four broad ranges. He avoided selecting screen widths that were on the upper or lower limit of the ranges. Ultimately, David settled on 600px, 900px, 1200px, and 1800px.</p>
<p>You will find that most methodologies arrive at a set of breakpoints in a similarly approximate fashion.</p>
<p>Below is an example of a set of media queries covering four broad categories of devices:</p>
<pre class="language-css hljs">/* Small devices such as large phones (640px and up) */
@media only screen and (min-width: 40em) {...}

/* Medium devices such as tablets (768px and up) */
@media only screen and (min-width: 48em) {...}

/* Large devices such as laptops (1024px and up) */
@media only screen and (min-width: 64em) {...}

/* Largest devices such as desktops (1280px and up) */
@media only screen and (min-width: 80em) {...}
</pre>
<h3 id="breakpoints-based-content">Breakpoints based on content</h3>
<p>This next approach is based on changing the design at the point where the content starts to break in some way. If the line lengths become too long, or if a section gets too squashed, that’s where you need to consider changing the style. In other words, that’s the point where you want to use a media query or container query to change the design.</p>
<p>The responsive mode in browser developer tools (<a href="https://firefox-source-docs.mozilla.org/devtools-user/responsive_design_mode/index.html">Responsive Design Mode</a> in Firefox DevTools and <a href="https://developer.chrome.com/docs/devtools/device-mode/">Device Mode</a> in Chrome DevTools) is very useful for working out where your breakpoints should go. You can easily make the viewport smaller or larger to see where the content style could be improved:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="161071" data-permalink="https://blog.logrocket.com/css-breakpoints-responsive-design/attachment/firefox-responsive-devtools/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/firefox-responsive-devtools.png" data-orig-size="720,865" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Firefox Responsive DevTools" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/firefox-responsive-devtools.png?w=250" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/firefox-responsive-devtools.png?w=720" class="aligncenter wp-image-161071 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/firefox-responsive-devtools.png" alt="Firefox Responsive DevTools" width="720" height="865" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/firefox-responsive-devtools.png 720w, https://blog.logrocket.com/wp-content/uploads/2023/03/firefox-responsive-devtools.png?resize=250,300 250w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<p>In the menu, you can choose devices from a list. In the screenshot above, I have chosen Galaxy Note 20. You can change the orientation (e.g., portrait, landscape) as well.</p>
<p>You can drag one side of the viewport to slowly increase the width and see how the content adapts to different viewport widths. In the video below, you can see me doing this with the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media">MDN @media page</a>. At 769px, you’ll notice that the layout changes, with the sidebar appearing on the left:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="161091" data-permalink="https://blog.logrocket.com/css-breakpoints-responsive-design/attachment/responsive-css-design-firefox/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/responsive-css-design-firefox.gif" data-orig-size="720,560" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Responsive CSS design Firefox" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/responsive-css-design-firefox.gif?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/responsive-css-design-firefox.gif?w=720" class="aligncenter wp-image-161091 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/responsive-css-design-firefox.gif" alt="Responsive CSS Design Firefox" width="720" height="560"></p>
<p>Jeremy Keith called out that some breakpoints are for minor adjustments. <a href="https://adactio.com/journal/6044/">He calls them tweakpoints</a>:</p>
<blockquote><p>“When I was working on Matter, for example, there was really only one major breakpoint, where the layout shifts from one column to two. That’s the kind of breakpoint that you can figure out pretty easily from the flow of your content; just resizing your browser window is usually enough to settle on the point that feels right. But there are lots of other media queries in the Matter stylesheet. Those are there to make smaller adjustments to margins, font sizes … the kind of changes that came about from testing on phones and tablets in the device lab.</p>
<p>It feels a bit odd to call them breakpoints, as though the layout would ‘break’ without them. Those media queries are there to tweak the layout. They’re not breakpoints; they’re tweakpoints.”</p></blockquote>
<p>Overall, this is an organic process guided by what you are specifically making. Adjacent to this is the understanding that if you have a mastery of modern CSS, you will find that you need to intervene less with media queries if you build things to scale according to the available space.</p>
<h3 id="which-approach-should-follow">Which approach should you follow?</h3>
<p>I wouldn’t say that there is one path to follow here. However, I recommend that you do not constrain yourself by thinking only in terms of particular devices. Instead, focus more on utilizing the space available to your content.</p>
<p>Generally, we will use media queries less as time goes on, although we’re likely to still use media queries for components that are tied to the viewport width, like the website’s main navigation and footer. In other cases, you can design content to be fluid or adapt to the container size through container queries.</p>
<p>There can be value in having a set of breakpoints. Whether you take a set from the first approach or come up with the breakpoints organically through testing the interface is up to you. I would say that it is easier to debug layout issues when you have a set of breakpoints, rather than having many adhoc breakpoints.</p>
<p>However, having a set of 6 breakpoints does <em>not</em> mean you should use them all to adjust a layout or style! Look to minimize intervention – look for opportunities for the content to do the work for you!</p>
<h2 id="what-breakpoints-popular-css-frameworks-use">What breakpoints do popular CSS frameworks use?</h2>
<p>According to the “State of CSS” survey, the <a href="https://2022.stateofcss.com/en-US/css-frameworks/">most popular CSS frameworks of 2022</a> (ordered in terms of usage) are:</p>
<ol>
<li>Bootstrap</li>
<li>Tailwind CSS</li>
<li>Materialize CSS</li>
<li>Foundation</li>
<li>Bulma</li>
<li>Ant Design</li>
<li>Semantic UI</li>
<li>PureCSS</li>
<li>UIKit</li>
<li>Tachyons</li>
</ol>
<p>Let’s look at what these popular frameworks do.</p>
<p>You can see the default breakpoints for Bootstrap 4 below:</p>
<table>
<thead>
<tr>
<th>Breakpoint</th>
<th>Dimensions</th>
</tr>
</thead>
<tbody>
<tr>
<td>X-Small</td>
<td>&lt; 576px</td>
</tr>
<tr>
<td>Small</td>
<td>≥ 576px</td>
</tr>
<tr>
<td>Medium</td>
<td>≥ 768px</td>
</tr>
<tr>
<td>Large</td>
<td>≥ 992px</td>
</tr>
<tr>
<td>Extra large</td>
<td>≥ 1200px</td>
</tr>
<tr>
<td>Extra extra large</td>
<td>≥ 1400px</td>
</tr>
</tbody>
</table>
<p>Bootstrap uses a 12-column grid architecture, which influences its choice of breakpoints. Bootstrap describes its <a href="https://mdbootstrap.com/docs/standard/layout/breakpoints/">methodology for choosing breakpoints</a> as follows:</p>
<blockquote><p>“Each breakpoint was chosen to comfortably hold containers whose widths are multiples of 12. Breakpoints are also representative of a subset of common device sizes and viewport dimensions—they don’t specifically target every use case or device. Instead, the ranges provide a strong and consistent foundation to build on for nearly any device.”</p></blockquote>
<p>Ant Design also follows the Bootstrap 4 media queries rules.</p>
<p>Tailwind has five default breakpoints that are inspired by common device resolutions:</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>CSS Media Query</th>
<th>Applies</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>none</td>
<td><strong>&lt; 640px</strong></td>
</tr>
<tr>
<td><code>sm</code></td>
<td><code>@media (min-width: 640px) { ... }</code></td>
<td>≥<strong>640px</strong></td>
</tr>
<tr>
<td><code>md</code></td>
<td><code>@media screen and (min-width: 768px)</code></td>
<td>≥<strong>768px</strong></td>
</tr>
<tr>
<td><code>lg</code></td>
<td><code>@media screen and (min-width: 1024px)</code></td>
<td>≥<strong>1024px</strong></td>
</tr>
<tr>
<td><code>xl</code></td>
<td><code>@media screen and (min-width: 1280px)</code></td>
<td>≥<strong>1280px</strong></td>
</tr>
<tr>
<td><code>2xl</code></td>
<td><code>@media screen and (min-width: 1536px)</code></td>
<td>≥<strong>1536px</strong></td>
</tr>
</tbody>
</table>
<p>PureCSS has seven default breakpoints:</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>CSS Media Query</th>
<th>Applies</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>none</td>
<td><strong>&lt; 568px</strong></td>
</tr>
<tr>
<td><code>sm</code></td>
<td><code>@media screen and (min-width: 35.5em)</code></td>
<td>≥<strong>568px</strong></td>
</tr>
<tr>
<td><code>md</code></td>
<td><code>@media screen and (min-width: 48em)</code></td>
<td>≥<strong>768px</strong></td>
</tr>
<tr>
<td><code>lg</code></td>
<td><code>@media screen and (min-width: 64em)</code></td>
<td>≥<strong>1024px</strong></td>
</tr>
<tr>
<td><code>xl</code></td>
<td><code>@media screen and (min-width: 80em)</code></td>
<td>≥<strong>1280px</strong></td>
</tr>
<tr>
<td><code>xxl</code></td>
<td><code>@media screen and (min-width: 120em)</code></td>
<td>≥<strong>1920px</strong></td>
</tr>
<tr>
<td><code>xxxl</code></td>
<td><code>@media screen and (min-width: 160em)</code></td>
<td>≥<strong>2560px</strong></td>
</tr>
<tr>
<td><code>x4k</code></td>
<td><code>@media screen and (min-width: 240em)</code></td>
<td>≥<strong>3840px</strong></td>
</tr>
</tbody>
</table>
<p>PureCSS favors <code>em</code> for its default widths instead of <code>px</code> to support zooming on webpages.</p>
<p>Here’s a summary of breakpoints for some of the other frameworks:</p>
<ul>
<li><strong>Foundation</strong>: &lt;640px, ≥640px, ≥1200px</li>
<li><strong>Bulma</strong>: &lt;769px, ≥769px, ≥1024px, ≥1216px, and ≥1408px</li>
<li><strong>Semantic UI</strong>: &lt;768px, ≥768px, ≥992px, ≥1400px, ≥1920px</li>
<li><strong>Primer</strong>: &lt;544px, ≥544px, ≥768px, ≥1012px, ≥1280px</li>
<li><strong>UIKit</strong>: &lt;479px, ≥480px, ≥768px, ≥960px, ≥1200px</li>
</ul>
<h2 id="common-practices-breakpoints">Common practices for breakpoints</h2>
<p>Here are some important best practices to keep in mind regardless of which CSS framework you ultimately select:</p>
<ol>
<li><strong>Design for mobile first</strong>: With approximately <a href="https://www.statista.com/statistics/277125/share-of-website-traffic-coming-from-mobile-devices/#:~:text=Mobile accounts for approximately half,since the beginning of 2017.">59 percent of overall web traffic</a> coming from mobile devices, it makes sense to favor designing for mobile screens. Prioritizing design for mobile devices also ensures that key constraints are tackled early. However, having less space is more challenging; it compels designers to remove anything that isn’t necessary. Once you’re happy with the mobile layout, you can add and adjust for larger screens</li>
<li><strong>Use relative units</strong>: Using relative units, such as <code>em</code>, allows the media queries to respond appropriately when people zoom in on the webpage. Check out <a href="https://bradfrost.com/blog/post/7-habits-of-highly-effective-media-queries/">this article by Brad Frost</a> for some background on using relative units within media queries</li>
<li><strong>Avoid breakpoints that push devices into much smaller</strong> <strong>or</strong> <strong>larger ranges</strong>: One thing you‘ll notice about the default breakpoints chosen by CSS frameworks is that their cutoff for tablet-sized devices is around 768px. This is because older generations of iPad (now iPad mini) have a resolution of 768px x 1024px. If you have breakpoints with broader ranges, be mindful of these cutoff points. Usually, you’ll see 768px and above as the medium breakpoint category. If you’re basing breakpoints on content, this is less of a concern</li>
</ol>
<h2 id="really-need-breakpoints">Do you really need breakpoints?</h2>
<p>Some emerging techniques allow elements to scale proportionally and fluidly without using breakpoints. Sometimes this is referred to as fluid design.</p>
<p>Many fluid design techniques use mathematical functions available in CSS, such as <code>clamp()</code>, <code>min()</code>, and <code>max()</code>, along with dynamic units based on the viewport, such as <code>vh</code> and <code>vw</code>, to create expressions that will scale elements. If you would like to learn more about this, here’s an article on <a href="https://blog.logrocket.com/flexible-layouts-without-media-queries/">flexible layouts without media queries</a>.</p>
<p>One systematic approach to fluid design is Utopia. Utopia advocates for designers and developers to share a systematic approach to fluidity in responsive design. Instead of designing for any particular number of arbitrary breakpoints, you design a system within which elements scale proportionally and fluidly. This can help you to:</p>
<ul>
<li>Design and code minimally and elegantly</li>
<li>Streamline collaboration between design and development roles</li>
<li>Ensure visual harmony and consistency</li>
</ul>
<p>Utopia is like a fancy calculator that will spit out some CSS. Just input some dimensions and a preferred scale to determine the range of values.</p>
<p>For example, this is how the fluid space calculator looks:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="161101" data-permalink="https://blog.logrocket.com/css-breakpoints-responsive-design/attachment/utopia/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2023/03/utopia.png" data-orig-size="575,873" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Utopia fluidspace calculator" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2023/03/utopia.png?w=198" data-large-file="https://blog.logrocket.com/wp-content/uploads/2023/03/utopia.png?w=575" class="aligncenter wp-image-161101 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/utopia.png" alt="Utopia FluidSpace Calculator" width="575" height="873" srcset="https://blog.logrocket.com/wp-content/uploads/2023/03/utopia.png 575w, https://blog.logrocket.com/wp-content/uploads/2023/03/utopia.png?resize=198,300 198w" sizes="(max-width: 575px) 100vw, 575px" /></p>
<p>If you use <code>clamp()</code> in Utopia’s calculator, it will generate the following CSS snippet:</p>
<pre class="language-css hljs">/* @link https://utopia.fyi/space/calculator?c=320,18,1.2,1240,20,1.25,5,2,&amp;s=0.75|0.5,1.5|2|3|4|6,s-l&amp;g=s,l,xl,12 */

:root {
--space-2xs: clamp(0.56rem, calc(0.54rem + 0.11vw), 0.63rem);
--space-xs: clamp(0.88rem, calc(0.85rem + 0.11vw), 0.94rem);
--space-s: clamp(1.13rem, calc(1.08rem + 0.22vw), 1.25rem);
--space-m: clamp(1.69rem, calc(1.62rem + 0.33vw), 1.88rem);
--space-l: clamp(2.25rem, calc(2.16rem + 0.43vw), 2.50rem);
--space-xl: clamp(3.38rem, calc(3.24rem + 0.65vw), 3.75rem);
--space-2xl: clamp(4.50rem, calc(4.33rem + 0.87vw), 5.00rem);
--space-3xl: clamp(6.75rem, calc(6.49rem + 1.30vw), 7.50rem);

/* One-up pairs */
--space-2xs-xs: clamp(0.56rem, calc(0.43rem + 0.65vw), 0.94rem);
--space-xs-s: clamp(0.88rem, calc(0.74rem + 0.65vw), 1.25rem);
--space-s-m: clamp(1.13rem, calc(0.86rem + 1.30vw), 1.88rem);
--space-m-l: clamp(1.69rem, calc(1.40rem + 1.41vw), 2.50rem);
--space-l-xl: clamp(2.25rem, calc(1.73rem + 2.61vw), 3.75rem);
--space-xl-2xl: clamp(3.38rem, calc(2.81rem + 2.83vw), 5.00rem);
--space-2xl-3xl: clamp(4.50rem, calc(3.46rem + 5.22vw), 7.50rem);

/* Custom pairs */
--space-s-l: clamp(1.13rem, calc(0.65rem + 2.39vw), 2.50rem);
}
</pre>
<p>No media query required here. You can use these CSS variables in your padding and margins to create proportional spacing between elements throughout your website.</p>
<p>You can achieve fluidity with typography, spacing, and grid-based layouts. However, this may not be enough to make a completely responsive website.</p>
<h2 id="final-thoughts">Final thoughts</h2>
<p>Responsive design is challenging, but it’s getting easier. Nowadays, choosing breakpoints is less fraught; there’s wider acceptance that we are not trying to create a pixel-perfect rendering of a website across many screen sizes.</p>
<p>CSS has evolved a lot, and it is now possible to create fluid designs that adapt to the available space and require less intervention. It is still important to understand breakpoints, however — you will need them sometime!</p>
<p>Now you can choose breakpoints according to the content and the design task in front of you rather than follow a prescribed path. You have the option of implementing breakpoints according to the viewport (media queries) or according to blocks of elements (container queries). This will simplify the process of creating responsive designs in the long run.</p>
<p>As of this writing, container queries are still new, so we will need to be good students and shift our habits to embrace this multi-paradigm landscape.</p>
</html>
<p>The post <a href="https://blog.logrocket.com/css-breakpoints-responsive-design/">CSS breakpoints for responsive design</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.logrocket.com/css-breakpoints-responsive-design/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">161039</post-id>	</item>
		<item>
		<title>A deep dive into the CSS float property</title>
		<link>https://blog.logrocket.com/deep-dive-css-float-property/</link>
					<comments>https://blog.logrocket.com/deep-dive-css-float-property/#respond</comments>
		
		<dc:creator><![CDATA[Rob O'Leary]]></dc:creator>
		<pubDate>Fri, 19 Aug 2022 14:30:14 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[css]]></category>
		<guid isPermaLink="false">https://blog.logrocket.com/?p=128149</guid>

					<description><![CDATA[<p>Let's discuss the history of CSS float and show how it can be used in modern web design to achieve creative text layouts.</p>
<p>The post <a href="https://blog.logrocket.com/deep-dive-css-float-property/">A deep dive into the CSS &lt;code&gt;float&lt;/code&gt; property</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[<!DOCTYPE html>
<html><p>CSS <code><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/float" target="_blank" rel="noopener">float</a></code> is a positioning property that places an element to the left side or right side of its container and allows inline elements to wrap around it. In the past, <code>float</code> gained a bad reputation as it was misused for page layouts. This has led to some developers questioning whether it is deprecated now, or should be avoided altogether!</p>
<img loading="lazy" decoding="async" width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2022/08/deep-dive-css-float-property-nocdn.png" class="attachment-full size-full wp-post-image" alt="CSS Logo Over Lake Background" srcset="https://blog.logrocket.com/wp-content/uploads/2022/08/deep-dive-css-float-property-nocdn.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/08/deep-dive-css-float-property-nocdn.png?resize=300,200 300w" sizes="(max-width: 730px) 100vw, 730px" data-attachment-id="128151" data-permalink="https://blog.logrocket.com/deep-dive-css-float-property/attachment/deep-dive-css-float-property-nocdn/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/08/deep-dive-css-float-property-nocdn.png" data-orig-size="730,487" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Deep dive into CSS float property" data-image-description data-image-caption data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/08/deep-dive-css-float-property-nocdn.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/08/deep-dive-css-float-property-nocdn.png?w=730"><p>CSS <code>float</code> is still relevant. We should just use it in the right context! This article discusses the history of CSS float and demonstrates several ways that <code>float</code> can be used in modern web design to achieve creative text layouts and stunning design elements.</p>
<h2 id="contents">Contents</h2>
<ul>
<li><a href="#a-brief-history-of-float">A brief history of float</a></li>
<li><a href="#using-float-correctly">Using float correctly</a></li>
<li><a href="#visualizing-a-floated-element">Visualizing a floated element</a></li>
<li><a href="#understanding-the-quirks-of-floats">Understanding the quirks of floats</a></li>
<li><a href="#opting-out-of-css-floated-elements-with-clear">Opting out of CSS floated elements with clear</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#css-float-example-with-clear-pull-quote">CSS float example with clear: Pull quote</a></li>
<li><a href="#css-float-example-with-clear-drop-cap">CSS float example with clear: Drop cap</a></li>
</ul>
</li>
<li><a href="#getting-creative-with-shape-outside">Getting creative with shape-outside</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#css-float-example-with-shape-outside-funnel-text">CSS float example with shape-outside: Funnel text</a></li>
</ul>
</li>
<li><a href="#editing-css-shapes">Editing CSS shapes</a></li>
</ul>
<h2 id="a-brief-history-of-float">A brief history of <code>float</code></h2>
<p>The <code>float</code> property was introduced to CSS to allow web developers to create magazine-style layouts, such as having an image positioned inside a column of text with the text wrapping around it, similar to the layout shown below.</p>
<figure id="attachment_128163" aria-describedby="caption-attachment-128163" style="width: 714px" class="wp-caption aligncenter"><img loading="lazy" decoding="async" data-attachment-id="128163" data-permalink="https://blog.logrocket.com/deep-dive-css-float-property/attachment/image-within-text/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/08/image-within-text.png" data-orig-size="714,574" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Image within text" data-image-description="" data-image-caption="&lt;p&gt;Example using float with an image within a column of text.&lt;/p&gt;
" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/08/image-within-text.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/08/image-within-text.png?w=714" class="size-full wp-image-128163" src="https://blog.logrocket.com/wp-content/uploads/2022/08/image-within-text.png" alt="Image Within Text" width="714" height="574" srcset="https://blog.logrocket.com/wp-content/uploads/2022/08/image-within-text.png 714w, https://blog.logrocket.com/wp-content/uploads/2022/08/image-within-text.png?resize=300,241 300w" sizes="(max-width: 714px) 100vw, 714px" /><figcaption id="caption-attachment-128163" class="wp-caption-text">Example using <code>float</code> with an image within a column of text.</figcaption></figure>
<p>The <code>float</code> property was introduced when CSS was a baby. It’s hard to tell when exactly, but for sure <code>float</code> was in browsers in 2001! At that time, CSS was very limited! When people wanted to make full-page layouts, often they reached for <code>float</code>. It was the wild west back then!</p>
<figure id="attachment_128165" aria-describedby="caption-attachment-128165" style="width: 730px" class="wp-caption aligncenter"><img loading="lazy" decoding="async" data-attachment-id="128165" data-permalink="https://blog.logrocket.com/deep-dive-css-float-property/attachment/css-grid-example/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/08/css-grid-example.png" data-orig-size="730,636" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="CSS grid example" data-image-description="" data-image-caption="&lt;p&gt;Flexbox or CSS Grid are recommended for full-page layouts like these.&lt;/p&gt;
" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/08/css-grid-example.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/08/css-grid-example.png?w=730" class="size-full wp-image-128165" src="https://blog.logrocket.com/wp-content/uploads/2022/08/css-grid-example.png" alt="CSS Grid Example" width="730" height="636" srcset="https://blog.logrocket.com/wp-content/uploads/2022/08/css-grid-example.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/08/css-grid-example.png?resize=300,261 300w" sizes="(max-width: 730px) 100vw, 730px" /><figcaption id="caption-attachment-128165" class="wp-caption-text">Flexbox or CSS Grid are recommended for full-page layouts like these.</figcaption></figure>
<p>In some ways, using <code>float</code> for layouts worked. However, tears usually followed because this meant using <code>float</code> beyond its intended purpose, leading to complicated code and layout issues that were hard to manage as the website evolved.</p>
<p>Nowadays, just don’t use <code>float</code> for page layouts! You should regard using floats in this way as a <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Legacy_Layout_Methods" target="_blank" rel="noopener">legacy technique</a>. <a href="https://blog.logrocket.com/flexbox-vs-css-grid/" target="_blank" rel="noopener">Flexbox and CSS Grid are vastly superior options for making complex page layouts</a>.</p>
<h2 id="using-float-correctly">Using <code>float</code> correctly</h2>
<p>Use <code>float</code> when you want to pull an element to the side of a containing element while allowing other content to freely flow around it. There aren’t any other CSS methods for accomplishing this, so don’t be afraid to use it!</p>
<p>The valid values for <code>float</code> are a single keyword from the following list:</p>
<ul>
<li><code>left</code>: positions the element on the left side of its containing block</li>
<li><code>right</code>: positions the element on the right side of its containing block</li>
<li><code>none</code>: does not float the element</li>
<li><code>inline-start</code> : positions the element on the first inline side of its containing block; this is the left side with left-to-right scripts and the right side with right-to-left scripts</li>
<li><code>inline-end</code>: positions the element on the last inline side of its containing block; this is the right side with left-to-right scripts and the left side with right-to-left scripts</li>
</ul>
<p>The values <code>inline-start</code> and <code>inline-end</code> are relatively new. They are called <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties" target="_blank" rel="noopener">logical values</a>. We should favor using these now. The <a href="https://caniuse.com/css-logical-props" target="_blank" rel="noopener">browser support is good</a>, and these logical values create more inclusive designs.</p>
<p>Logical values enable us to create the correct layout for languages with different writing directions with a single value. The most commonly used logical values are <code>left</code> and <code>right</code>. The examples that follow feature less commonly used logical values to illustrate how these can be used in different use cases.</p>
<p>Let’s implement the example from earlier. Let’s create a simple <code>article</code> that has an image that is floated to the start of the second paragraph.</p>
<pre class="language-xml hljs">&lt;article&gt;
      &lt;h1&gt;England youngsters reaping the rewards of a pathway at Under-19 Euros&lt;/h1&gt;
      &lt;p&gt;
        Lorem ipsum dolor sit amet consectetur adipisicing elit. Inventore,
        voluptatem incidunt voluptas nobis placeat facilis commodi laboriosam
        similique id veritatis molestias, dignissimos praesentium, autem tenetur
        consequatur beatae itaque. Ipsa, iure.
      &lt;/p&gt;
      &lt;img src="img/players.jpg" alt="generic photo of men playing football" /&gt;
      &lt;p&gt;
        Mollitia delectus sit expedita nobis, nostrum est porro soluta earum
        accusamus! Architecto quae quas aliquid voluptatum rem alias voluptate
        quo quidem, delectus adipisci ipsum sunt maxime officia esse magni
        inventore?
      &lt;/p&gt;
      &lt;!--more paragraphs --&gt;
&lt;/article&gt;
</pre>
<p>We just need to add the following style to the <code>img</code>:</p>
<pre class="language-css hljs">img {
    float: inline-start;
}
</pre>
<p>By default, there is no space between the image and the text. You’ll probably want to add a margin to provide a clear separation between the image and text. I added <code>margin-inline-end: 4px;</code>.</p>
<p class="codepen" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="300" data-default-tab="result" data-slug-hash="xxWxgje" data-user="robatronbobby">See the Pen <a href="https://codepen.io/robatronbobby/pen/xxWxgje"><br>
`float: inline-start;` article (english)</a> by rob2 (<a href="https://codepen.io/robatronbobby">@robatronbobby</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<p>If we used the exact same CSS but with Arabic content in our HTML document, it will be aligned to the right instead of the left:</p>
<p class="codepen" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="300" data-default-tab="result" data-slug-hash="ExExZZe" data-user="robatronbobby">See the Pen <a href="https://codepen.io/robatronbobby/pen/ExExZZe"><br>
`float: inline-start;` article (arabic)</a> by rob2 (<a href="https://codepen.io/robatronbobby">@robatronbobby</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<p>Fairly simple, right?</p>
<p>The common uses of <code>float</code> should truly be this simple. However, there are some quirks associated with using <code>float</code> that you may encounter in different scenarios. By deepening our understanding of this property, we can prevent confusing outcomes!</p>
<h2 id="visualizing-a-floated-element">Visualizing a floated element</h2>
<p>Let’s be crystal clear about how floated elements behave.</p>
<p>Taking our previous example, the English version. The element with the <code>float</code> set on it (the <code>img</code> element in this case) is taken out of the normal layout flow of the document and stuck to the left side of its parent container (the <code>article</code>, in this case).</p>
<p>Any content that comes below the floated element in the normal layout flow will now wrap around the element instead. In doing so, it will fill up the entire space to the right of the floated element. Then, it stops and the normal layout flow continues.</p>
<p>To illustrate this, let’s modify our example. We’ll add some highlighting to the affected paragraphs to demonstrate the document flow, like so:</p>
<figure id="attachment_128168" aria-describedby="caption-attachment-128168" style="width: 730px" class="wp-caption aligncenter"><img loading="lazy" decoding="async" data-attachment-id="128168" data-permalink="https://blog.logrocket.com/deep-dive-css-float-property/attachment/image-padding/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/08/image-padding.png" data-orig-size="730,386" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Image padding" data-image-description="" data-image-caption="&lt;p&gt;Float image demo with padding added to the image and highlighted paragraph text.&lt;/p&gt;
" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/08/image-padding.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/08/image-padding.png?w=730" class="size-full wp-image-128168" src="https://blog.logrocket.com/wp-content/uploads/2022/08/image-padding.png" alt="Image Padding" width="730" height="386" srcset="https://blog.logrocket.com/wp-content/uploads/2022/08/image-padding.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/08/image-padding.png?resize=300,159 300w" sizes="(max-width: 730px) 100vw, 730px" /><figcaption id="caption-attachment-128168" class="wp-caption-text">Float image demo with padding added to the image and highlighted paragraph text.</figcaption></figure>
<p>Here is <a href="https://codepen.io/robatronbobby/pen/vYROzBo" target="_blank" rel="noopener">the CodePen for this example</a>.</p>
<p>In this example, we added some <code>padding</code> to the <code>img</code> to create additional space around it, so that you can see the full dimensions of the paragraphs. By adding <code>background-color:orange;</code> to the second, third, and fourth paragraphs, it’s more obvious that they take up the full width of the containing <code>article</code>. However, the paragraph content is being pushed to the opposite side by the floating image.</p>
<h2 id="understanding-the-quirks-of-floats">Understanding the quirks of floats</h2>
<p>Something that may seem unusual about <code>float</code> is that a parent containing floated elements will collapse. To understand what I mean by this, let’s make a rather contrived example. Let’s create a <code>section</code> that contains two floated elements.</p>
<p>Here, two <code>img</code> floated to the start of the container:</p>
<pre class="language-xml hljs">&lt;section&gt;
  &lt;img src="img/1.jpg" alt="generic photo of footballers duelling for ball"&gt;
  &lt;img src="img/2.jpg" alt="pitch overview"&gt;
&lt;/section&gt;

&lt;style&gt;
  img {
    width: 300px;
    float: inline-start;
    margin-inline-end: 10px;
  }
&lt;/style&gt;
</pre>
<p>If we do not add anything more to the <code>section</code>, it will have a height of zero!</p>
<p>Right now, it looks like this:</p>
<figure id="attachment_128170" aria-describedby="caption-attachment-128170" style="width: 730px" class="wp-caption aligncenter"><img loading="lazy" decoding="async" data-attachment-id="128170" data-permalink="https://blog.logrocket.com/deep-dive-css-float-property/attachment/secton-element-with-two-images/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/08/secton-element-with-two-images.png" data-orig-size="730,398" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Section element with two images" data-image-description="" data-image-caption="&lt;p&gt;A section element containing two floated images.&lt;/p&gt;
" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/08/secton-element-with-two-images.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/08/secton-element-with-two-images.png?w=730" class="size-full wp-image-128170" src="https://blog.logrocket.com/wp-content/uploads/2022/08/secton-element-with-two-images.png" alt="Section Element With Two Images" width="730" height="398" srcset="https://blog.logrocket.com/wp-content/uploads/2022/08/secton-element-with-two-images.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/08/secton-element-with-two-images.png?resize=300,164 300w" sizes="(max-width: 730px) 100vw, 730px" /><figcaption id="caption-attachment-128170" class="wp-caption-text">A <code>section</code> element containing two floated images.</figcaption></figure>
<p>If you inspect the <code>section</code> with the browser’s DevTools, you can confirm the dimensions shown in the <strong>Layout</strong> tab: 900px width x 0px height.</p>
<figure id="attachment_128172" aria-describedby="caption-attachment-128172" style="width: 730px" class="wp-caption aligncenter"><img loading="lazy" decoding="async" data-attachment-id="128172" data-permalink="https://blog.logrocket.com/deep-dive-css-float-property/attachment/section-dimensions/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/08/section-dimensions.png" data-orig-size="730,286" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Section dimensions" data-image-description="" data-image-caption="&lt;p&gt;Section dimensions shown in the DevTools Layout tab.&lt;/p&gt;
" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/08/section-dimensions.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/08/section-dimensions.png?w=730" class="size-full wp-image-128172" src="https://blog.logrocket.com/wp-content/uploads/2022/08/section-dimensions.png" alt="Section Dimensions" width="730" height="286" srcset="https://blog.logrocket.com/wp-content/uploads/2022/08/section-dimensions.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/08/section-dimensions.png?resize=300,118 300w" sizes="(max-width: 730px) 100vw, 730px" /><figcaption id="caption-attachment-128172" class="wp-caption-text">Section dimensions shown in the DevTools Layout tab.</figcaption></figure>
<p>However, it is very unlikely that you will ever create a parent that has only floated elements! So, why do you need to know this?</p>
<p>Well, we live in a world where <a href="https://en.wikipedia.org/wiki/Murphy's_law" target="_blank" rel="noopener">Murphy’s law</a>, “anything that can go wrong will go wrong”, proves to be true more often than anyone would like! Things can happen, and if they do, you may be scratching your head wondering why your layout looks weird!</p>
<h2 id="opting-out-of-css-floated-elements-with-clear">Opting out of CSS floated elements with <code>clear</code></h2>
<p>The CSS <code><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clear" target="_blank" rel="noopener">clear</a></code> property is a complementary property to <code>float</code>. You can use it when you want some elements to be free from the influence of floated elements. You can set an element to be “cleared” on one side, or both sides. The cleared element will be moved below any floating elements that precede it.</p>
<p>The <code>clear</code> property has a similar set of values as <code>float</code>:</p>
<ul>
<li><code>none</code>: the element is not moved down to clear past floating elements</li>
<li><code>left</code>: the element is moved down to clear past left floats</li>
<li><code>right</code>: the element is moved down to clear past right floats</li>
<li><code>both</code>: the element is moved down to clear past both left and right floats</li>
<li><code>inline-start</code>: the element is moved down to clear floats on the start side of its containing block; that is, the left floats on left-to-right scripts and the right floats on right-to-left scripts</li>
<li><code>inline-end</code>: the element is moved down to clear floats on the end side of its containing block; that is, the right floats on left-to-right scripts and the left floats on right-to-left scripts</li>
</ul>
<p>As an example, below is a website article page featuring some floated images. You’ll notice there’s a floated image towards the bottom of the article, overlapping with the webpage’s footer.</p>
<figure id="attachment_128174" aria-describedby="caption-attachment-128174" style="width: 730px" class="wp-caption aligncenter"><img loading="lazy" decoding="async" data-attachment-id="128174" data-permalink="https://blog.logrocket.com/deep-dive-css-float-property/attachment/second-floated-image-overlaps-footer/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/08/second-floated-image-overlaps-footer.png" data-orig-size="730,685" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Second floated image overlaps footer" data-image-description="" data-image-caption="&lt;p&gt;A second floated image overlaps with the footer.&lt;/p&gt;
" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/08/second-floated-image-overlaps-footer.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/08/second-floated-image-overlaps-footer.png?w=730" class="size-full wp-image-128174" src="https://blog.logrocket.com/wp-content/uploads/2022/08/second-floated-image-overlaps-footer.png" alt="Second Floated Image Overlaps Footer" width="730" height="685" srcset="https://blog.logrocket.com/wp-content/uploads/2022/08/second-floated-image-overlaps-footer.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/08/second-floated-image-overlaps-footer.png?resize=300,282 300w" sizes="(max-width: 730px) 100vw, 730px" /><figcaption id="caption-attachment-128174" class="wp-caption-text">A second floated image overlaps with the footer.</figcaption></figure>
<p>To fix this particular case, we can add <code>clear: inline-end;</code> or <code>clear: right;</code> to the <code>footer</code>.</p>
<p>If we want to prevent this from occurring completely, we can use <code>clear:both;</code> instead.</p>
<pre class="language-css hljs">.no-floats {
    clear:both;
}
</pre>
<p>To see this code in action, check out the below CodePen. You can toggle the <code>no-floats</code> class on the <code>footer</code> to see its effect.</p>
<p class="codepen" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="300" data-default-tab="result" data-slug-hash="BarjmPE" data-user="robatronbobby">See the Pen <a href="https://codepen.io/robatronbobby/pen/BarjmPE"><br>
`clear` example</a> by rob2 (<a href="https://codepen.io/robatronbobby">@robatronbobby</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<p>Now, let’s look at some additional examples.</p>
<h3 id="css-float-example-with-clear-pull-quote">CSS <code>float</code> example with <code>clear</code>: Pull quote</h3>
<p>Perhaps the most common example is a pull quote. A pull quote is where an interesting quote is taken from the text and featured as a large inset quote. News publications and glossy magazines tend to do this to give a flavor of what the article is discussing in different sections.</p>
<p class="codepen" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="300" data-default-tab="result" data-slug-hash="vYRYZoK" data-user="robatronbobby">See the Pen <a href="https://codepen.io/robatronbobby/pen/vYRYZoK"><br>
Pull quote</a> by rob2 (<a href="https://codepen.io/robatronbobby">@robatronbobby</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<h3 id="css-float-example-with-clear-drop-cap">CSS <code>float</code> example with <code>clear</code>: Drop cap</h3>
<p>In some books and magazine layouts, you may find a unique style applied to the initial letter of the first word in the paragraph. It may be larger than the surrounding text and styled differently. Sometimes, this letter is referred to as a drop cap.</p>
<p>In CSS, the <code><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::first-letter" target="_blank" rel="noopener">::first-letter</a></code> pseudo-element may be used to style the first letter of an element. If we create a larger initial letter, we may want to float it to the beginning of the block and have subsequent lines of text flow around it.</p>
<p>Below is an example, where we make the initial letter much bigger than the text rest of the paragraph and float it to the beginning of the block.</p>
<p class="codepen" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="300" data-default-tab="result" data-slug-hash="zYWYpGQ" data-user="robatronbobby">See the Pen <a href="https://codepen.io/robatronbobby/pen/zYWYpGQ"><br>
Initial letter / Drop cap example</a> by rob2 (<a href="https://codepen.io/robatronbobby">@robatronbobby</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<p>To appreciate how this type of styling can elevate a layout, look at the drops caps in this <a href="https://www.behance.net/gallery/2159303/Travel-Magazine" target="_blank" rel="noopener">Travel Magazine design by Bartosz Kwiecień</a>:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="128176" data-permalink="https://blog.logrocket.com/deep-dive-css-float-property/attachment/drop-caps-example/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/08/drop-caps-example.jpeg" data-orig-size="730,350" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Drop caps example" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/08/drop-caps-example.jpeg?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/08/drop-caps-example.jpeg?w=730" class="aligncenter size-full wp-image-128176" src="https://blog.logrocket.com/wp-content/uploads/2022/08/drop-caps-example.jpeg" alt="Drop Caps Example" width="730" height="350" srcset="https://blog.logrocket.com/wp-content/uploads/2022/08/drop-caps-example.jpeg 730w, https://blog.logrocket.com/wp-content/uploads/2022/08/drop-caps-example.jpeg?resize=300,144 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<h2 id="getting-creative-with-shape-outside">Getting creative with <code>shape-outside</code></h2>
<p>So far, all of our examples have involved floated elements that have a rectangular shape. Elements follow the <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model" target="_blank" rel="noopener">box model</a> and have rectangular bounding boxes. However, we are not confined to a single shape; with the <code><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/shape-outside" target="_blank" rel="noopener">shape-outside</a></code> property, we can create all kinds of cool shapes that can affect the text flow!</p>
<p>We can provide an image as the value for <code>shape-outside</code>. The float shape is computed based on the alpha channel of the specified image, which is defined by the <code><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/shape-image-threshold" target="_blank" rel="noopener">shape-image-threshold</a></code>. The default value is 0.0 (fully transparent).</p>
<p>For this reason, it really only makes sense to use <code>shape-outside</code> with image formats that support transparency such as PNG, SVG, and WebP. Otherwise, we’ll still get a rectangular shape!</p>
<p>For example, let’s say we have an SVG image that has a single <code>path</code> that is a red star with a transparent background. Here’s what using <code>shape-outside</code> with this image looks like.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="128179" data-permalink="https://blog.logrocket.com/deep-dive-css-float-property/attachment/shape-outside-with-image/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/08/shape-outside-with-image.png" data-orig-size="730,272" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Shape-outside with image" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/08/shape-outside-with-image.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/08/shape-outside-with-image.png?w=730" class="aligncenter size-full wp-image-128179" src="https://blog.logrocket.com/wp-content/uploads/2022/08/shape-outside-with-image.png" alt="Shape-outside With Image" width="730" height="272" srcset="https://blog.logrocket.com/wp-content/uploads/2022/08/shape-outside-with-image.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/08/shape-outside-with-image.png?resize=300,112 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<pre class="language-css hljs">.star {
    width: 250px;
    float: left;
    shape-outside: url("https://upload.wikimedia.org/wikipedia/commons/3/34/Red_star.svg");
    shape-margin: 6px;
}
</pre>
<p>Here, I used <code>float: left;</code> because, unfortunately, Chrome (Linux) seems to have an issue with using <code>float: inline-start;</code> and <code>shape-outside</code> together.</p>
<p>There is also a <code><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/shape-margin" target="_blank" rel="noopener">shape-margin</a></code> property that enables us to adjust the margin around the shape.</p>
<p>We can provide a <code><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape" target="_blank" rel="noopener">&lt;basic-shape&gt;</a></code> as the value to the <code>shape-outside</code> property with the following functions: <code><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape/inset" target="_blank" rel="noopener">inset()</a>()</code>, <code><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape/circle" target="_blank" rel="noopener">circle()</a></code>, <code><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape/ellipse" target="_blank" rel="noopener">ellipse()</a></code>, <code><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape/polygon" target="_blank" rel="noopener">polygon()</a></code>, or <code><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/path" target="_blank" rel="noopener">path()</a></code>. These are defined in the <a href="https://www.w3.org/TR/css-shapes/" target="_blank" rel="noopener">CSS Shapes Module Level 1 specification</a>. If you’ve ever used the <code>clip-path</code> property, then you’ve also used these functions.</p>
<p>Let’s say we want to create a <code>div</code> that is a grey circle and have the text flow around it, like in the image below. We can create this by using <code>float</code> together with <code>shape-outside: circle()</code>.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="128181" data-permalink="https://blog.logrocket.com/deep-dive-css-float-property/attachment/sjape-outside-circle/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/08/sjape-outside-circle.png" data-orig-size="730,259" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Shape-outside circle" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/08/sjape-outside-circle.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/08/sjape-outside-circle.png?w=730" class="aligncenter size-full wp-image-128181" src="https://blog.logrocket.com/wp-content/uploads/2022/08/sjape-outside-circle.png" alt="Shape-outside Circle" width="730" height="259" srcset="https://blog.logrocket.com/wp-content/uploads/2022/08/sjape-outside-circle.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/08/sjape-outside-circle.png?resize=300,106 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>Here’s the CSS to create the grey circle with the flowing text:</p>
<pre class="language-css hljs">.circle {
        border-radius: 50%;
        height: 200px;
        width: 200px;
        background-color: grey;
        float: right;
        shape-outside: circle();
}
</pre>
<p>You can omit the values for <code>circle()</code>. In our case, the default values for the <code>&lt;radius&gt;</code> and <code>&lt;position&gt;</code> parameters give us the desired result. The default <code>&lt;position&gt;</code> is the center of the circle.</p>
<p>Here’s a CodePen featuring the red star and grey circle examples.</p>
<p class="codepen" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="300" data-default-tab="result" data-slug-hash="XWEWzGO" data-user="robatronbobby">See the Pen <a href="https://codepen.io/robatronbobby/pen/XWEWzGO"><br>
shape-outside examples</a> by rob2 (<a href="https://codepen.io/robatronbobby">@robatronbobby</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<h3 id="css-float-example-with-shape-outside-funnel-text">CSS <code>float</code> example with <code>shape-outside</code>: Funnel text</h3>
<p>Another interesting example of using <code>shape-outside</code> is to have a floating element on both the left and right to funnel the text.</p>
<p>For example, you could have two hands almost cupping the text. We could float the image of a hand to each side of the paragraph and give the paragraph a triangular shape using <code>shape-outside</code> with the <code>polygon()</code> function.</p>
<pre class="language-css hljs">&lt;img class="left" src="hand.svg"/&gt;
&lt;img class="right" src="hand.svg"/&gt;
&lt;p&gt;
  Sometimes a web page’s text content appears to be
  funneling your attention towards a spot on the page
  to drive you to follow a particular link. Sometimes
  you don’t notice.
&lt;/p&gt;

&lt;style&gt;
.left {
  shape-outside: polygon(0 0, 100% 100%, 0 100%);
  float: left;
  height: 6em;
}

.right {
  shape-outside: polygon(100% 0, 100% 100%, 0 100%);
  float: right;
  height: 6em;
  transform: rotateY(180deg);
}

p {
  text-align: center;
}
&lt;/style&gt;
</pre>
<figure id="attachment_128183" aria-describedby="caption-attachment-128183" style="width: 643px" class="wp-caption aligncenter"><img loading="lazy" decoding="async" data-attachment-id="128183" data-permalink="https://blog.logrocket.com/deep-dive-css-float-property/attachment/shape-outside-both-sides/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/08/shape-outside-both-sides.png" data-orig-size="643,140" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Shape-outside both sides" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/08/shape-outside-both-sides.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/08/shape-outside-both-sides.png?w=643" class="wp-image-128183 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/08/shape-outside-both-sides.png" alt="Shape-outside Both Sides" width="643" height="140" srcset="https://blog.logrocket.com/wp-content/uploads/2022/08/shape-outside-both-sides.png 643w, https://blog.logrocket.com/wp-content/uploads/2022/08/shape-outside-both-sides.png?resize=300,65 300w" sizes="(max-width: 643px) 100vw, 643px" /><figcaption id="caption-attachment-128183" class="wp-caption-text">Using a floated element with <code>shape-outside</code> on both sides.</figcaption></figure>
<p>Here is the accompanying CodePen:</p>
<p class="codepen" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="300" data-default-tab="result" data-slug-hash="MWVKrjm" data-user="robatronbobby">See the Pen <a href="https://codepen.io/robatronbobby/pen/MWVKrjm"><br>
Text funnelling with float and shape-outside</a> by rob2 (<a href="https://codepen.io/robatronbobby">@robatronbobby</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<h2 id="editing-css-shapes">Editing CSS shapes</h2>
<p>If you’re wondering how to edit CSS shapes, I recommend using Firefox DevTools. If you click on the <code>shape-outside</code> property, you’ll see a blue “mesh” symbol next to it, and it will display the outline of the shape on the page (as shown below).</p>
<p><img loading="lazy" decoding="async" data-attachment-id="128185" data-permalink="https://blog.logrocket.com/deep-dive-css-float-property/attachment/outline-of-shape-highlighted/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/08/outline-of-shape-highlighted.png" data-orig-size="730,549" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Outline of shape highlighted" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/08/outline-of-shape-highlighted.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/08/outline-of-shape-highlighted.png?w=730" class="aligncenter size-full wp-image-128185" src="https://blog.logrocket.com/wp-content/uploads/2022/08/outline-of-shape-highlighted.png" alt="Outline of Shape Highlighted" width="730" height="549" srcset="https://blog.logrocket.com/wp-content/uploads/2022/08/outline-of-shape-highlighted.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/08/outline-of-shape-highlighted.png?resize=300,226 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>You can move the control points (the circles on the path) around and edit them like you would a path in a graphics editor. Chrome DevTools does not offer the same feature, as far as I know!</p>
<p>If you want more examples, Kristopher Van Sant has a <code><a href="https://codepen.io/collection/XGPKKp" target="_blank" rel="noopener">shape-outside</a></code> <a href="https://codepen.io/collection/XGPKKp" target="_blank" rel="noopener">CodePen collection</a> that is bursting with examples.</p>
<p>To see how a unique shape could be employed in a complete layout, check out this magazine layout, again from <a href="https://www.behance.net/gallery/2159303/Travel-Magazine" target="_blank" rel="noopener">Bartosz Kwiecień</a>.</p>
<figure id="attachment_128187" aria-describedby="caption-attachment-128187" style="width: 730px" class="wp-caption aligncenter"><img loading="lazy" decoding="async" data-attachment-id="128187" data-permalink="https://blog.logrocket.com/deep-dive-css-float-property/attachment/travel-magazine/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/08/travel-magazine.jpeg" data-orig-size="730,350" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Travel magazine" data-image-description="" data-image-caption="&lt;p&gt;Travel Magazine design by Bartosz Kwiecień.&lt;/p&gt;
" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/08/travel-magazine.jpeg?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/08/travel-magazine.jpeg?w=730" class="size-full wp-image-128187" src="https://blog.logrocket.com/wp-content/uploads/2022/08/travel-magazine.jpeg" alt="Travel Magazine" width="730" height="350" srcset="https://blog.logrocket.com/wp-content/uploads/2022/08/travel-magazine.jpeg 730w, https://blog.logrocket.com/wp-content/uploads/2022/08/travel-magazine.jpeg?resize=300,144 300w" sizes="(max-width: 730px) 100vw, 730px" /><figcaption id="caption-attachment-128187" class="wp-caption-text"><a href="https://www.behance.net/gallery/2159303/Travel-Magazine" target="_blank" rel="noopener">Travel Magazine design by Bartosz Kwiecień.</a></figcaption></figure>
<p>As of 2022, <a href="http://caniuse.com/#feat=css-shapes" target="_blank" rel="noopener">95% of browsers worldwide</a> support the <code>shape-outside</code> property. So, don’t be afraid to give it a shot!</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p><code>float</code> seems to be underutilized in today’s frontend development arena. Maybe, it is a victim of the past, when it was often misused for page layouts, and things got conflated to “don’t use float”. I hope that I’ve shown you that <code>float</code> is still relevant and can be used to create intriguing text layouts. I would love to see people use the <code>float</code> property more frequently to bring more creativity to the web.</p>
</html>
<p>The post <a href="https://blog.logrocket.com/deep-dive-css-float-property/">A deep dive into the CSS &lt;code&gt;float&lt;/code&gt; property</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.logrocket.com/deep-dive-css-float-property/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">128149</post-id>	</item>
		<item>
		<title>Testing a Svelte app with Vitest</title>
		<link>https://blog.logrocket.com/testing-svelte-app-vitest/</link>
					<comments>https://blog.logrocket.com/testing-svelte-app-vitest/#respond</comments>
		
		<dc:creator><![CDATA[Rob O'Leary]]></dc:creator>
		<pubDate>Wed, 22 Jun 2022 14:30:56 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[svelte]]></category>
		<guid isPermaLink="false">https://blog.logrocket.com/?p=120410</guid>

					<description><![CDATA[<p>Vitest has become the first choice dev tool for Svelte. Learn about its features and integrations and how it compares to Jest.</p>
<p>The post <a href="https://blog.logrocket.com/testing-svelte-app-vitest/">Testing a Svelte app with Vitest</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[<!DOCTYPE html>
<html><p>Vite has become the lynchpin of frontend toolchains. This build tool also has been adopted by <a href="https://kit.svelte.dev/" target="_blank" rel="noopener">SvelteKit</a>, which is the official application framework for <a href="https://svelte.dev/" target="_blank" rel="noopener">Svelte</a>. So, I think it is fair to say that Vite has become the first choice dev tool for Svelte.</p>
<img loading="lazy" decoding="async" width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2022/06/testing-svelte-app-vitest-nocdn.png" class="attachment-full size-full wp-post-image" alt="Svelte Logo" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/testing-svelte-app-vitest-nocdn.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/testing-svelte-app-vitest-nocdn.png?resize=300,200 300w" sizes="(max-width: 730px) 100vw, 730px" data-attachment-id="120412" data-permalink="https://blog.logrocket.com/testing-svelte-app-vitest/attachment/testing-svelte-app-vitest-nocdn/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/testing-svelte-app-vitest-nocdn.png" data-orig-size="730,487" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Testing Svelte app Vitest" data-image-description data-image-caption data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/testing-svelte-app-vitest-nocdn.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/testing-svelte-app-vitest-nocdn.png?w=730"><p><a href="https://vitest.dev/" target="_blank" rel="noopener">Vitest</a> is a relatively new, <a href="https://vitejs.dev/" target="_blank" rel="noopener">Vite</a>-native unit testing framework. It holds the <a href="https://blog.logrocket.com/testing-vite-minimal-config-using-vitest/" target="_blank" rel="noopener">promise of being Vite’s ideal testing partner,</a> but does it deliver?</p>
<p>In this article, I’ll explore the following:</p>
<ul>
<li><a href="#testing-frameworks-svelte-vite">What issues are encountered using existing testing frameworks with Vite and Svelte?</a></li>
<li><a href="#writing-tests-vitest">How easy is it to write tests with Vitest?</a></li>
<li><a href="#migrating-project-jest-vitest">What’s the experience like when switching from Jest to Vitest on an existing project?</a></li>
<li><a href="#performance-vitests-features">How do some of Vitest’s features perform, and is it really production-ready?</a></li>
<li><a href="#using-vitest-sveltekit">How about SvelteKit? Is anything extra required to use Vitest with SvelteKit?</a></li>
<li><a href="#using-vitest-related-integrations">How well do Vitest’s related integrations work (web UI, IDE extensions)?</a></li>
</ul>
<h2 id="testing-frameworks-svelte-vite">Testing frameworks for Svelte and Vite</h2>
<p>Currently, Svelte does not recommend a particular unit testing framework, and it does not advocate for a particular testing strategy. The official site provides some <a href="https://svelte.dev/faq#how-do-i-test-svelte-apps" target="_blank" rel="noopener">basic advice</a>. In theory, you can use any JavaScript unit testing library you like for testing, and your frontend toolchain will eventually spit out a vanilla JavaScript bundle, right?</p>
<p>Well, this is the crux of the problem; you are dealing with different permutations of syntaxes and formats related to JavaScript. These formats are transformed into another format by your toolchain. It can be tricky to integrate tools into a toolchain when they are not speaking the same syntax, and are not cooperating well.</p>
<p>Vite provides a fast dev environment by using native ECMAScript Modules (ESM) to provide on-demand file serving. It performs on-the-fly atomic translation of Svelte to JavaScript. Many unit testing frameworks were built using <a href="https://en.wikipedia.org/wiki/CommonJS" target="_blank" rel="noopener">CommonJS modules,</a> which is an alternate module standard. Using Vite to manage the translation of the files and then passing them onto a testing framework built with a different standard can create friction.</p>
<p>To <a href="https://vitest.dev/guide/why.html#the-need-for-a-vite-native-test-runner" target="_blank" rel="noopener">quote the Vitest team</a>:</p>
<blockquote><p>Vite’s Unit Testing story hasn’t been clear though. Existing options like <a href="https://jestjs.io/" target="_blank" rel="noopener">Jest</a> were created in a different context. There is a lot of duplication between Jest and Vite, forcing users to configure two different pipelines.</p></blockquote>
<p><a href="https://jestjs.io/" target="_blank" rel="noopener">Jest</a> is probably the most popular unit testing framework; it came out on top in the <a href="https://2021.stateofjs.com/en-US/libraries/testing/#testing_experience_ranking" target="_blank" rel="noopener">State of JS Survey in 2021.</a> Jest’s integration with Vite is patchy. There’s a library called <a href="https://github.com/sodatea/vite-jest#readme" target="_blank" rel="noopener">vite-jest</a>, which aims to provide first-class Vite integration for <a href="https://jestjs.io/" target="_blank" rel="noopener">Jest</a>; however, it is currently a work-in-progress.</p>
<p>Vite-jest does not mention Svelte, and may not work with Svelte. For SvelteKit, there’s an experimental library called <a href="https://github.com/rossyman/svelte-add-jest" target="_blank" rel="noopener">svelte-add-jest</a>. The bottom line is that there is not a clear, reliable way of using Jest with Vite and Svelte.</p>
<p>In any case, as mentioned by the Vitest team, there is a duplication of effort between Jest and Vite. You end up with a pipeline for development and a pipeline for testing. For Jest, you may be using <a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a> with a plugin to translate from Svelte to JavaScript. Then, you need to stitch some accompanying pieces together to make it work. It becomes a bit of a <a href="https://en.wikipedia.org/wiki/Rube_Goldberg_machine" target="_blank" rel="noopener">Rube Goldberg Machine</a>.</p>
<p>I wrote about this in another article, <a href="https://www.roboleary.net/2021/11/18/svelte-app-testing-jest.html" target="_blank" rel="noopener">Testing a Svelte app with Jest</a>. I created a <a href="https://github.com/robole/svelte-vite-jest-template" target="_blank" rel="noopener">starter template</a> to use Vite, Svelte, Jest, and <a href="https://testing-library.com/docs/svelte-testing-library/intro/" target="_blank" rel="noopener">Svelte Testing Library</a> together. It required approximately 10 dependencies, and two additional config files (<code>.babelrc</code> and <code>jest.config.json</code>) to create the testing pipeline.</p>
<p>Having this kind of setup is fragile, especially when you don’t fully understand the inner workings of the tools. I would be praying that a change to one of those dependencies does not break the chain! More links, more possibility for failure! Not a good feeling if you become the maintainer of a project!</p>
<figure id="attachment_120419" aria-describedby="caption-attachment-120419" style="width: 385px" class="wp-caption aligncenter"><img loading="lazy" decoding="async" data-attachment-id="120419" data-permalink="https://blog.logrocket.com/testing-svelte-app-vitest/attachment/modern-digital-infrastructure-comic/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/modern-digital-infrastructure-comic.png" data-orig-size="385,489" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Modern digital infrastructure comic" data-image-description="" data-image-caption="&lt;p&gt;Image credit: XKCD&lt;/p&gt;
" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/modern-digital-infrastructure-comic.png?w=236" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/modern-digital-infrastructure-comic.png?w=385" class="size-full wp-image-120419" src="https://blog.logrocket.com/wp-content/uploads/2022/06/modern-digital-infrastructure-comic.png" alt="Modern Digital Infrastructure Comic" width="385" height="489" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/modern-digital-infrastructure-comic.png 385w, https://blog.logrocket.com/wp-content/uploads/2022/06/modern-digital-infrastructure-comic.png?resize=236,300 236w" sizes="(max-width: 385px) 100vw, 385px" /><figcaption id="caption-attachment-120419" class="wp-caption-text">Image credit: <a href="https://xkcd.com/2347/" target="_blank" rel="noopener">XKCD</a></figcaption></figure>
<p>In summary, a more integrated solution is preferable. A Vite-native solution is even better. A Vite-native solution with a Jest-compatible API would be better still! Doing it all in a single configuration file would be Nirvana! This is potentially what Vitest can deliver.</p>
<p>First, let’s skim over the API to see how our tests will look.</p>
<h2 id="writing-tests-vitest">Writing tests with Vitest</h2>
<p>You can read the Vitest <a href="https://vitest.dev/api/" target="_blank" rel="noopener">API documentation</a> for more detailed information, but to review the key points I’ll provide a quick API overview.</p>
<p>By default, Vitest looks for filenames that end with either <code>.spec.js</code> or <code>.test.js</code>. You can configure it differently if you prefer. I name my test files <code>&lt;component-name&gt;.spec.js</code> and place them alongside my component files.</p>
<p>The API is compatible with <a href="https://www.chaijs.com/" target="_blank" rel="noopener">Chai</a> assertions and <a href="https://jestjs.io/docs/expect" target="_blank" rel="noopener">Jest expect</a>. If you have used these before, this will be familiar. The key bits are:</p>
<ul>
<li><code>describe</code> blocks: used to group related tests into a test suite; a suite lets you organize your tests so reports are clear; you can nest them too if you wish to do further aggregation</li>
<li><code>test</code> or <code>it</code> blocks: used to create an individual test</li>
<li><code>expect</code> statements: when you’re writing tests, you need to check that values meet certain conditions – these are referred to as assertions; the <code>expect</code> function provides access to several <a href="https://jestjs.io/docs/using-matchers" target="_blank" rel="noopener">“matcher” functions</a> that let you validate different types of things (e.g., <code>toBeNull</code>, <code>toBeTruthy</code>)</li>
</ul>
<p>Here is a basic skeleton of how a test suite with one test for our <code>Todo</code> component might look:</p>
<pre class="language-javascript hljs">import {describe, expect, it} from 'vitest';
import Todo from "./Todo.svelte";

describe("Todo", () =&gt; {
    let instance = null;

    beforeEach(() =&gt; {
        //create instance of the component and mount it
    })

    afterEach(() =&gt; {
        //destory/unmount instance
    })

    test("that the Todo is rendered", () =&gt; {
        expect(instance).toBeDefined();
    })
})
</pre>
<p>While you could use Vitest on its own to run tests, you’d have to create an instance of the component and then mount it to a document. We can do this in the <code>beforeEach</code> function. You’d also probably need to destroy or unmount this instance in <code>afterEach</code>. This is cumbersome; it’s the kind of boilerplate that is best avoided.</p>
<p>It is more common to use the <a href="https://testing-library.com/docs/svelte-testing-library/intro" target="_blank" rel="noopener">Svelte Testing Library</a> which helps push you towards good testing practices. It has a <code>render</code> function that takes care of the rendering of the component for us and does it in-memory using <a href="https://github.com/jsdom/jsdom" target="_blank" rel="noopener">jsdom</a>. You can also get more convenient matcher functions, such as <code>toBeInTheDocument()</code> by <a href="https://testing-library.com/docs/ecosystem-jest-dom/" target="_blank" rel="noopener">jest-dom</a> library.</p>
<p>First, you’ll install the libraries using this command:</p>
<pre class="language-javascript hljs">npm i -D @testing-library/svelte jest-dom jsdom
</pre>
<p>I’m not entirely sure if you need to install <a href="https://github.com/jsdom/jsdom" target="_blank" rel="noopener">jsdom</a> yourself. I may have been prompted to install it; I don’t recall exactly!</p>
<p>Now, we can focus on writing tests. You can see that we pass our component name and props to the <code>render</code> function to render our component. Then, we have access to HTML output through an implicit <code>screen</code> variable. We can run <a href="https://testing-library.com/docs/queries/about" target="_blank" rel="noopener">query methods</a> to find the page elements that we’d like to test.</p>
<pre class="language-javascript hljs">import { render, screen } from "@testing-library/svelte";
import Todo from "./Todo.svelte";

describe("Todo", () =&gt; {
  const todoDone = { id: 1, text: "buy milk", done: true };
  const todoNotDone = { id: 2, text: "do laundry", done: false };

  test("shows the todo text when rendered", () =&gt; {
    render(Todo, { props: { todo: todoDone } });

    expect(screen.getByLabelText("Done")).toBeInTheDocument(); // checkbox
    expect(screen.getByText(todoDone.text)).toBeInTheDocument();
  });
});
</pre>
<h2 id="migrating-project-jest-vitest">Migrating a project from Jest to Vitest</h2>
<p>There’s a short <a href="https://vitest.dev/guide/migration.html" target="_blank" rel="noopener">migration guide</a> on the Vitest website.</p>
<p>(deep breath)</p>
<p>Let’s go!</p>
<p>I will fork <a href="https://github.com/robole/svelte-todo-with-tests" target="_blank" rel="noopener">a Todo app</a> that I previously made and then tested with Jest and the Svelte Testing Library. I use the <code>&lt;component_name&gt;.spec.js</code> naming convention for my tests alongside the accompanying component. It has 98.07% coverage.</p>
<p>The Todo app has the following features:</p>
<ol>
<li>List todos: When no items remain on the list, the app displays the message, “Congratulations, all done!”</li>
<li>Record progress: Users can mark todos completed, and unmark todos that still need attention; completed todos are styled differently with gray text and a strikethrough decoration.</li>
<li>Add new todos: Users may add a new todo, but the app prohibits the addition of an empty todo</li>
</ol>
<p>Here’s an overview of the components:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="120423" data-permalink="https://blog.logrocket.com/testing-svelte-app-vitest/attachment/todos-list/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/todos-list.png" data-orig-size="730,380" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Todos list" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/todos-list.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/todos-list.png?w=730" class="aligncenter size-full wp-image-120423" src="https://blog.logrocket.com/wp-content/uploads/2022/06/todos-list.png" alt="Todos List" width="730" height="380" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/todos-list.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/todos-list.png?resize=300,156 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<h3 id="installation">Installation</h3>
<p>First, we install Vitest. I installed it with npm, but you can use your package manager of choice:</p>
<pre class="language-javascript hljs"># with npm
npm i -D vitest

# or with yarn
yarn add -D vitest

# or with pnpm
pnpm add -D vitest
</pre>
<p>Next, let’s check that we have the latest versions of everything. Vitest requires Vite v2.7.10+ and Node v14+.</p>
<p>For Vite, I was using v2.6.4, so I need to update that. The quickest way is to run: <code>npm i -D vite</code>.</p>
<p>I was using Node is v14.18.1, so no update was required there. If you need to update Node, you can <a href="https://phoenixnap.com/kb/update-node-js-version" target="_blank" rel="noopener">follow this guide</a>.</p>
<h3 id="configuration">Configuration</h3>
<p>According to the <a href="https://vitest.dev/guide/migration.html" target="_blank" rel="noopener">Vitest migration guide</a>:</p>
<blockquote><p>Jest has their <a href="https://jestjs.io/docs/api" target="_blank" rel="noopener">globals API</a> enabled by default. Vitest does not. You can either enable globals via the <code><a href="https://vitest.dev/config/#globals" target="_blank" rel="noopener">globals</a></code> <a href="https://vitest.dev/config/#globals" target="_blank" rel="noopener">configuration setting</a> or update your code to use imports from the <code>vitest</code> module instead.</p></blockquote>
<p>Let’s enable the <code><a href="https://vitest.dev/config/#globals" target="_blank" rel="noopener">globals</a></code> <a href="https://vitest.dev/config/#globals" target="_blank" rel="noopener">option</a>. Here’s what our <code>vite.config.js</code> file looks like with the globals option enabled:</p>
<pre class="language-javascript hljs">import { defineConfig } from "vite";
import { svelte } from "@sveltejs/vite-plugin-svelte";

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [svelte()],
  test: {
    globals: true,
  },
});
</pre>
<p>Now, let’s try to run Vitest; the command: <code>npx vitest run</code> will runs the tests once.</p>
<p>After running this command, all 16 tests fail!</p>
<p><img loading="lazy" decoding="async" data-attachment-id="120425" data-permalink="https://blog.logrocket.com/testing-svelte-app-vitest/attachment/all-tests-fail/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/all-tests-fail.png" data-orig-size="730,666" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="All tests fail" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/all-tests-fail.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/all-tests-fail.png?w=730" class="aligncenter size-full wp-image-120425" src="https://blog.logrocket.com/wp-content/uploads/2022/06/all-tests-fail.png" alt="All Tests Fail" width="730" height="666" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/all-tests-fail.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/all-tests-fail.png?resize=300,274 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>There are two types of errors:</p>
<ol>
<li>Cannot find <code>@testing-library/svelte</code> Node modules: This is the Svelte Testing Library that we’re using; we can come back to this one</li>
<li><code>ReferenceError</code>: document is not defined: The <code>document</code> object is defined in jsdom; this is used to emulate the DOM API</li>
</ol>
<p>I guess that the environment is set to Node by default, the same move Jest made recently. Let’s change the environment variable to <code>jsdom</code>:</p>
<pre class="language-javascript hljs">export default defineConfig({
  plugins: [svelte()],
  test: {
    globals: true,
    environment: "jsdom",
  },
});
</pre>
<p>And that solves the document errors. Now, four tests pass. But, we still have seven fails.</p>
<p>The remaining errors are different; they are classified as an invalid Chai <code>propertyError</code>. For example, invalid Chai property: <code>toBeInTheDocument</code>.</p>
<p>The <code>toBeInTheDocument</code> and <code>toBeEnabled</code> functions come from the <a href="https://testing-library.com/docs/ecosystem-jest-dom/" target="_blank" rel="noopener">jest-dom</a> library, which is a companion to the Svelte Testing Library. We did not need import statements in our test files previously because we configured Jest to include jest-dom. Here’s the option from our Jest config file (<code>jest.config.json</code>):</p>
<pre class="language-json hljs">"setupFilesAfterEnv": ["@testing-library/jest-dom/extend-expect"]
</pre>
<p>To do the equivalent in Vitest, we can configure a setup file that is run before each test file. We can set this through the <code><a href="https://vitest.dev/config/#setupfiles" target="_blank" rel="noopener">setupFiles</a></code> <a href="https://vitest.dev/config/#setupfiles" target="_blank" rel="noopener">option</a>.</p>
<p>We’ll create an <code>src/setuptest.js</code> file that includes the following <code>import</code> statement:</p>
<pre class="language-javascript hljs">import "@testing-library/jest-dom";
</pre>
<p>We can update our <code>test</code> object in the <code>vite.config.js</code> file so that it looks like this:</p>
<pre class="language-javascript hljs">export default defineConfig({
  plugins: [svelte()],
  test: {
    globals: true,
    environment: "jsdom",
    setupFiles: ["src/setupTest.js"],
  },
});
</pre>
<p>Now, 11 tests pass, and only one fails! We’re almost there!</p>
<pre class="language-javascript hljs">FAIL  src/components/Todo.spec.js [ src/components/Todo.spec.js ]
Error: Error: Cannot find module @testing-library/svelte/node_modules/@testing-library/dom imported from file:///home/rob/programming/workspace/js/svelte/svelte-todo-with-tests-(vitest), file:///home/rob/programming/workspace/js/svelte/svelte-todo-with-tests-(vitest)/node_modules
 ❯ MessagePort.[nodejs.internal.kHybridDispatch] internal/event_target.js:399:24
</pre>
<p>The final error has to do with the second <code>import</code> statement in to the <code>Todo.spec.js</code> file:</p>
<pre class="language-javascript hljs">import { render, screen } from "@testing-library/svelte";
import { fireEvent } from "@testing-library/svelte/node_modules/@testing-library/dom";
</pre>
<p>I’m not sure why I had a second <code>import</code> statement like that! The <code>fireEvent</code> is part of the same library as the first statement, so we should be able to condense both statements into a single <code>import</code> like this:</p>
<pre class="language-javascript hljs">import { render, screen, fireEvent } from "@testing-library/svelte";
</pre>
<p>Are we good?</p>
<p><img loading="lazy" decoding="async" data-attachment-id="120427" data-permalink="https://blog.logrocket.com/testing-svelte-app-vitest/attachment/all-tests-pass/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/all-tests-pass.png" data-orig-size="730,296" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="All tests pass" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/all-tests-pass.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/all-tests-pass.png?w=730" class="aligncenter size-full wp-image-120427" src="https://blog.logrocket.com/wp-content/uploads/2022/06/all-tests-pass.png" alt="All Tests Pass" width="730" height="296" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/all-tests-pass.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/all-tests-pass.png?resize=300,122 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>Yes! All 16 tests pass! <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f64c.png" alt="🙌" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>Now, let’s tidy up our <code>scripts</code> in the <code>package.json</code> file:</p>
<pre class="language-json hljs">scripts: {
    "test": "npx vitest",
    "coverage": "npx vitest run --coverage"
}
</pre>
<p>Coverage reporting requires an additional package, <a href="https://github.com/bcoe/c8" target="_blank" rel="noopener">c8</a>. Let’s install that package and run the coverage:</p>
<pre class="language-javascript hljs">npm i -D c8
npm run coverage
</pre>
<p>Here’s the output:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="120429" data-permalink="https://blog.logrocket.com/testing-svelte-app-vitest/attachment/output-2/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/output.png" data-orig-size="730,409" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Output" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/output.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/output.png?w=730" class="aligncenter size-full wp-image-120429" src="https://blog.logrocket.com/wp-content/uploads/2022/06/output.png" alt="Output" width="730" height="409" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/output.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/output.png?resize=300,168 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>We’ve been upgraded to 100% coverage now (it was 98.07% in Jest). Bonus points! <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f381.png" alt="🎁" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>And finally, we can delete the Jest-related dependencies and configurations. Here are the commands I used to clean up:</p>
<pre class="language-shell hljs">rm jest.config.json .babelrc
npm uninstall -D @babel/preset-env babel-jest jest jest-transform-stub svelte-jester
</pre>
<p>We drop two configuration files and five dependencies. I feel like I am floating! <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f388.png" alt="🎈" class="wp-smiley" style="height: 1em; max-height: 1em;" /><img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f604.png" alt="😄" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>Here’s the <a href="https://github.com/robole/svelte-todo-with-vitest-tests" target="_blank" rel="noopener">GitHub repo</a> for this project.</p>
<h3 id="thoughts-on-the-vitest-migration-experience">Thoughts on the Vitest migration experience</h3>
<p>I would give the Vitest migration experience a seven out of 10. The migration guide leaves you short if you’re using jsdom, Svelte Testing Library, or jest-dom. It is a couple of extra, short steps, which may have you scratching your head. If that document is improved, I would give it a nine out of 10. It was a pleasant surprise to be able to get everything to work without editing the test files.</p>
<h2 id="performance-vitests-features">Performance of Vitest’s features</h2>
<p>So far, we’ve confirmed that several of Vitest’s features work:</p>
<ol>
<li>Component testing for Svelte</li>
<li>Use of the Svelte Testing Library with Vitest</li>
<li>Using <a href="https://github.com/jsdom/jsdom" target="_blank" rel="noopener">jsdom</a> for testing against an in-memory document</li>
<li><a href="https://www.chaijs.com/" target="_blank" rel="noopener">Chai</a> built-in for assertions and <a href="https://jestjs.io/docs/expect" target="_blank" rel="noopener">Jest expect</a> compatible APIs</li>
<li>Native code coverage via <a href="https://github.com/bcoe/c8" target="_blank" rel="noopener">c8</a></li>
</ol>
<p>Now, let’s use our Todo project to look at some of Vitest’s other important features. I’m trying to gauge if Vitest is production-ready. Currently, Vitest is at version 0.14.1, so I guess it’s still considered beta.</p>
<h3 id="smart-and-instant-watch-mode">Smart and instant watch mode</h3>
<p>Just like how Vite works in the browser, Vitest also knows the graph of your modules. This enables Vitest to do smart detection and only rerun tests related to changes. According to <a href="https://vitest.dev/guide/features.html" target="_blank" rel="noopener">the Vitest team</a>, it “…feels almost like HMR, but for tests”.</p>
<p>Let’s run Vitest in watch mode with <code>npm run test</code> and change one of the component files.</p>
<p>Let’s open the <code>AddTodo.svelte</code> file and make a breaking change. I’ll remove the <code>disabled</code> attribute from the <code>button</code>, which should trigger a failing test.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="120432" data-permalink="https://blog.logrocket.com/testing-svelte-app-vitest/attachment/failing-test/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/failing-test.png" data-orig-size="730,732" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Failing test" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/failing-test.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/failing-test.png?w=730" class="aligncenter size-full wp-image-120432" src="https://blog.logrocket.com/wp-content/uploads/2022/06/failing-test.png" alt="Failing Test" width="730" height="732" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/failing-test.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/failing-test.png?resize=150,150 150w, https://blog.logrocket.com/wp-content/uploads/2022/06/failing-test.png?resize=300,300 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>Vitest only reruns the related test suites (<code>AddTodo</code> and <code>App</code>), and we get one failing test case as expected! The running of the test suites takes 446ms, whereas to run all test suites takes at least a few seconds! This improvement is great for productivity.</p>
<h3 id="concurrent-tests">Concurrent tests</h3>
<p>We can add <code>.concurrent</code> to a suite or to individual tests to run them in parallel:</p>
<pre class="language-javascript hljs">import { render, screen, fireEvent } from "@testing-library/svelte";
import App from "./App.svelte";

describe.concurrent("App", () =&gt; {
  /* all tests run in parallel */
})
</pre>
<p>Let’s see if this speeds up the tests! In theory, my app should be able to run all tests concurrently.</p>
<p>As a baseline, running my four test suites took 5.11s from a cold start. Running it with the test suites changed to be concurrent took 3.97s. It shaved off over a second! <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f389.png" alt="🎉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<h3 id="inbuilt-typescript-support">Inbuilt TypeScript support</h3>
<p>Testing a TypeScript-Svelte app appears to be working well. Johnny Magrippis has a thorough <a href="https://www.youtube.com/watch?v=5bQD3dCoyHA" target="_blank" rel="noopener">video tutorial on this topic</a>. He makes a small currency dashboard with SvelteKit and tests it with Vitest. The code can be found in <a href="https://github.com/jmagrippis/vitest-with-sveltekit" target="_blank" rel="noopener">this GitHub repo</a>.</p>
<h3 id="test-filtering-targeting-tests-on-the-command-line">Test filtering: Targeting tests on the command line</h3>
<p>Test files to be targeted on the command line can be filtered by passing a name/pattern as an argument. For example, the following command will only run files that contain the word <code>List</code>:</p>
<pre class="language-javascript hljs">npx vitest List
</pre>
<p>In the case of our example, only the <code>TodoList.spec</code> file is run.</p>
<h4 id="skipping-suites-and-tests">Skipping suites and tests</h4>
<p>You can also add <code>.skip</code> to the <code>describe</code> or <code>test</code> functions to avoid running certain suites or tests.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="120434" data-permalink="https://blog.logrocket.com/testing-svelte-app-vitest/attachment/skip-function/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/skip-function.png" data-orig-size="730,377" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Skip function" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/skip-function.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/skip-function.png?w=730" class="aligncenter size-full wp-image-120434" src="https://blog.logrocket.com/wp-content/uploads/2022/06/skip-function.png" alt="Skip Function" width="730" height="377" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/skip-function.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/skip-function.png?resize=300,155 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>Here I skip the <code>Todo</code> test suite by adding <code>.skip</code> to the <code>describe</code> function. As you can see above, the output informs you which test suites and tests are skipped. And, the color encoding makes them easy to spot.</p>
<h2 id="using-vitest-sveltekit">Using Vitest with SvelteKit</h2>
<p>To use Vitest with SvelteKit, you’ll need to add the testing dependencies:</p>
<pre class="language-javascript hljs">npm i -D vitest @testing-library/svelte jest-dom jsdom
</pre>
<p>Next, we need to add the same configuration that I shared earlier in the Jest to Vitest migration example. But, where exactly do we put the configuration?</p>
<h3 id="the-quick-and-dirty-way">The quick and dirty way</h3>
<p>The approach I took was to put my configuration in a file called <code>vitest.config.js</code> in the project root. This file contained the following code:</p>
<pre class="language-javascript hljs">import { defineConfig } from "vite";
import { svelte } from "@sveltejs/vite-plugin-svelte";

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [svelte({ hot: !process.env.VITEST })],
  test: {
    globals: true,
    environment: "jsdom",
    setupFiles: ["src/setupTest.js"],
  },
});
</pre>
<p>I also added the <code>src/setupTest.js</code> file that imports <code>jest-dom</code>. This saves us from having to add the <code>import</code> statement to each file. The <code>src/setupTest.js</code> file has the following contents:</p>
<pre class="language-javascript hljs">import "@testing-library/jest-dom";
</pre>
<p>This works, but am I doing something suspect?</p>
<p>I’m not sure. But, there is another way that I have seen mentioned.</p>
<h3 id="the-proper-way">The proper way?</h3>
<p>The SvelteKit configuration lives in the <code><a href="https://kit.svelte.dev/docs/configuration" target="_blank" rel="noopener">svelte.config.js</a></code> file located in the project root. There is a <a href="https://kit.svelte.dev/docs/configuration#vite" target="_blank" rel="noopener">Vite option</a>&nbsp;that takes a <a href="https://vitejs.dev/config" target="_blank" rel="noopener">Vite config object</a> as its value. It would be nice to add the Vitest-related options here, and then we would have everything in a single config. I tried this, and it did not work!</p>
<p>I noticed that Johnny Magrippis added a library called <a href="https://github.com/nickbreaton/vitest-svelte-kit" target="_blank" rel="noopener">vitest-svelte-kit</a> in order to add the Vitest-related options directly into the <code><a href="https://kit.svelte.dev/docs/configuration" target="_blank" rel="noopener">svelte.config.js</a></code> file. However, this does not work automatically. To use this technique, you need to do the following:</p>
<p>First, install vitest-svelte-kit:</p>
<pre class="language-javascript hljs">npm i -D vitest-svelte-kit
</pre>
<p>Next, add the test-related stuff to your <code>svelte.config.js</code> file in the <code>vite</code> object:</p>
<pre class="language-javascript hljs">import adapter from "@sveltejs/adapter-auto"
import preprocess from "svelte-preprocess"

/** @type {import('@sveltejs/kit').Config} */
const config = {
    // Consult https://github.com/sveltejs/svelte-preprocess
    // for more information about preprocessors
    preprocess: preprocess(),

    kit: {
        adapter: adapter(),
        vite: {
            test: {
                environment: "jsdom",
                globals: true,
                setupFiles: 'src/setupTests.ts',
            },
        },
    },
}

export default config
</pre>
<p>Then, create a <code>vitest.config.js</code> file and expose a function from the library:</p>
<pre class="language-javascript hljs">import { extractFromSvelteConfig } from "vitest-svelte-kit"

export default extractFromSvelteConfig()
</pre>
<p>I guess vitest-svelte kit hasn’t totally worked out all the kinks yet, but it worked fine for me as far as I went with it.</p>
<p>Later, I hope that there will be an <a href="https://github.com/svelte-add/svelte-add" target="_blank" rel="noopener">adder</a>. Adders are a simple way to add integrations to a SvelteKit project. An adder would make it possible to include Vitest when you create a new app on the command line. That would provide a proven path. So, we’re not all the way there yet with a single config file.</p>
<h2 id="using-vitest-related-integrations">Using Vitest with related integrations</h2>
<p>I was surprised to see how well supported Vitest is already for testing in the browser and in your IDE. Now, let’s take a look at how Vitest integrates with a Web UI and an IDE.</p>
<h3 id="web-ui-integration">Web UI integration</h3>
<p>You can use Vitest in a web UI. It requires an additional package, and you should run it with the <code>--ui</code> flag:</p>
<pre class="language-javascript hljs">npm i -D @vitest/ui
</pre>
<p>Next, you can start Vitest by passing the <code>--ui</code> flag:</p>
<pre class="language-javascript hljs">npx vitest --ui
</pre>
<p>Then, you can visit the Vitest UI at <code><a href="http://localhost:51204/__vitest__/" target="_blank" rel="noopener">http://localhost:51204/__vitest__/</a></code>.</p>
<p>However, I did not see the results in any browser on Ubuntu! <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f648.png" alt="🙈" class="wp-smiley" style="height: 1em; max-height: 1em;" /> I only saw a thin green line!</p>
<h3 id="ideintegration">IDE integration</h3>
<p>You can also use Vitest in an IDE. There’s an <a href="https://marketplace.visualstudio.com/items?itemName=ZixuanChen.vitest-explorer" target="_blank" rel="noopener">extension for VS Code</a> and a <a href="https://plugins.jetbrains.com/plugin/19220-vitest-runner" target="_blank" rel="noopener">plugin for JetBrains products.</a></p>
<p>I took the VS Code extension for a spin, and it worked well. It provides a sidebar view where you can run tests. It can kick off a debugging session by bringing you to the code of your failed tests.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="120436" data-permalink="https://blog.logrocket.com/testing-svelte-app-vitest/attachment/debugging-session/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/debugging-session.png" data-orig-size="553,503" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Debugging session" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/debugging-session.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/debugging-session.png?w=553" class="aligncenter size-full wp-image-120436" src="https://blog.logrocket.com/wp-content/uploads/2022/06/debugging-session.png" alt="Debugging Session" width="553" height="503" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/debugging-session.png 553w, https://blog.logrocket.com/wp-content/uploads/2022/06/debugging-session.png?resize=300,273 300w" sizes="(max-width: 553px) 100vw, 553px" /></p>
<h2 id="conclusion">Conclusion</h2>
<p>I’m impressed with Vitest. It’s fast, the smart watch mode is great, it’s easier to configure than the competition, and it has melded the best practices from other frameworks to provide a familiar testing experience.</p>
<p>Being able to migrate an existing project from Jest to Vitest, without having to change the test files, is a huge win. I think using Vitest with Svelte and SvelteKit is almost a no-brainer.</p>
<p>While I did take Vitest through it paces for a small app, I cannot say if there are any issues when working on a larger project, or speak to how it manages more complex test cases. I guess you’d be in a pioneering space if you used it on a production app; so there’s some element of risk there.</p>
<p>If you’re using Jest in your project already, you can pilot Vitest alongside Jest without needing to meddle with your test files. If you’re in this camp, this strategy would enable you to mitigate the risk.</p>
<p>Overall, I would recommend using Vitest with Svelte. It has financial backing, full-time team members, and a robust community I expect a bright future for Vitest!</p>
</html>
<p>The post <a href="https://blog.logrocket.com/testing-svelte-app-vitest/">Testing a Svelte app with Vitest</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.logrocket.com/testing-svelte-app-vitest/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">120410</post-id>	</item>
		<item>
		<title>Data visualization with Svelte and D3</title>
		<link>https://blog.logrocket.com/data-visualization-svelte-d3/</link>
					<comments>https://blog.logrocket.com/data-visualization-svelte-d3/#comments</comments>
		
		<dc:creator><![CDATA[Rob O'Leary]]></dc:creator>
		<pubDate>Tue, 22 Mar 2022 14:30:40 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[svelte]]></category>
		<guid isPermaLink="false">https://blog.logrocket.com/?p=99269</guid>

					<description><![CDATA[<p>Let's explore the advantages of the hybrid approach of using Svelte and D3 together for data visualization.</p>
<p>The post <a href="https://blog.logrocket.com/data-visualization-svelte-d3/">Data visualization with Svelte and D3</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[<!DOCTYPE html>
<html><h2>Table of Contents</h2>
<ul>
<li><a href="#why-use-svelte">Why use Svelte?</a></li>
<li><a href="#prerequisites-for-data-viz-with-svelte-and-d3">Prerequisites for data visualization with Svelte and D3</a></li>
<li><a href="#what-is-declarative-vs-imperative-data-viz-code">What is declarative vs. imperative data viz code?</a></li>
<li><a href="#why-use-svelte-instead-of-react">Svelte vs. React for data visualization</a></li>
<li><a href="#creating-a-bar-chart-with-svelte">Creating a bar chart with Svelte</a></li>
<li><a href="#comparing-svelte-d3-implementation-to-other-implementations">Comparing Svelte and D3 vs. other tools</a></li>
<li><a href="#adding-transitions-in-svelte">Adding transitions</a></li>
<li><a href="#advanced-examples-of-data-viz-with-svelte-and-d3">Advanced examples of data visualization</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
<p>In the data visualization world, many folks now take a hybrid approach to the code they write. They use a UI library/framework such as <a href="https://reactjs.org/" target="_blank" rel="noopener">React</a> to handle state and DOM manipulation in a reactive, declarative coding style.</p>
<img loading="lazy" decoding="async" width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2022/03/data-viz-svelte-d3.png" class="attachment-full size-full wp-post-image" alt="Data Visualization in Svelte and d3" srcset="https://blog.logrocket.com/wp-content/uploads/2022/03/data-viz-svelte-d3.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/03/data-viz-svelte-d3.png?resize=300,200 300w" sizes="(max-width: 730px) 100vw, 730px" data-attachment-id="99271" data-permalink="https://blog.logrocket.com/data-visualization-svelte-d3/data-viz-svelte-d3/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/03/data-viz-svelte-d3.png" data-orig-size="730,487" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Data visualization in Svelte and d3" data-image-description data-image-caption data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/03/data-viz-svelte-d3.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/03/data-viz-svelte-d3.png?w=730"><p>Devs use <a href="https://d3js.org/" target="_blank" rel="noopener">D3</a> for the layout and design of the visualization, which follows an imperative coding style. This hybrid approach uses the strengths of both libraries to produce more maintainable and readable code.</p>
<h2 id="why-use-svelte">Why use Svelte?</h2>
<p>In recent years, there has been a migration to <a href="https://svelte.dev/" target="_blank" rel="noopener">Svelte</a> for data visualization (data viz) — major publications now use Svelte for producing their data-driven visual stories.</p>
<p><a href="https://pudding.cool/" target="_blank" rel="noopener">The Pudding</a> is a digital publication that writes visual essays on popular culture and topical issues, and their <a href="https://pudding.cool/2022/02/women-in-headlines/" target="_blank" rel="noopener">latest article is a great example</a> of how data visualization and graphics are used today. Notice how the story uses scroll-based transitions to present graphics related to the text as you proceed through the story, making it more immersive and informative.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="99279" data-permalink="https://blog.logrocket.com/data-visualization-svelte-d3/thepudding-story/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/03/thepudding-story.gif" data-orig-size="400,400" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="The Pudding Story" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/03/thepudding-story.gif?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/03/thepudding-story.gif?w=400" class="aligncenter size-full wp-image-99279" src="https://blog.logrocket.com/wp-content/uploads/2022/03/thepudding-story.gif" alt="The Pudding Story" width="400" height="400"></p>
<p><a href="https://pudding.cool/author/russell-goldenberg/" target="_blank" rel="noopener">Russell Goldenberg</a> of <a href="https://pudding.cool/" target="_blank" rel="noopener">The Pudding</a> recently spoke about their transition to Svelte on <a href="https://changelog.com/jsparty/193" target="_blank" rel="noopener">an episode of The Changelog podcast</a>:</p>
<blockquote><p>I think I’ve converted a few people on the team to be into Svelte. It just makes so much sense for the type of work we do. I’ve been finding it really great for dealing with data visualization specifically… And it’s really nice when we have a lot of different levels of engineering on our team. It’s the only framework that I’ve found that actually works across all levels, because it’s a really easy learning curve to just get started.</p></blockquote>
<p>This migration makes sense, as Svelte was created by a former graphics editor for The New York Times, <a href="https://www.nytimes.com/by/rich-harris" target="_blank" rel="noopener">Rich Harris</a>. One reason he built Svelte was to make his everyday work easier.</p>
<p>As a result, data viz concerns were initial considerations when creating the framework, and this has led to it being more amenable for making data visualizations.</p>
<h2 id="prerequisites-for-data-viz-with-svelte-and-d3">Prerequisites for data viz with Svelte and D3</h2>
<p>This is not a beginner’s guide to Svelte or D3. It is assumed you know the basics of both. If you are starting out, you can try the following resources:</p>
<ul>
<li>If you are new to Svelte, you can head to the <a href="https://svelte.dev/tutorial/basics" target="_blank" rel="noopener">official tutorial</a>. It is an interactive tutorial that covers the full breadth of the Svelte syntax</li>
<li>To get started with D3, check out this multi-part tutorial<a href="https://wattenberger.com/blog/d3" target="_blank" rel="noopener"> by Amelia Wattenberger</a>, which is well-written and has great visual aids to demonstrate key concepts of D3</li>
</ul>
<h2 id="what-is-declarative-vs-imperative-data-viz-code">What is declarative vs. imperative data visualization code?</h2>
<p>Imperative code is where we write code for each step to get the desired outcome, whereas, with declarative code, we express the outcome we want. For example, in our data viz code, we may want to create an SVG and set its dimensions. Using D3, this is what we do:</p>
<pre class="language-javascript hljs">//d3-example.js
const width = 800;
const height = 600;

const svg = d3
  .select("#chart")
  .append("svg")
  .attr("width", width)
  .attr("height", height);
</pre>
<p>In Svelte, we write the following:</p>
<pre class="language-xml hljs">&lt;!-- Example.svelte --&gt;
&lt;script&gt;
    const width = 800;
    const height = 600;
&lt;/script&gt;

&lt;svg {width} {height}&gt;&lt;/svg&gt;
</pre>
<p>We will use Svelte to declare the HTML and SVG and bind data to it. For the layout of the elements, we’ll use D3 within a Svelte component.</p>
<p>Before we go further, you may wonder why you would use Svelte over React for data viz. Here’s why.</p>
<h2 id="why-use-svelte-instead-of-react">Why use Svelte instead of React?</h2>
<p>While you can accomplish the same things with both frameworks, <a href="https://blog.logrocket.com/comparing-the-best-new-javascript-frameworks-to-react/#:~:text=One%20notable%20difference%20between%20them,not%20make%20use%20of%20JSX." target="_blank" rel="noopener">they are quite different in philosophy and style.</a> Let’s cover the key differences.</p>
<p>First, when visualizing data in the browser, it is preferable to work with SVG elements, as they are more expressive than HTML. Specifically, we should use the <code>circle</code> SVG element for a circle rather than a <code>div</code> styled with <code>border-radius: 50%</code>. Because Svelte components are designed to work on top of markup, you write less boilerplate code when working with SVG.</p>
<p>Second, React uses a virtual DOM (VDOM), whereas Svelte uses the DOM. Svelte has less runtime overhead than React, as it does not hold snapshots of state in memory. Because Svelte is a compiler, it knows at build time how things change in your app rather than waiting to do the work at runtime. When manipulating datasets in the browser, this saving can make a significant difference in performance.</p>
<p>Next, Svelte performs tree-shaking at compile-time and only includes the code it needs to run in its bundles, resulting in smaller bundle sizes. React is a complete library that you include as a runtime dependency.</p>
<p>Also, transitions and animations are used often in data visualization to show state changes and highlight correlations between data. Svelte has built-in support for <a href="https://svelte.dev/docs#svelte_transition" target="_blank" rel="noopener">transitions</a> and <a href="https://svelte.dev/docs#svelte_animate" target="_blank" rel="noopener">animations</a> since version 3. With Svelte, if you don’t have a custom transition or animation in your app, it won’t make it into the bundled code. With React, it is your choice to include an add-on library, such as <a href="http://reactcommunity.org/react-transition-group/" target="_blank" rel="noopener">React Transition Group</a>, to do this for you. While D3 has a <a href="https://github.com/d3/d3-transition" target="_blank" rel="noopener">module for transitions</a>, it is preferable to let the UI framework handle it.</p>
<p>Finally, Svelte removes some constraints that you can encounter with frameworks that build components on top of JavaScript. You can write more idiomatic JavaScript in Svelte, which can make it easier to integrate with other libraries such as D3. As Rich Harris says:</p>
<blockquote><p>Because we’re not bound to the peculiarities of JavaScript, we can design a component authoring experience, rather than having to fit it around the semantics of the language. Paradoxically, this results in more idiomatic code — for example, using variables naturally rather than via proxies or hooks — while delivering significantly more performant apps.</p></blockquote>
<p>If you have experience with React, we can mitigate the cons through informed decision-making, but I think getting these benefits for “free” is compelling enough reason to consider Svelte instead. It is important to understand the differences and constraints to make the best decision for your project.</p>
<p>Now that we have a general overview of why you might use Svelte and D3 together, let’s show how to build data visualization.</p>
<h2 id="creating-a-bar-chart-with-svelte">Creating a bar chart with Svelte</h2>
<p>I will use the Svelte REPL, the basic code playground for Svelte. Let’s start with a relatively simple example: a bar chart with minimal code. Keep in mind that if you just need to create a bar chart, there are simpler and more efficient ways to do it (<a href="https://chartscss.org/docs/" target="_blank" rel="noopener">Charts.css</a> is a CSS-only solution). D3 shines when you want to have total control over a chart or you want to create a custom data visualization.</p>
<p>I will create a horizontal bar chart showing the top ten most populous countries in 2019, as shown below. Here is <a href="https://svelte.dev/repl/2812ae14c2384e1189495863f558b6ea?version=3.46.4" target="_blank" rel="noopener">a link to the example in the Svelte REPL</a>.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="99284" data-permalink="https://blog.logrocket.com/data-visualization-svelte-d3/barchart/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/03/barchart.png" data-orig-size="730,546" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Barchart" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/03/barchart.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/03/barchart.png?w=730" class="aligncenter size-full wp-image-99284" src="https://blog.logrocket.com/wp-content/uploads/2022/03/barchart.png" alt="Barchart" width="730" height="546" srcset="https://blog.logrocket.com/wp-content/uploads/2022/03/barchart.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/03/barchart.png?resize=300,224 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>To keep it simple, I will not add CSS (hence the somewhat boring appearance), and I will make the size of the chart fixed.</p>
<p>We’ll use population data sourced from the <a href="https://gist.github.com/curran/0ac4077c7fc6390f5dd33bf5c06cb5ff" target="_blank" rel="noopener">United Nations World Population Prospects</a>. I will put the 2019 population data in a separate file called <code>2019.js</code> .</p>
<pre class="language-javascript hljs">// 2019.js
export default [
    { country: "China", population: 1439324 },
    { country: "India", population: 1380004 },
    { country: "United States of America", population: 331003 },
    { country: "Indonesia", population: 273524 },
    { country: "Pakistan", population: 220892 },
    { country: "Brazil", population: 212559 },
    { country: "Nigeria", population: 206140 },
    { country: "Bangladesh", population: 164689 },
    { country: "Russian Federation", population: 145934 },
    { country: "Mexico", population: 128933 },
]
</pre>
<p>We will create a <code>BarChart</code> component that will display this data as a horizontal bar chart.</p>
<h3><code>App.svelte</code></h3>
<p>In <code>App.svelte</code>, we use our <code>BarChart</code> component and pass our data as a prop. We use the Svelte shorthand for the <code>data</code> prop. If a prop name and the name of the value are the same, you can write the prop as <code>{data}</code> instead of <code>data={data}</code>.</p>
<pre class="language-xml hljs">&lt;script&gt;
  import data from "./2019.js";
  import BarChart from "./BarChart.svelte";
&lt;/script&gt;

&lt;BarChart {data} /&gt;
</pre>
<h3><code>BarChart.svelte</code></h3>
<p>We want to create a <code>BarChart</code> component that has a <code>data</code> prop.</p>
<pre class="language-xml hljs">&lt;script&gt;
  import { scaleBand, scaleLinear } from "d3-scale";

  export let data;

  const width = 800;
  const height = 600;

  const margin = { top: 20, right: 20, bottom: 20, left: 180 };
  const innerHeight = height - margin.top - margin.bottom;
  const innerWidth = width - margin.left - margin.right;

  $: xDomain = data.map((d) =&gt; d.country);
  $: yDomain = data.map((d) =&gt; +d.population);

  $: yScale = scaleBand().domain(xDomain).range([0, innerHeight]).padding(0.1);
  $: xScale = scaleLinear()
    .domain([0, Math.max.apply(null, yDomain)])
    .range([0, innerWidth]);
&lt;/script&gt;

&lt;svg {width} {height}&gt;
  &lt;g transform={`translate(${margin.left},${margin.top})`}&gt;
    {#each xScale.ticks() as tickValue}
      &lt;g transform={`translate(${xScale(tickValue)},0)`}&gt;
        &lt;line y2={innerHeight} stroke="black" /&gt;
        &lt;text text-anchor="middle" dy=".71em" y={innerHeight + 3}&gt;
          {tickValue}
        &lt;/text&gt;
      &lt;/g&gt;
    {/each}
    {#each data as d}
      &lt;text
        text-anchor="end"
        x="-3"
        dy=".32em"
        y={yScale(d.country) + yScale.bandwidth() / 2}
      &gt;
        {d.country}
      &lt;/text&gt;
      &lt;rect
        x="0"
        y={yScale(d.country)}
        width={xScale(d.population)}
        height={yScale.bandwidth()}
      /&gt;
    {/each}
  &lt;/g&gt;
&lt;/svg&gt;
</pre>
<p>D3 has a modular design, so you only need to include the modules you require — spare your user the extra kilobytes of JavaScript! In our case, we need the <a href="https://www.npmjs.com/package/d3-scale" target="_blank" rel="noopener">d3-scale</a> module (scales in the figure below) to map our data values to pixels for the scales and bars of our bar chart.</p>
<figure id="attachment_99286" aria-describedby="caption-attachment-99286" style="width: 700px" class="wp-caption aligncenter"><img loading="lazy" decoding="async" data-attachment-id="99286" data-permalink="https://blog.logrocket.com/data-visualization-svelte-d3/d3-module-viz/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/03/d3-module-viz.png" data-orig-size="700,721" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="D3 Module Visualization" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/03/d3-module-viz.png?w=291" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/03/d3-module-viz.png?w=700" class="wp-image-99286 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/03/d3-module-viz.png" alt="D3 Module Visualization" width="700" height="721" srcset="https://blog.logrocket.com/wp-content/uploads/2022/03/d3-module-viz.png 700w, https://blog.logrocket.com/wp-content/uploads/2022/03/d3-module-viz.png?resize=291,300 291w" sizes="(max-width: 700px) 100vw, 700px" /><figcaption id="caption-attachment-99286" class="wp-caption-text">Bubble chart of D3 modules (source: <a href="https://wattenberger.com/blog/d3" target="_blank" rel="noopener">https://wattenberger.com/blog/d3</a>)</figcaption></figure>
<p>You can import and use the D3 module using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="noopener">standard ESM syntax</a>. Here, the Svelte REPL downloads the module for me. If you want to include it in your project, you can download it using your preferred package manager, such as npm.</p>
<p>Next, we declare our <code>data</code> prop. In Svelte, props are declared with the <code>export</code> keyword, followed by the variable declaration. By omitting a default value, we are forcing the provision of the prop. We want data! <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f600.png" alt="😀" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<pre class="language-javascript hljs">export let data;
</pre>
<p>Next, write some code to set the variables for dimensions and create our own scale functions to facilitate mapping our data values to positions. Notice that this code is the same as regular D3 code, but with one exception: for some of our variables, we precede them with a dollar sign to tell the Svelte compiler that these statements are reactive.</p>
<p>Any time there is a new value passed to the <code>data</code> prop, we want our bars and axes to be re-calculated, and, by marking these statements as reactive, they will be re-evaluated when any of the dependent variables change.</p>
<p>Now, we create our SVG by hand. We declare each SVG element we need and use our scale functions inside the properties of our SVG elements to set the position and dimensions where needed. We use an <code>each</code> block to iterate through our <code>data</code> array to create the ticks for the Y-axis and the rectangles for each bar.</p>
<p>In less than 50 lines of code, you get a readable, reusable bar chart component. Of course, it can be improved and styled, but I will leave that to you!</p>
<h3 id="comparing-svelte-d3-implementation-to-other-implementations">Comparing Svelte and D3 implementation to other implementations</h3>
<p>If you are curious and want to compare the code side-by-side, you can find live examples here:</p>
<ul>
<li><a href="https://codepen.io/robjoeol/pen/ZEaBMQw" target="_blank" rel="noopener">D3 only</a></li>
<li><a href="https://svelte.dev/repl/2812ae14c2384e1189495863f558b6ea?version=3.46.4" target="_blank" rel="noopener">Svelte and D3</a></li>
<li><a href="https://vizhub.com/robole/8af106eaa1064e80b7b247a9be701b72?edit=files&amp;file=index.js" target="_blank" rel="noopener">React and D3</a></li>
</ul>
<h2 id="adjusting-visualization-for-different-screen-sizes">Adjusting visualization for different screen sizes</h2>
<p>You will want to adjust the size of your visualization to make the most of the screen real estate available. If your data visualization is based on SVG, you can usually avoid having to resize things explicitly, given that SVG is inherently scalable. With the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API" target="_blank" rel="noopener">Canvas API</a>, you need to explicitly resize (redraw) the elements.</p>
<p>To revisit our previous example, there is a maximum and minimum width that we would like the bar chart to be. We may want it to scale up on larger screens, but we wouldn’t want it to shrink for mobile screens, as it will be way too squashed.</p>
<p>It would be preferable to give the bar chart a minimum width and make it horizontally scrollable if it does not fully fit on the screen, like the screenshot below.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="99288" data-permalink="https://blog.logrocket.com/data-visualization-svelte-d3/barchart-mobile/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/03/barchart-mobile.jpg" data-orig-size="597,932" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="Barchart mobile" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/03/barchart-mobile.jpg?w=192" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/03/barchart-mobile.jpg?w=597" class="aligncenter size-full wp-image-99288" src="https://blog.logrocket.com/wp-content/uploads/2022/03/barchart-mobile.jpg" alt="Barchart Mobile" width="597" height="932" srcset="https://blog.logrocket.com/wp-content/uploads/2022/03/barchart-mobile.jpg 597w, https://blog.logrocket.com/wp-content/uploads/2022/03/barchart-mobile.jpg?resize=192,300 192w" sizes="(max-width: 597px) 100vw, 597px" /></p>
<p><a href="https://svelte.dev/repl/fdab64f844354472960a548238b5f32e?version=3.46.4" target="_blank" rel="noopener">This is the adjusted example</a> that allows the bar chart to vary in width from <code>600px</code> to <code>1200px</code>:</p>
<pre class="language-xml hljs">&lt;!-- App.svelte --&gt;
&lt;script&gt;
  import data from "./2019.js";
  import BarChart from "./BarChart.svelte";
&lt;/script&gt;

&lt;div class="container"&gt;
  &lt;BarChart {data} /&gt;
&lt;/div&gt;

&lt;style&gt;
   :global(.chart) {
      width: 100%;
      min-width: 600px;
      max-width: 1200px;
    }

  .container {
    overflow-x: auto;
  }
&lt;/style&gt;
</pre>
<p>We set the <code>width</code>, <code>min-width</code>, and <code>max-width</code> on the <code>BarChart</code> component with a global style on the <code>chart</code> class. We wrap <code>BarChart</code> in a containing <code>div</code>, which we set <code>overflow-x:auto</code> that will add a horizontal scrollbar only when necessary (when the screen width is less than 600px).</p>
<p>Just a note on the height of the SVG: in this case, the <code>height</code> is fixed at <code>600px</code>, which works fine because we want the X-axis to always be visible. The height is fixed because we set the <code>height</code> attribute on the SVG and did not set any height-related properties in CSS.</p>
<p>If you want the SVG to scale according to an aspect ratio, you can use the <code>viewBox</code> and <code>preserveAspectRatio</code> attributes. When there is a <code>viewBox</code>, <code>preserveAspectRatio</code> describes how the SVG should scale if the aspect ratio of the <code>viewBox</code> doesn’t match the aspect ratio of the viewport.</p>
<p>Most of the time, the default behavior works pretty well: the image is scaled until it just fits both the height and width, and it is centered within any extra space. This is the default if you omit the attribute altogether.</p>
<pre class="language-xml hljs">&lt;!-- BarChart.svelte --&gt;
&lt;script&gt;
  import { scaleBand, scaleLinear } from "d3-scale";

 //same code as before
&lt;/script&gt;

&lt;svg viewBox={`0 0 ${width} ${height}`}&gt;
  &lt;!--code omitted for brevity--&gt;
&lt;/svg&gt;
</pre>
<p>If you use the <code>viewBox</code> on its own as above, it is scaled down so that you can see more of the bar chart:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="99290" data-permalink="https://blog.logrocket.com/data-visualization-svelte-d3/barchart-mobile-scaled/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/03/barchart-mobile-scaled-1.jpg" data-orig-size="600,779" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="Barchart mobile scaled" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/03/barchart-mobile-scaled-1.jpg?w=231" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/03/barchart-mobile-scaled-1.jpg?w=600" class="aligncenter size-full wp-image-99290" src="https://blog.logrocket.com/wp-content/uploads/2022/03/barchart-mobile-scaled-1.jpg" alt="Barchart Mobile Scaled" width="600" height="779" srcset="https://blog.logrocket.com/wp-content/uploads/2022/03/barchart-mobile-scaled-1.jpg 600w, https://blog.logrocket.com/wp-content/uploads/2022/03/barchart-mobile-scaled-1.jpg?resize=231,300 231w" sizes="(max-width: 600px) 100vw, 600px" /></p>
<p>More often than not, <code>viewBox</code> delivers a preferable result by default. I recommend reading <a href="https://css-tricks.com/scale-svg/" target="_blank" rel="noopener">this article</a> to learn more about this topic.</p>
<p>If you want to resize elements of a visualization based on the dimensions of a particular element, Svelte provides some convenient built-in dimension bindings. The following bindings are available for every block-level element: <code>clientWidth</code>, <code>clientHeight</code>, <code>offsetWidth</code>, and <code>offsetHeight</code>.</p>
<p>These bindings are read-only, so you would only use these as inputs inside other statements. These are expensive operations, so do not use them too often.</p>
<h2 id="adding-transitions-in-svelte">Adding transitions in Svelte</h2>
<p>A transition is triggered by an element entering or leaving the DOM because of a state change.</p>
<p><a href="https://blog.logrocket.com/essential-transitions-and-animations-in-svelte/" target="_blank" rel="noopener">Svelte provides seven transition functions</a>: <code>fade</code>, <code>blur</code>, <code>fly</code>, <code>slide</code>, <code>scale</code>, <code>draw</code>, and <code>crossfade</code>. To use any of these functions, you need to import them from the <code>svelte/transition</code> module, and you can add them to an element through the <code>transition</code> directive. The syntax is <code>transition:fn={params}</code>, and the parameters are optional.</p>
<pre class="language-xml hljs">&lt;p transition:fade&gt;Fades in and out&lt;/p&gt;
</pre>
<p>Pass the parameters in an object with the optional properties: <code>duration</code>, <code>easing</code>, and <code>delay</code>.</p>
<p>Let’s look at a quick example of a line graph. Say we want to use the <code>draw</code> transition to draw the line in two seconds.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="99292" data-permalink="https://blog.logrocket.com/data-visualization-svelte-d3/linegraph-transition/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/03/linegraph-transition.gif" data-orig-size="446,382" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Linegraph transition" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/03/linegraph-transition.gif?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/03/linegraph-transition.gif?w=446" class="aligncenter size-full wp-image-99292" src="https://blog.logrocket.com/wp-content/uploads/2022/03/linegraph-transition.gif" alt="Linegraph Transition" width="446" height="382"></p>
<p>We need to add <code>transition:draw={{duration: 2000}}</code> to the <code>path</code> element.</p>
<pre class="language-xml hljs">&lt;script&gt;
   import { draw } from 'svelte/transition';

   // props
   export let data;
   export let show;

  //other code
&lt;/script&gt;

&lt;svg viewBox="0 0 100 100"&gt;
   {#if (show)}
    &lt;path transition:draw={{duration: 2000}} d={pathLine(data)} /&gt;
   {/if}
&lt;/svg&gt;
</pre>
<p>Here is <a href="https://svelte.dev/repl/b5fd7bb6bdae4fa0ac916050e8f59b58?version=3.46.4" target="_blank" rel="noopener">the complete example.</a></p>
<p>Transitions are reversible — if you toggle the checkbox while the transition is ongoing, it transitions from the current point rather than the beginning or end.</p>
<p>By default, the transition will not play on the first render. So, if you remove the <code>if</code> block in this example, you will not see a transition when the page loads. You can change this behavior by setting the initialization option <code>intro</code> to <code>true</code> when you <a href="https://svelte.dev/docs#run-time-client-side-component-api" target="_blank" rel="noopener">create a component</a>, as below.</p>
<pre class="language-javascript hljs">//main.js
import App from "./App.svelte";

const app = new App({
  target: document.getElementById("app"),
  intro: true,
});

export default app;
</pre>
<p>With data visualization, you control when an element is added through the <code>in</code> directive and when an element is removed through the <code>out</code> directive. So, you can create more nuanced transitions.</p>
<p>Here is <a href="https://svelte.dev/repl/fc633d59c07a4020937a5862e7b91438?version=3.32.3" target="_blank" rel="noopener">an example of using the transitions to shift the bars</a> in the bar chart when the dataset changes. By adding the attribute <code>out:slide="{{duration: 1000}}"</code> to the <code>rect</code> element, we get the following effect:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="99294" data-permalink="https://blog.logrocket.com/data-visualization-svelte-d3/barchart-transition/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/03/barchart-transition.gif" data-orig-size="514,328" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Barchart transition" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/03/barchart-transition.gif?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/03/barchart-transition.gif?w=514" class="aligncenter size-full wp-image-99294" src="https://blog.logrocket.com/wp-content/uploads/2022/03/barchart-transition.gif" alt="Barchart Transition" width="514" height="328"></p>
<p>Pretty cool, huh?</p>
<p>You can do plenty more and even make your <a href="https://css-tricks.com/making-your-first-custom-svelte-transition/" target="_blank" rel="noopener">own custom transitions</a>, too.</p>
<h2 id="advanced-examples-of-data-viz-with-svelte-and-d3">Advanced examples of data viz with Svelte and D3</h2>
<p>I find I learn the most by exploring complete examples. You, too, may prefer to sink your teeth straight into meatier examples!</p>
<p>Amelia Wattenberger has shared <a href="https://svelte.recipes/" target="_blank" rel="noopener">some Svelte data viz recipes</a>, which are mostly complete examples, and they are a nice size. This is an excellent example of a <a href="https://svelte.recipes/components/spiral/" target="_blank" rel="noopener">spiral graph</a> showcasing the trend of covid cases over time for different countries.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="99299" data-permalink="https://blog.logrocket.com/data-visualization-svelte-d3/spiral-graph/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/03/spiral-graph.png" data-orig-size="730,760" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Spiral graph" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/03/spiral-graph.png?w=288" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/03/spiral-graph.png?w=730" class="aligncenter size-full wp-image-99299" src="https://blog.logrocket.com/wp-content/uploads/2022/03/spiral-graph.png" alt="Spiral Graph" width="730" height="760" srcset="https://blog.logrocket.com/wp-content/uploads/2022/03/spiral-graph.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/03/spiral-graph.png?resize=288,300 288w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>Amelia also appeared <a href="https://frontend.horse/episode/data-visualization-and-supervillains" target="_blank" rel="noopener">on an episode of Frontend Horse</a> recently, where she created a chart using superhero data for Alex Trost’s Supervillain PR Agency website.</p>
<p>Also, <a href="https://www.higsch.com/" target="_blank" rel="noopener">Matthias Stahl</a> has <a href="https://www.youtube.com/watch?v=bnd64ZrHC0U" target="_blank" rel="noopener">an informative talk on Svelte and D3,</a> where he showcases what makes Svelte and D3 such a good fit for data visualization. He has some advanced examples which he features in the talk, including:</p>
<p><a href="https://higsch.github.io/body-temp/" target="_blank" rel="noopener">Human signatures</a> (<a href="https://github.com/higsch/body-temp/tree/master/app-svelty" target="_blank" rel="noopener">code</a>): Based on a comprehensive study of human body temperature data spanning the last 150 years, this visualization shows the profile of average body temperatures for a selection of men and women. You can click on the bodies to view their temperatures as a line graph over their lifespan.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="99301" data-permalink="https://blog.logrocket.com/data-visualization-svelte-d3/human-signatures/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/03/human-signatures.png" data-orig-size="730,369" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Human signatures" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/03/human-signatures.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/03/human-signatures.png?w=730" class="aligncenter size-full wp-image-99301" src="https://blog.logrocket.com/wp-content/uploads/2022/03/human-signatures.png" alt="Human Signatures" width="730" height="369" srcset="https://blog.logrocket.com/wp-content/uploads/2022/03/human-signatures.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/03/human-signatures.png?resize=300,152 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p><a href="https://higsch.github.io/childhood-mortality/" target="_blank" rel="noopener">Childhood mortality</a> (<a href="https://github.com/higsch/childhood-mortality" target="_blank" rel="noopener">code</a>): This visualization showcases how the death rates of children aged 5 or younger are declining. It shows the death rates for each country over the past 20 years in repeating concentric patterns of interleaved circles, showing the magnitude of the values for the different years. You can hover over segments to highlight a specific country’s data. Matthias uses <code>canvas</code> for the more data-intensive aspects of the visualization, and SVG for the smaller accompanying charts. It is a good example of how you optimize a more complex data visualization.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="99303" data-permalink="https://blog.logrocket.com/data-visualization-svelte-d3/childhood-mortality/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/03/childhood-mortality.png" data-orig-size="730,418" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Childhood mortality" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/03/childhood-mortality.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/03/childhood-mortality.png?w=730" class="aligncenter size-full wp-image-99303" src="https://blog.logrocket.com/wp-content/uploads/2022/03/childhood-mortality.png" alt="Childhood Mortality" width="730" height="418" srcset="https://blog.logrocket.com/wp-content/uploads/2022/03/childhood-mortality.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/03/childhood-mortality.png?resize=300,172 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<h2 id="conclusion">Conclusion</h2>
<p>I hope that I have shown the advantages of using Svelte and D3 together for data visualization. It leads to more declarative code and componentized code that developers have become accustomed to but without sacrificing performance.</p>
<p>I have given a solid introduction here and provided more examples to help you on the path to creating more complex, custom data visualizations. Have fun and make some data beautiful! <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f308.png" alt="🌈" class="wp-smiley" style="height: 1em; max-height: 1em;" /><img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f4ca.png" alt="📊" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
</html>
<p>The post <a href="https://blog.logrocket.com/data-visualization-svelte-d3/">Data visualization with Svelte and D3</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.logrocket.com/data-visualization-svelte-d3/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">99269</post-id>	</item>
		<item>
		<title>Level up your CSS linting using Stylelint</title>
		<link>https://blog.logrocket.com/using-stylelint-improve-lint-css-scss-sass/</link>
					<comments>https://blog.logrocket.com/using-stylelint-improve-lint-css-scss-sass/#respond</comments>
		
		<dc:creator><![CDATA[Rob O'Leary]]></dc:creator>
		<pubDate>Tue, 17 Aug 2021 16:00:50 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[css]]></category>
		<guid isPermaLink="false">https://blog.logrocket.com/?p=63049</guid>

					<description><![CDATA[<p>Level up your CSS, SCSS, and Sass linting skills and improve your code quality using this advanced guide on Stylelint.</p>
<p>The post <a href="https://blog.logrocket.com/using-stylelint-improve-lint-css-scss-sass/">Level up your CSS linting using Stylelint</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[<!DOCTYPE html>
<html><p>Writing quality CSS is tricky. People seem to get exasperated with CSS more so than with other technologies, and that’s why I’m surprised that using a <a href="https://www.testim.io/blog/what-is-a-linter-heres-a-definition-and-quick-start-guide/" target="_blank" rel="noopener">linter</a> like <a href="https://stylelint.io/" target="_blank" rel="noopener">Stylelint</a> for CSS is not discussed more often. Catching and fixing errors as you go, as well as enforcing best practices while coding, can significantly improve code quality.</p>
<img loading="lazy" decoding="async" width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2021/08/using-stylelint-improve-lint-css-scss-sass.png" class="attachment-full size-full wp-post-image" alt="Using Stylelint To Improve And Lint CSS, SCSS, And Sass" srcset="https://blog.logrocket.com/wp-content/uploads/2021/08/using-stylelint-improve-lint-css-scss-sass.png 730w, https://blog.logrocket.com/wp-content/uploads/2021/08/using-stylelint-improve-lint-css-scss-sass.png?resize=300,200 300w" sizes="(max-width: 730px) 100vw, 730px" data-attachment-id="63113" data-permalink="https://blog.logrocket.com/using-stylelint-improve-lint-css-scss-sass/using-stylelint-improve-lint-css-scss-sass/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/08/using-stylelint-improve-lint-css-scss-sass.png" data-orig-size="730,487" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Using stylelint improve lint css scss sass" data-image-description data-image-caption data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/08/using-stylelint-improve-lint-css-scss-sass.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/08/using-stylelint-improve-lint-css-scss-sass.png?w=730"><p>And, while many modern dev tools like <a href="https://cli.vuejs.org/" target="_blank" rel="noopener">Vue CLI</a> and <a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">Create React App</a> include <a href="https://eslint.org/" target="_blank" rel="noopener">ESLint</a> as part of their configuration so that you can easily lint JavaScript, you are on your own when it comes to linting CSS.</p>
<p>This article is not meant to be a stand-in for Stylelint’s <a href="https://stylelint.io/user-guide/get-started" target="_blank" rel="noopener">official user guide</a>, which is well written and will cover most of your needs. This article aims to give you an up-to-date look at some of the advanced things Stylelint can do for you (which may surprise you!) and shows how you can integrate Stylelint into your workflow.</p>
<p>First, here’s a quick overview of Stylelint.</p>
<h2>What is Stylelint?</h2>
<p>If you are new to linters, you can read <a href="https://css-tricks.com/stylelint/" target="_blank" rel="noopener">a tutorial on linting CSS</a>, written by the author of Stylelint to get a complete background.</p>
<p>Stylelint understands the latest CSS syntax and parses CSS-like syntaxes such as SCSS, Sass, and Less.</p>
<p>Stylelint can extract embedded styles from:</p>
<ul>
<li>HTML</li>
<li>Markdown</li>
<li>CSS-in-JS objects</li>
<li>Template literals</li>
</ul>
<p>Essentially, Stylelint should be able to parse your CSS in any form, anywhere. Similar to ESLint, it has built-in rules to catch errors and can automatically fix some of them. It supports shareable configs and has plugins that extend the functionality. It has integrations for <a href="https://stylelint.io/user-guide/integrations/editor" target="_blank" rel="noopener">code editors</a>, <a href="https://stylelint.io/user-guide/integrations/task-runner" target="_blank" rel="noopener">task runners</a>, and some <a href="https://github.com/webpack-contrib/stylelint-webpack-plugin" target="_blank" rel="noopener">bundlers</a>.</p>
<h2>Using Stylelint for linting</h2>
<p>Stylelint follows similar conventions to ESLint.</p>
<p>First, use <a href="https://docs.npmjs.com/about-npm/" target="_blank" rel="noopener">npm</a> to install Stylelint, along with the <a href="https://github.com/stylelint/stylelint-config-standard" target="_blank" rel="noopener">stylelint-config-standard</a> to enable a core set of rules. Stylelint-config-standard is based on the common stylistic conventions common in a handful of CSS style guides, such as <a href="https://github.com/necolas/idiomatic-css" target="_blank" rel="noopener">idiomatic CSS principles</a> and Airbnb’s style guide.</p>
<pre class="language-bash hljs">npm install --save-dev stylelint stylelint-config-standard
</pre>
<p>Create a configuration file in the root of your project. It can be named <code>.stylelintrc</code> or <code>.stylelintrc.json</code>:</p>
<pre class="language-json hljs">{
  "extends": "stylelint-config-standard"
}
</pre>
<p>Now you can run Stylelint on the command line. For example, to target only the CSS files in your project, run <code>stylelint "**/*.css"</code>. To automatically fix errors, you can add the <code>--fix</code> flag.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="63086" data-permalink="https://blog.logrocket.com/using-stylelint-improve-lint-css-scss-sass/stylelint-css-files/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/08/stylelint-css-files.png" data-orig-size="730,157" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Stylelint css files" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/08/stylelint-css-files.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/08/stylelint-css-files.png?w=730" class="aligncenter size-full wp-image-63086" src="https://blog.logrocket.com/wp-content/uploads/2021/08/stylelint-css-files.png" alt="Code Running Stylelint And Highlighting Two Errors" width="730" height="157" srcset="https://blog.logrocket.com/wp-content/uploads/2021/08/stylelint-css-files.png 730w, https://blog.logrocket.com/wp-content/uploads/2021/08/stylelint-css-files.png?resize=300,65 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>It is a good idea to read through the <a href="https://stylelint.io/user-guide/rules/list/" target="_blank" rel="noopener">standard rules</a> to gain more familiarity with Stylelint. Some people advocate starting with a blank config and only adding the rules you need, while others use the standard config as the base and modify it as they gain more experience.</p>
<p>The latter is certainly the fastest way to get going. I think it’s a good idea to leave auto-fix off initially so that you can see the common errors occurring and understand them. Once you’ve reached a good understanding, turn on auto-fix. Of course, it’s up to you!</p>
<p>Check out the <a href="https://stylelint.io/user-guide/get-started" target="_blank" rel="noopener">official user guide</a> if you want to learn more about Stylelint’s configuration and general usage. I will now talk about the bits I haven’t seen covered well elsewhere.</p>
<h2>Performing lesser-known, novel tricks using Stylelint</h2>
<p>Beyond the basics, Stylelint can do some things that you may not expect but will appreciate. If you would like an example config that uses most of what I am about to discuss, <a href="https://www.npmjs.com/package/stylelint-config-roboleary" target="_blank" rel="noopener">you can install my config from my npm</a>.</p>
<h3>Automatic ordering of properties to improve readability</h3>
<p>The <a href="https://github.com/hudochenkov/stylelint-order" target="_blank" rel="noopener">stylelint-order plugin</a> can automatically sort properties in an order of your choosing. This can help make your CSS code easier to scan and comprehend. It is handy to have properties sorted every time you save, as below.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="63090" data-permalink="https://blog.logrocket.com/using-stylelint-improve-lint-css-scss-sass/css-stylelint-order-plugin/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/08/css-stylelint-order-plugin.gif" data-orig-size="422,366" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Css stylelint order plugin" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/08/css-stylelint-order-plugin.gif?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/08/css-stylelint-order-plugin.gif?w=422" class="aligncenter size-full wp-image-63090" src="https://blog.logrocket.com/wp-content/uploads/2021/08/css-stylelint-order-plugin.gif" alt="Code Being Automatically Organized" width="422" height="366"></p>
<p>I would issue a word of caution with automating this on projects, as it might break stuff if it is done blindly. This is why Prettier <a href="https://github.com/prettier/prettier/issues/1963#issuecomment-307147922" target="_blank" rel="noopener">opted not to include it as a feature</a>. Using <code>@mixin</code> and <code>@include</code> in Sass is one area that you’d want to be careful. Because properties are included from outside the current block, changing the order of existing declarations may change the computed style for that rule.</p>
<p>Alphabetic ordering is not the only ordering pattern that people follow. Two additional examples are:</p>
<ol>
<li>Jonathan Snook’s <a href="http://smacss.com/book/formatting#grouping" target="_blank" rel="noopener">SMACSS</a></li>
<li>Anton Korzunov’s <a href="https://github.com/theKashey/stylelint-semantic-groups" target="_blank" rel="noopener">stylelint-semantic-groups</a></li>
</ol>
<p>The <a href="https://github.com/necolas/idiomatic-css#declaration-order" target="_blank" rel="noopener">idiomatic CSS style guide</a> has some advice on which to use and when.</p>
<blockquote><p>If declarations are to be consistently ordered, they should be in accordance with a single, simple principle.</p>
<p>Smaller teams may prefer to cluster related properties (e.g., positioning and box-model) together.</p>
<p>Larger teams may prefer the simplicity and easier maintenance that comes with alphabetical ordering.</p></blockquote>
<p>Examples of groups are: positioning properties (<code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>, <code>float</code>, <code>display</code>) and box-model properties (<code>width</code>, <code>height</code>, <code>margin</code>, <code>padding</code>).</p>
<p>I recommend reading the articles: “<a href="https://dev.to/thekashey/happy-potter-and-the-order-of-css-5ec" target="_blank" rel="noopener">Harry Potter and the Order of CSS</a>” by Anton Korzunov and “<a href="https://ericwbailey.design/writing/organize-your-css-declarations-alphabetically/" target="_blank" rel="noopener">Organize your CSS declarations alphabetically</a>” by Eric Bailey if you want to learn more on this topic. The authors have contrasting views!</p>
<p>I started to use the <a href="https://github.com/ream88/stylelint-config-idiomatic-order" target="_blank" rel="noopener">stylelint-config-idiomatic-order</a> config for some of my personal projects. It organizes properties into several different groups, with the main groups being: layout, display, and box model.</p>
<p>The organization roughly equates to something like this:</p>
<pre class="language-css hljs">.wrapper{ 
  /* position */
  position: absolute; 
  top: 20px;
  left: 0;

  /* display */
  display: flex; 
  justify-content: center;

  /* box-model */
  width: 100%; 
  height: 100%; 
  margin-bottom: 20px;
  margin-left: 20px; 
  margin-left: 2px;

  color: red;

  /* groups family of props together */
  border: 1px solid red;
  border-radius: 5px; 
}
</pre>
<p>If you want blank lines between the groups, you need to tweak the built-in rules related to empty lines with <a href="https://stylelint.io/user-guide/rules/list/declaration-empty-line-before/" target="_blank" rel="noopener">declaration-empty-line-before</a>. Adding the rule below did the trick for me. It effectively disables reporting empty lines between declarations as an error.</p>
<pre class="language-json hljs"> "declaration-empty-line-before": [
      "always",
      {
        "ignore": [
          "after-comment",
          "after-declaration",
          "first-nested",
          "inside-single-line-block"
        ]
      }
    ]
</pre>
<h3>Improve accessibility</h3>
<p>The <a href="https://github.com/YozhikM/stylelint-a11y" target="_blank" rel="noopener">stylelint-a11y</a> plugin can help make accessibility a more significant part of your dev process. I think this is great. Accessibility should be a key concern and not be left until later.</p>
<p>The plugin adds these rules:</p>
<table>
<thead>
<tr>
<th>Recommended/Fixable Rule</th>
<th>Rule ID</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td><a href="https://github.com/YozhikM/stylelint-a11y/blob/master/src/rules/content-property-no-static-value/README.md" target="_blank" rel="noopener">content-property-no-static-value</a></td>
<td>Disallow unaccessible CSS generated content in pseudo-elements</td>
</tr>
<tr>
<td></td>
<td><a href="https://github.com/YozhikM/stylelint-a11y/blob/master/src/rules/font-size-is-readable/README.md" target="_blank" rel="noopener">font-size-is-readable</a></td>
<td>Disallow font sizes less than <code>15px</code></td>
</tr>
<tr>
<td></td>
<td><a href="https://github.com/YozhikM/stylelint-a11y/blob/master/src/rules/line-height-is-vertical-rhythmed/README.md" target="_blank" rel="noopener">line-height-is-vertical-rhythmed</a></td>
<td>Disallow not vertical rhythmed <code>line-height</code></td>
</tr>
<tr>
<td><img src="https://s.w.org/images/core/emoji/15.0.3/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /><img src="https://s.w.org/images/core/emoji/15.0.3/72x72/2712.png" alt="✒" class="wp-smiley" style="height: 1em; max-height: 1em;" /></td>
<td><a href="https://github.com/YozhikM/stylelint-a11y/blob/master/src/rules/media-prefers-reduced-motion/README.md" target="_blank" rel="noopener">media-prefers-reduced-motion</a></td>
<td>Require certain styles if the animation or transition in media features</td>
</tr>
<tr>
<td></td>
<td><a href="https://github.com/YozhikM/stylelint-a11y/blob/master/src/rules/media-prefers-color-scheme/README.md" target="_blank" rel="noopener">media-prefers-color-scheme</a></td>
<td>Require implementation of certain styles for selectors with colors.</td>
</tr>
<tr>
<td></td>
<td><a href="https://github.com/YozhikM/stylelint-a11y/blob/master/src/rules/no-display-none/README.md" target="_blank" rel="noopener">no-display-none</a></td>
<td>Disallow content hiding with <code>display: none</code> property</td>
</tr>
<tr>
<td></td>
<td><a href="https://github.com/YozhikM/stylelint-a11y/blob/master/src/rules/no-obsolete-attribute/README.md" target="_blank" rel="noopener">no-obsolete-attribute</a></td>
<td>Disallow obsolete attribute using</td>
</tr>
<tr>
<td></td>
<td><a href="https://github.com/YozhikM/stylelint-a11y/blob/master/src/rules/no-obsolete-element/README.md" target="_blank" rel="noopener">no-obsolete-element</a></td>
<td>Disallow obsolete selectors using</td>
</tr>
<tr>
<td></td>
<td><a href="https://github.com/YozhikM/stylelint-a11y/blob/master/src/rules/no-spread-text/README.md" target="_blank" rel="noopener">no-spread-text</a></td>
<td>Require width of text in a comfortable range</td>
</tr>
<tr>
<td><img src="https://s.w.org/images/core/emoji/15.0.3/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></td>
<td><a href="https://github.com/YozhikM/stylelint-a11y/blob/master/src/rules/no-outline-none/README.md" target="_blank" rel="noopener">no-outline-none</a></td>
<td>Disallow outline clearing</td>
</tr>
<tr>
<td></td>
<td><a href="https://github.com/YozhikM/stylelint-a11y/blob/master/src/rules/no-text-align-justify/README.md" target="_blank" rel="noopener">no-text-align-justify</a></td>
<td>Disallow content with <code>text-align: justify</code></td>
</tr>
<tr>
<td><img src="https://s.w.org/images/core/emoji/15.0.3/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /><img src="https://s.w.org/images/core/emoji/15.0.3/72x72/2712.png" alt="✒" class="wp-smiley" style="height: 1em; max-height: 1em;" /></td>
<td><a href="https://github.com/YozhikM/stylelint-a11y/blob/master/src/rules/selector-pseudo-class-focus/README.md" target="_blank" rel="noopener">selector-pseudo-class-focus</a></td>
<td>Require or disallow a pseudo-element to the selectors with <code>:hover</code></td>
</tr>
</tbody>
</table>
<p><img src="https://s.w.org/images/core/emoji/15.0.3/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" />: the mark of recommended rules <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/2712.png" alt="✒" class="wp-smiley" style="height: 1em; max-height: 1em;" />: the mark of fixable rules.</p>
<h3>Normalize color format</h3>
<p>The <a href="https://github.com/filipekiss/stylelint-color-format" target="_blank" rel="noopener">stylelint-color-format</a> plugin can normalize all colors to RGB(A) or HSL(A). I like to use HSL everywhere. HSL is a more intuitive format to use and has <a href="https://www.smashingmagazine.com/2021/07/hsl-colors-css/" target="_blank" rel="noopener">some unique applications</a> that are not possible with other formats.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="63092" data-permalink="https://blog.logrocket.com/using-stylelint-improve-lint-css-scss-sass/css-stylelint-color-format/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/08/css-stylelint-color-format.gif" data-orig-size="422,288" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Css stylelint color format" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/08/css-stylelint-color-format.gif?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/08/css-stylelint-color-format.gif?w=422" class="aligncenter size-full wp-image-63092" src="https://blog.logrocket.com/wp-content/uploads/2021/08/css-stylelint-color-format.gif" alt="Code Adding HSL Colors" width="422" height="288"></p>
<p>The only limitation is that if you have a color with a name, e.g., <code>color: blue;</code>, it won’t convert this for you.</p>
<h3>Transition to newer recommended features such as logical properties</h3>
<p>It’s challenging for developers to continue to learn and adapt to evolving best practices, so adding new rule sets that make new recommendations an active part of your development process is enormously helpful.</p>
<p>One recent example is using logical properties. Logical properties are <a href="https://www.w3.org/TR/css-writing-modes-4/#writing-mode" target="_blank" rel="noopener">writing mode</a> equivalents of physical properties. They offer a way to describe the layout of web pages in a universal vocabulary that is unambiguous across different languages.</p>
<p>For example, you can have a single set of CSS declarations that apply to right-to-left languages (e.g., Arabic) and left-to-right languages, such as English. You can learn more about these properties in this article, <a href="https://css-tricks.com/css-logical-properties-and-values/" target="_blank" rel="noopener">CSS Logical Properties and Values</a>.</p>
<figure id="attachment_63094" aria-describedby="caption-attachment-63094" style="width: 730px" class="wp-caption aligncenter"><img loading="lazy" decoding="async" data-attachment-id="63094" data-permalink="https://blog.logrocket.com/using-stylelint-improve-lint-css-scss-sass/languages-diagram-css/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/08/languages-diagram-css.png" data-orig-size="730,526" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Languages diagram css" data-image-description="" data-image-caption="&lt;p&gt;Image credit: Web.dev&lt;/p&gt;
" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/08/languages-diagram-css.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/08/languages-diagram-css.png?w=730" class="size-full wp-image-63094" src="https://blog.logrocket.com/wp-content/uploads/2021/08/languages-diagram-css.png" alt="Diagram Of Languages Showing The Direction Languages Are Read" width="730" height="526" srcset="https://blog.logrocket.com/wp-content/uploads/2021/08/languages-diagram-css.png 730w, https://blog.logrocket.com/wp-content/uploads/2021/08/languages-diagram-css.png?resize=300,216 300w" sizes="(max-width: 730px) 100vw, 730px" /><figcaption id="caption-attachment-63094" class="wp-caption-text">Image credit: Web.dev</figcaption></figure>
<p>Logical properties have been around for quite some time, but it has only been in the last couple of years that <a href="https://caniuse.com/css-logical-props" target="_blank" rel="noopener">adoption has significantly improved across all the major browsers</a>. You can use the <a href="https://www.npmjs.com/package/stylelint-use-logical-spec" target="_blank" rel="noopener">stylelint-use-logical-spec</a> plugin to transition to logical properties and break your old habits!</p>
<h3>Augment knowledge and catch easy-to-make mistakes</h3>
<p>Did you know that some properties are ignored when used in conjunction with other property-value combinations?</p>
<p>For example, when you use <code>display: inline</code>, size properties such as <code>width</code> are ignored. This may be an obvious example to you, but others are less obvious. Obvious or not, these can be forgotten or missed in the midst of a busy project! Why don’t you let the linter catch these for you?</p>
<p>You can use the <a href="https://github.com/kristerkari/stylelint-declaration-block-no-ignored-properties" target="_blank" rel="noopener">stylelint-declaration-block-no-ignored-properties</a> plugin to lint these.</p>
<p>As a side note, some browsers have started to highlight these ignored values in their dev tools. This is how it looks in Firefox:</p>
<p><img loading="lazy" decoding="async" data-attachment-id="63099" data-permalink="https://blog.logrocket.com/using-stylelint-improve-lint-css-scss-sass/stylelint-firefox-dev-tool/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/08/stylelint-firefox-dev-tool.png" data-orig-size="538,247" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Stylelint firefox dev tool" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/08/stylelint-firefox-dev-tool.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/08/stylelint-firefox-dev-tool.png?w=538" class="aligncenter size-full wp-image-63099" src="https://blog.logrocket.com/wp-content/uploads/2021/08/stylelint-firefox-dev-tool.png" alt="Firefox's Development Tool Highlighting Ignored Values" width="538" height="247" srcset="https://blog.logrocket.com/wp-content/uploads/2021/08/stylelint-firefox-dev-tool.png 538w, https://blog.logrocket.com/wp-content/uploads/2021/08/stylelint-firefox-dev-tool.png?resize=300,138 300w" sizes="(max-width: 538px) 100vw, 538px" /></p>
<p>Chrome does not show this information.</p>
<h2>Common ways to use Stylelint</h2>
<p>I typically:</p>
<ol>
<li>Use Stylelint and Prettier to lint and format my CSS</li>
<li>Use VS Code with the <a href="https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint" target="_blank" rel="noopener">Stylelint extension</a> to provide squiggly underlines for errors, and I set errors to be fixed automatically on save</li>
<li>For projects that use webpack, I add the Stylelint plugin to my webpack configuration to lint styles for each build</li>
<li>For Vue projects, I add Stylelint to my Vue CLI configuration</li>
</ol>
<p>These are a few of the common ways Stylelint is used. I will show you how to set these situations up.</p>
<h3>1. Using Stylelint with Prettier</h3>
<p>Prettier is very popular for taking care of code formatting. Because Stylelint reports some formatting conventions as errors, it will clash with Prettier. Prettier will format something in a particular way, and Stylelint won’t like it.</p>
<p>You can include the <a href="https://github.com/prettier/stylelint-config-prettier" target="_blank" rel="noopener">stylelint-config-prettier</a> in your config to disable any conflicting rules. This should always be the last referenced config in <code>extends</code> so that its rules are not overwritten.</p>
<pre class="language-json hljs">{
  "extends": [
    "stylelint-config-standard",
    "stylelint-config-prettier",
  ]
};
</pre>
<h3>2. Using Stylelint inside VS Code</h3>
<p>There is a <a href="https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint" target="_blank" rel="noopener">Stylelint extension</a> you can use. Once you have installed Stylelint (globally or locally) and have added a <a href="https://stylelint.io/user-guide/configure" target="_blank" rel="noopener">Stylelint config</a> to your workspace, the extension will lint open files automatically. It covers most languages that may contain CSS by default e.g., Svelte.</p>
<p>You probably want to add some scripts to your <code>package.json</code> to run it from the command line regularly.</p>
<pre class="language-json hljs">{
     "scripts": {
       "lint": "stylelint src",
       "lint:fix": "npm run lint -- --fix",
     }
}
</pre>
<p>If you want to use Stylelint with Prettier in VS Code, I recommend installing these two extensions: <a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="noopener">Prettier</a> and <a href="https://marketplace.visualstudio.com/items?itemName=rohit-gohri.format-code-action&amp;ssr=false#review-details" target="_blank" rel="noopener">Format Code Action</a>, which enables Prettier to be run as a code action. To format and lint CSS code when you save, you can update your user settings with the following:</p>
<pre class="language-json hljs">{
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.formatOnSave": false,
  "editor.codeActionsOnSave": [
    "source.formatDocument",
    "source.fixAll"
  ],
}
</pre>
<h3>3. Using Stylelint with webpack</h3>
<p>If you are using webpack, you might prefer to have Stylelint run as part of the build process. You need to install the <a href="https://github.com/webpack-contrib/stylelint-webpack-plugin" target="_blank" rel="noopener">stylelint-webpack-plugin</a> to accomplish this.</p>
<p>If you are using webpack through a dev tool like <a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">Create React App</a> or <a href="https://cli.vuejs.org/" target="_blank" rel="noopener">Vue CLI</a>, you need to do things differently. In the next section, I describe how to do this for Vue CLI.</p>
<p>To set it up in webpack yourself:</p>
<ul>
<li>Install Stylelint and the webpack plugin: <code>npm i --save-dev stylelint stylelint-webpack-plugin</code></li>
<li>Include the plugin in your <code>webpack.config.js</code>// webpack.config.js</li>
</ul>
<pre>// webpack.config.js
const StyleLintPlugin = require('stylelint-webpack-plugin');
module.exports = {
  // ... other options
  plugins: [
    new StyleLintPlugin({
      files: ['**/*.{htm,html,css,sss,less,scss,sass}'],
    })
  ]
}
</pre>
<ul>
<li>Add your <code>.stylelintrc</code> config to the root directory, and you’re all set!</li>
</ul>
<h3>4. Using Stylelint with Vue CLI</h3>
<p>For Vue CLI, you can install the npm package <a href="https://www.npmjs.com/package/@steveworkman/vue-cli-plugin-stylelint/v/2.2.1" target="_blank" rel="noopener">@steveworkman/vue-cli-plugin-stylelint</a> to integrate Stylelint for you. To add it to an existing project, run the command <code>vue add @steveworkman/vue-cli-plugin-stylelint</code> and it will walk you through the setup.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="63110" data-permalink="https://blog.logrocket.com/using-stylelint-improve-lint-css-scss-sass/npm-stylelint-setup/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/08/npm-stylelint-setup.png" data-orig-size="730,206" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="npm stylelint setup" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/08/npm-stylelint-setup.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/08/npm-stylelint-setup.png?w=730" class="aligncenter size-full wp-image-63110" src="https://blog.logrocket.com/wp-content/uploads/2021/08/npm-stylelint-setup.png" alt="npm Package Running To Integrate Stylelint" width="730" height="206" srcset="https://blog.logrocket.com/wp-content/uploads/2021/08/npm-stylelint-setup.png 730w, https://blog.logrocket.com/wp-content/uploads/2021/08/npm-stylelint-setup.png?resize=300,85 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>It will populate <code>vue.config.js</code> with your chosen plugin options and add a Stylelint config (<code>.stylelintrc.js</code>) for you.</p>
<p>It also adds the following script to your <code>package.json</code>:</p>
<pre class="language-json hljs"> "lint:style": "vue-cli-service lint:style"
</pre>
<h2>Conclusion</h2>
<p>I hope that after reading this you can see how much value there is in linting CSS. Even though many frontend dev tools don’t highlight its usage or include it in their quick setup, I think using Stylelint is critical. It will save you some headaches along the way and assist you in maintaining a high level of code quality. Happy linting!</p>
</html>
<p>The post <a href="https://blog.logrocket.com/using-stylelint-improve-lint-css-scss-sass/">Level up your CSS linting using Stylelint</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.logrocket.com/using-stylelint-improve-lint-css-scss-sass/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">63049</post-id>	</item>
		<item>
		<title>Writing VS Code extensions in JavaScript</title>
		<link>https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/</link>
					<comments>https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/#comments</comments>
		
		<dc:creator><![CDATA[Rob O'Leary]]></dc:creator>
		<pubDate>Thu, 01 Apr 2021 14:30:41 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[vanilla javascript]]></category>
		<guid isPermaLink="false">https://blog.logrocket.com/?p=38729</guid>

					<description><![CDATA[<p>Learn how to set up a project and write your first VS code extension in JavaScript.</p>
<p>The post <a href="https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/">Writing VS Code extensions in JavaScript</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[<!DOCTYPE html>
<html><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a> (VS Code) was built with extensibility in mind. Almost every part of VS Code can be customized and enhanced through the <a href="https://code.visualstudio.com/api/references/vscode-api" target="_blank" rel="noopener">Extension API</a>. In fact, many core features of VS Code is built as <a href="https://github.com/microsoft/vscode/tree/main/extensions" target="_blank" rel="noopener">extensions</a>, and you can also build your own, of course!</p>
<img loading="lazy" decoding="async" width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2021/03/VS-code-extensions-javascript.png" class="attachment-full size-full wp-post-image" alt="VS Code Extensions in JavaScript" srcset="https://blog.logrocket.com/wp-content/uploads/2021/03/VS-code-extensions-javascript.png 730w, https://blog.logrocket.com/wp-content/uploads/2021/03/VS-code-extensions-javascript.png?resize=300,200 300w" sizes="(max-width: 730px) 100vw, 730px" data-attachment-id="38731" data-permalink="https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/vs-code-extensions-javascript/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/03/VS-code-extensions-javascript.png" data-orig-size="730,487" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="VS code extensions in JavaScript" data-image-description data-image-caption data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/03/VS-code-extensions-javascript.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/03/VS-code-extensions-javascript.png?w=730"><p>The product development ethos of VS Code is that the editor is set up for web development by default. It covers HTML, CSS, JavaScript, TypeScript, and Markdown. These features are managed by Microsoft, and they accept community contributions. Everything outside of that is left up to the community to provide as extensions. Extensions can be made available to others by publishing them in the <a href="https://marketplace.visualstudio.com/" target="_blank" rel="noopener">VS Code Marketplace</a>.</p>
<p>Now, you might be wondering: how do I write one, then? Should I just follow the <a href="https://code.visualstudio.com/api" target="_blank" rel="noopener">official docs</a>?</p>
<p>You can! But VS Code is built with <a href="https://www.electronjs.org/" target="_blank" rel="noopener">electron</a>, which means you can write an extension in JavaScript, or anything that can be transpiled to JavaScript, such as TypeScript. The VS Code codebase is written in TypeScript, so the docs are oriented towards TypeScript. All the <a href="https://github.com/microsoft/vscode-extension-samples" target="_blank" rel="noopener">code examples</a> provided by Microsoft are written in TypeScript. So, If you don’t know TypeScript, you will hit a few speed-bumps along the way.</p>
<p>In this article, I will discuss the following:</p>
<ul>
<li>Give supplementary information for JavaScript developers to build extensions</li>
<li>Expand on some topics that I feel are neglected in the official docs</li>
<li>Discuss how to set-up a project and write your first extension</li>
<li>Provide examples for you to try out for yourself</li>
</ul>
<h2>Types of VS Code extensions</h2>
<p>There are different types of extensions you can write, and some don’t require JavaScript at all. Broadly, they fall into the following categories:</p>
<ul>
<li><strong>Snippets</strong>: A collection of code snippets that target a particular language or framework. Snippets are declared in JSON files. <em>No JavaScript is needed.</em> You can read the <a href="https://code.visualstudio.com/api/language-extensions/snippet-guide" target="_blank" rel="noopener">Snippets Guide</a> for more info</li>
<li><strong>Color themes</strong>: A color theme allows you to customize colors in the UI Components and the text in the editor. Colors are configured in JSON files. <em>No JavaScript is needed</em>. You can read the article <a href="https://css-tricks.com/creating-a-vs-code-theme/" target="_blank" rel="noopener">Creating a VS Code Theme</a> for more info</li>
<li><strong>Extension packs</strong>: An extension pack is a collection of extensions that can be installed as a single extension. They are useful for creating a curated collection to recommend to others, and to facilitate enabling/disabling of a related set of extensions for certain projects. All the work is done in the <code>package.json</code>.<em> No JavaScript is needed</em>. You can read the article <a href="https://medium.com/@sanik.bajracharya/vscode-how-to-create-your-own-extension-pack-483385644c29" target="_blank" rel="noopener">VSCode: How to create your own Extension Pack</a> for more info</li>
<li><strong>Language packs (localization)</strong>: A language pack allows users to change the display language of VS Code. They consist of a specific set of JSON files containing the localized string resources for different parts of the UI. <em>No JavaScript is needed</em></li>
<li><strong>Other</strong>: This covers everything else you would like to customize or enhance in VS Code. This is where we use JavaScript. Some examples of what you might build are:
<ul>
<li>Adding custom components and views in the UI</li>
<li>Support a new programming language</li>
<li>Support debugging of a specific runtime</li>
</ul>
</li>
</ul>
<p>We will focus on the “other” category in this article. From here on, when I refer to extensions, that is the type of extension that I am referring to.</p>
<h2>Getting started</h2>
<p><strong>You need to have a typical JavaScript environment set-up</strong>. You need to have <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node</a> and a package manager (<a href="https://yarnpkg.com/" target="_blank" rel="noopener">yarn</a> or <a href="https://www.npmjs.com/" target="_blank" rel="noopener">NPM</a>) installed.</p>
<p>If you have that already, you can read the <a href="https://code.visualstudio.com/api/get-started/your-first-extension" target="_blank" rel="noopener">Your First Extension</a> guide set up a new project. The guide recommends using <a href="https://yeoman.io/" target="_blank" rel="noopener">Yeoman</a> to generate a default project for you. It gives you a wizard-like experience for creating the project on the command-line. To create a JavaScript project, you select the option <strong>New Extension (JavaScript)</strong>.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="38747" data-permalink="https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/yo-code/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/04/yo-code.png" data-orig-size="718,379" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Yo code" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/04/yo-code.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/04/yo-code.png?w=718" class="aligncenter size-full wp-image-38747" src="https://blog.logrocket.com/wp-content/uploads/2021/04/yo-code.png" alt="Yo Code" width="718" height="379" srcset="https://blog.logrocket.com/wp-content/uploads/2021/04/yo-code.png 718w, https://blog.logrocket.com/wp-content/uploads/2021/04/yo-code.png?resize=300,158 300w" sizes="(max-width: 718px) 100vw, 718px" /></p>
<p>It will produce a default project with the “Hello World” command, and an empty test suite.</p>
<p>I think it’s better to create our first project from scratch. I will create a leaner version of the default project. This should help you have a clearer understanding of the code with fewer distractions.</p>
<h2>Writing your first extension</h2>
<p>Let’s create the “Hello World” example from scratch. We want to create a <strong>Hello World</strong> command that will show a pop-up message saying (drum roll), “Hello World!”</p>
<p><img loading="lazy" decoding="async" data-attachment-id="38744" data-permalink="https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/helloworld-3/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/04/helloworld.gif" data-orig-size="600,422" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Hello World" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/04/helloworld.gif?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/04/helloworld.gif?w=600" class="aligncenter size-full wp-image-38744" src="https://blog.logrocket.com/wp-content/uploads/2021/04/helloworld.gif" alt="Hello World" width="600" height="422"></p>
<h3>The extension manifest (<code>package.json</code>)</h3>
<p>Like a typical Node project, we use NPM to handle the configuration and the dependencies of our project. The project configuration is contained in <code>package.json</code>. This is referred to as the <em>Extension Manifest</em> in the documentation. You can read <a href="https://nodejs.dev/learn/the-package-json-guide" target="_blank" rel="noopener">this guide</a> on <code>package.json</code> if you need a refresher.</p>
<p>Let’s create our <code>package.json</code>. We always need to fill out at least half a dozen fields, as below.</p>
<pre>{
  "name": "example",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.32.0"
  },
  "main": "extension.js",
  "contributes": {
    "commands": [
      {
        "command": "example.helloWorld",
        "title": "Hello World"
      }
    ]
  },
  "activationEvents": [
    "onCommand:example.helloWorld"
  ]
}
</pre>
<p>You need to provide the properties <code>name</code>, <code>version</code>, <code>engines</code>, and <code>main</code> as you would for a typical Node project. We will create a JavaScript file in the same folder called <code>extension.js</code> to be our main module in a minute.</p>
<p>The properties specific to a VS Code that must be declared are:</p>
<ul>
<li><code>contributes</code>: This is for your <a href="https://code.visualstudio.com/api/references/contribution-points" target="_blank" rel="noopener">Contribution Points</a>. This is VS Code-speak for declaring what part of the application you are extending. Here is where we can expose our functionality through <a href="https://code.visualstudio.com/api/references/contribution-points#contributes.commands" target="_blank" rel="noopener">commands</a>, create new <a href="https://code.visualstudio.com/api/references/contribution-points#contributes.views" target="_blank" rel="noopener">views</a> , define <a href="https://code.visualstudio.com/api/references/contribution-points#contributes.configuration" target="_blank" rel="noopener">user settings,</a> and so on</li>
<li><code>activationEvents</code>: You declare <a href="https://code.visualstudio.com/api/references/activation-events" target="_blank" rel="noopener">Activation Events</a> to specify the events that trigger the loading (activation) of the extension. Extensions are not always active! For example, you may specify that an extension is only active when a markdown file is open e.g. <code>"activationEvents": ["onLanguage:markdown"]</code>. The most commonly used are: <code><a href="https://code.visualstudio.com/api/references/activation-events#onCommand" target="_blank" rel="noopener">onCommand</a></code>, <code><a href="https://code.visualstudio.com/api/references/activation-events#onLanguage" target="_blank" rel="noopener">onLanguage</a></code>, and <code><a href="https://code.visualstudio.com/api/references/activation-events#onStartupFinished" target="_blank" rel="noopener">onStartupFinished</a></code></li>
</ul>
<p>We want to add a new command to the command palette. We specify this in the <code>contributes.commands</code> property. We assign a unique ID in the <code>command</code> subproperty. The naming convention Microsoft seems to follow is <code>&lt;extension name&gt;.&lt;command name&gt;</code>, but there are no restrictions. This ID is referenced in the code to provide functionality for the command.</p>
<p>The <code>title</code> subproperty is the text that appears in the command palette for the command (as below).</p>
<p><img loading="lazy" decoding="async" data-attachment-id="38748" data-permalink="https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/helloworld-command/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/04/helloworld-command.png" data-orig-size="483,65" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Hello world command" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/04/helloworld-command.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/04/helloworld-command.png?w=483" class="aligncenter size-full wp-image-38748" src="https://blog.logrocket.com/wp-content/uploads/2021/04/helloworld-command.png" alt="Hello World Command" width="483" height="65" srcset="https://blog.logrocket.com/wp-content/uploads/2021/04/helloworld-command.png 483w, https://blog.logrocket.com/wp-content/uploads/2021/04/helloworld-command.png?resize=300,40 300w" sizes="(max-width: 483px) 100vw, 483px" /></p>
<p>We only want the extension to be active when the command is run, so we will use the <code>onCommand</code> Activation Event.</p>
<p>That’s the Extension manifest done.</p>
<p>You can read the <a href="https://code.visualstudio.com/api/references/extension-manifest" target="_blank" rel="noopener">VS Code reference of the Extension Manifest</a> for more information on the properties.</p>
<h3>Main module</h3>
<p>Let’s create <code>extension.js</code> now.</p>
<pre>const vscode = require("vscode");

module.exports = {
  activate,
  deactivate,
};

function activate(context) {
  // This must match the command property in the package.json
  const commandID = "example.helloWorld";
  let disposable = vscode.commands.registerCommand(commandID, sayHello);
  context.subscriptions.push(disposable);
}

function sayHello() {
  vscode.window.showInformationMessage("Hello World!");
}

function deactivate() {}
</pre>
<p>You can treat your files the same as you would in a typical Node.js application. Each file is treated as a separate module that follows the <a href="https://nodejs.org/api/modules.html#modules_modules_commonjs_modules" target="_blank" rel="noopener">commonJS module syntax</a>.</p>
<p><strong>You need to import the</strong> <code>vscode</code> <strong>module to use the VS Code Extensibility API.</strong> It is available by default.</p>
<p><strong>You must always have an</strong> <code>activate</code>&nbsp;<strong>function in your main module</strong>. The <code>activate</code> function is executed when one of your declared Activation Events happens. This is where you set up key initialization tasks for the extension. We link the command we declared in the <code>package.json</code> to our <code>sayHello</code> function through the <code><a href="https://code.visualstudio.com/api/references/vscode-api#commands.registerCommand" target="_blank" rel="noopener">commands.registerCommand</a></code> function.</p>
<p>If you create objects and want the resources to be released when the extension is unloaded (deactivated), you can add it to the array <code><a href="https://code.visualstudio.com/api/references/vscode-api#ExtensionContext.subscriptions" target="_blank" rel="noopener">ExtensionContext.subscriptions</a></code>. VS Code refers to these as disposables.</p>
<p>The <code>deactivate</code> function gives you a chance to clean up before your extension is unloaded. We do not need to do explicit cleanup that often — you can omit the <code>deactivate</code> method if this is the case. If you do need to clean something up asynchronously, make sure you return a <code><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a></code>&nbsp;from the function.</p>
<h3>Running the extension</h3>
<p>Run the extension by launching a debugging session. You can press <code>F5</code> or select <code>Run &gt; Start Debugging</code> in the menu to launch the session. This will compile and run the extension in a new <strong>Extension Development Host</strong> window if there is <code>.vscode/launch.json</code> configuration in the project.</p>
<p>If there is no configuration, you may be prompted with a quickpick input to select an environment for the configuration if VS Code detects the type of project. Otherwise, you may have to manually create a <code>launch.json</code>.</p>
<p>You can click the <strong>Add Configuration</strong> button to give you autocompletion assistance, select <strong>VS Code Extension Development</strong> as the option, and it will fill in the properties.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="38749" data-permalink="https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/launch-config/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/04/launch-config.png" data-orig-size="730,373" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Launch config" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/04/launch-config.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/04/launch-config.png?w=730" class="aligncenter size-full wp-image-38749" src="https://blog.logrocket.com/wp-content/uploads/2021/04/launch-config.png" alt="Launch Config" width="730" height="373" srcset="https://blog.logrocket.com/wp-content/uploads/2021/04/launch-config.png 730w, https://blog.logrocket.com/wp-content/uploads/2021/04/launch-config.png?resize=300,153 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>Run the <strong>Hello World</strong> command from the Command Palette (<code>Ctrl+Shift+P</code>) and you will see a pop-up message saying “Hello World!”. Well done, you have written your first VS Code extension!</p>
<h2>Typical project structure for VS Code extensions</h2>
<p>If you used the <a href="https://code.visualstudio.com/api/get-started/your-first-extension">Yeoman Generator</a> to create a project for you, it will create the folder structure as outlined below. I describe the function of each file:</p>
<pre>.
├── .vscode
│   ├── launch.json    // Config for launching and debugging the extension. This is created by default when you run the project.
├── README.md          // Description of your extension. This is used by the VS Code Marketplace as the 
├── extension.js       // Extension source code
├── test
│   └── runTest.js     // Source code to run your test suite
│   └── suite
│           └── extension.test.js    // This is where you write your test cases 
│           └── index.js             // Configuration of Mocha and the test suite 
├── package.json        // Extension manifest
</pre>
<p>One thing I would change is to add a <em>src</em> folder to put the JavaScript files into. Here, <code>extension.js</code> is in the root folder, and this can get disorganized quickly when you build a more substantial extension.</p>
<h2>Getting familiar with the API</h2>
<p>It takes some time to become familiar with any API. Every API has its own conventions and idiosyncrasies. I think some orientation and a good set of examples goes a long way to providing a happy learning path.</p>
<p>I didn’t find the VS Code API intuitive to learn. The function descriptions are short and lack context in some areas. I found myself looking through examples and the source code of published extensions, and then backtracking to the API to accomplish tasks on occasion.</p>
<p>What I would liked to have had at my disposal initially is an overview of the architecture and a way to learn the vocabulary of the API. This type of orientation is vital to being productive quickly. Let’s cover the architecture first.</p>
<h3>Architecture overview of the API</h3>
<p>The screenshot below outlines what the major UI components of the application are referred to as. They are the <a href="https://code.visualstudio.com/api/references/extension-guidelines#view-containers" target="_blank" rel="noopener">Activity Bar</a>, the Sidebar, Editor, Panel, and the <a href="https://code.visualstudio.com/api/extension-capabilities/extending-workbench#status-bar-item" target="_blank" rel="noopener">Status Bar</a>.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="38750" data-permalink="https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/vscode-overview/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/04/vscode-overview.png" data-orig-size="730,401" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="VS code overview" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/04/vscode-overview.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/04/vscode-overview.png?w=730" class="aligncenter size-full wp-image-38750" src="https://blog.logrocket.com/wp-content/uploads/2021/04/vscode-overview.png" alt="VS Code Overview" width="730" height="401" srcset="https://blog.logrocket.com/wp-content/uploads/2021/04/vscode-overview.png 730w, https://blog.logrocket.com/wp-content/uploads/2021/04/vscode-overview.png?resize=300,165 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>I found the terminology in the docs a bit incoherent about UI components beyond that.</p>
<p>You can consider references to views to mean a custom, atomic UI component. A view can be:</p>
<ul>
<li>A tree view (<a href="https://code.visualstudio.com/api/references/vscode-api#TreeView" target="_blank" rel="noopener">TreeView</a>) similar to the project explorer<br>
<img loading="lazy" decoding="async" data-attachment-id="38751" data-permalink="https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/treeview/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/04/treeview.png" data-orig-size="411,293" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Tree view" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/04/treeview.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/04/treeview.png?w=411" class="aligncenter size-full wp-image-38751" src="https://blog.logrocket.com/wp-content/uploads/2021/04/treeview.png" alt="Tree View" width="411" height="293" srcset="https://blog.logrocket.com/wp-content/uploads/2021/04/treeview.png 411w, https://blog.logrocket.com/wp-content/uploads/2021/04/treeview.png?resize=300,214 300w" sizes="(max-width: 411px) 100vw, 411px" /></li>
<li>Or a webview view (<a href="https://code.visualstudio.com/api/references/vscode-api#WebviewView" target="_blank" rel="noopener">WebviewView</a>), which is built as a HTML page. The example below is from <a href="https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github" target="_blank" rel="noopener">GitHub Pull Requests and Issues</a> extension.<br>
<img loading="lazy" decoding="async" data-attachment-id="38753" data-permalink="https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/webview-view/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/04/webview-view.png" data-orig-size="300,347" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Web view" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/04/webview-view.png?w=259" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/04/webview-view.png?w=300" class="aligncenter size-full wp-image-38753" src="https://blog.logrocket.com/wp-content/uploads/2021/04/webview-view.png" alt="Web View" width="300" height="347" srcset="https://blog.logrocket.com/wp-content/uploads/2021/04/webview-view.png 300w, https://blog.logrocket.com/wp-content/uploads/2021/04/webview-view.png?resize=259,300 259w" sizes="(max-width: 300px) 100vw, 300px" /></li>
</ul>
<p>A view is placed inside a view container. A view can be added to one of the following:</p>
<ul>
<li>Explorer view container in the Activity Bar</li>
<li>Source Control Management (SCM) view container in the Activity Bar</li>
<li>Run and Debug view container in the Activity Bar</li>
<li>Test view container in the Activity Bar</li>
<li>Your own view container</li>
</ul>
<p>You can see all the available views by running the <strong>View: Open View</strong> command.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="38754" data-permalink="https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/views/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/04/views.png" data-orig-size="609,441" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Views" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/04/views.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/04/views.png?w=609" class="aligncenter size-full wp-image-38754" src="https://blog.logrocket.com/wp-content/uploads/2021/04/views.png" alt="Views" width="609" height="441" srcset="https://blog.logrocket.com/wp-content/uploads/2021/04/views.png 609w, https://blog.logrocket.com/wp-content/uploads/2021/04/views.png?resize=300,217 300w" sizes="(max-width: 609px) 100vw, 609px" /></p>
<p>A view is declared with the <code><a href="https://code.visualstudio.com/api/references/contribution-points#contributes.views" target="_blank" rel="noopener">contributes.views</a></code>&nbsp;property in the <code>package.json</code>.</p>
<p>A view container can be added to the Activity Bar or the Panel. It is declared in the <code><a href="https://code.visualstudio.com/api/references/contribution-points#contributes.viewsContainers" target="_blank" rel="noopener">contributes.viewsContainers</a></code>&nbsp;property in the <code>package.json</code>.</p>
<p>Below is an example that shows a custom “Package Explorer” <em>view container</em> added to the Activity Bar, which has two custom views.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="38755" data-permalink="https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/custom-views-container/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/04/custom-views-container.png" data-orig-size="447,481" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Custom views container" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/04/custom-views-container.png?w=279" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/04/custom-views-container.png?w=447" class="aligncenter size-full wp-image-38755" src="https://blog.logrocket.com/wp-content/uploads/2021/04/custom-views-container.png" alt="Custom Views Container" width="447" height="481" srcset="https://blog.logrocket.com/wp-content/uploads/2021/04/custom-views-container.png 447w, https://blog.logrocket.com/wp-content/uploads/2021/04/custom-views-container.png?resize=279,300 279w" sizes="(max-width: 447px) 100vw, 447px" /></p>
<p>The other UI components that you would like to create are usually done through functions in the <code><a href="https://code.visualstudio.com/api/references/vscode-api#window" target="_blank" rel="noopener">window</a></code>&nbsp;namespace, e.g., Status Bar Items. We will discuss this in the next section.</p>
<p>If you want to support another programming language, you can read the <a href="https://code.visualstudio.com/api/language-extensions/overview" target="_blank" rel="noopener">Language Extensions Overview</a> that covers the architecture behind that. By now, most programming language have extensions, so you’re unlikely to venture down that road!</p>
<h3>Overview of namespaces</h3>
<p>Let’s discuss the namespaces you will use most often.</p>
<p><strong>The most important namespace for UI components is</strong> <code><a href="https://code.visualstudio.com/api/references/vscode-api#window" target="_blank" rel="noopener">window</a></code>. This refers to the current window of the application. It has functions to access and manipulate most of the UI components:</p>
<ul>
<li>To access some UI components, there are a number of properties: <code>activeTextEditor</code> is the open file that has focus or changed most recently, and <code>activeTerminal</code> is the terminal pane that has focus or changed most recently</li>
<li>To create a new component, it has <code>createXXX</code> functions such as <code>createTreeView(..)</code>, <code>createStatusBarItem(..)</code>, and <code>createWebview(..)</code></li>
<li>To show notifications and dialogs, it has <code>showXXX</code> functions such as <code>showInformationMessage(..)</code>, <code>showQuickpick(..)</code>, and <code>showInputBox(..)</code>. One exception to this pattern is for progress notifications, which is created with the function <code>withProgress(..)</code></li>
<li>For contextual information inside a document, there are <code>registerXXX</code> functions such as <code>registerCodeLensProvider(..)</code> for code lenses and <code>registerHoverProvider</code> for tooltips</li>
</ul>
<p>You can populate the content of a view with:</p>
<ul>
<li>A <a href="https://code.visualstudio.com/api/references/vscode-api#TreeView" target="_blank" rel="noopener">TreeView</a> by providing a <a href="https://code.visualstudio.com/api/references/vscode-api#TreeDataProvider" target="_blank" rel="noopener">data provider</a> to <code>createTreeView(..)</code> , or by registering the <a href="https://code.visualstudio.com/api/references/vscode-api#TreeDataProvider" target="_blank" rel="noopener">data provider</a> directly through <code>registerTreeDataProvider(..)</code></li>
<li>A <a href="https://code.visualstudio.com/api/references/vscode-api#WebviewView" target="_blank" rel="noopener">WebviewView</a> by registering a <a href="https://code.visualstudio.com/api/references/vscode-api#WebviewViewProvider" target="_blank" rel="noopener">provider</a> with <code>registerWebviewViewProvider(..)</code>. WebviewViews allows rendering arbitrary HTML in the view</li>
</ul>
<p>The namespace to manipulate the project open in the file explorer is <code><a href="https://code.visualstudio.com/api/references/vscode-api#workspace" target="_blank" rel="noopener">workspace</a></code>. You can perform actions on the files and respond to file system events.</p>
<p>For editing a document, the namespaces are <code><a href="https://code.visualstudio.com/api/references/vscode-api#TextEditor" target="_blank" rel="noopener">TextEditor</a></code>&nbsp;and <code><a href="https://code.visualstudio.com/api/references/vscode-api#TextDocument" target="_blank" rel="noopener">TextDocument</a></code>. The text content is available through the <code>TextEditor.document</code> property. <code>TextDocument</code> allows you retrieve text through ranges and lines in <code>TextEditor</code>.</p>
<p>The <code><a href="https://code.visualstudio.com/api/references/vscode-api#commands" target="_blank" rel="noopener">commands</a></code>&nbsp;namespace deals with commands, which are the units of functionality you can reference. Commands can be added to the editor using the <a href="https://code.visualstudio.com/api/references/vscode-api#commands.registerCommand" target="_blank" rel="noopener">registerCommand</a> and <a href="https://code.visualstudio.com/api/references/vscode-api#commands.registerTextEditorCommand" target="_blank" rel="noopener">registerTextEditorCommand</a> functions. Commands can be executed in the UI through the command palette, menus, and other contribution points. You can also programmatically execute commands.</p>
<p>The namespace for all global, user, and workspace settings is <code><a href="https://code.visualstudio.com/api/references/vscode-api#WorkspaceConfiguration" target="_blank" rel="noopener">WorkspaceConfiguration</a></code>.</p>
<p>The <code><a href="https://code.visualstudio.com/api/references/vscode-api#ExtensionContext" target="_blank" rel="noopener">ExtensionContext</a></code>&nbsp;namespace provides contextual properties for your extension, such as the global filepath, some logging info, and storage of secrets. An instance of an <code>ExtensionContext</code> is provided as the first parameter to the <code>activate</code> function.</p>
<p>The docs lists a few <a href="https://code.visualstudio.com/api/references/vscode-api#api-patterns" target="_blank" rel="noopener">common API patterns</a> also.</p>
<h3>Interpreting the API without TypeScript knowledge</h3>
<p>In TypeScript, you provide types for variables, and define your own types. When you write JavaScript, you don’t need to have any types, so I guess we can just ignore the types in the API right?</p>
<p>No — you still need to understand what values you need to provide for parameters and as return values. You need to meet the expectations of the API. You still need to know if you should provide a number or a string. The difference is that you do not need to assign types explicitly along the way.</p>
<p>Let’s look at a few examples to clarify how this plays out in reality.</p>
<h3>Handling enumerations</h3>
<p>Let’s add an item to the status bar, as below. The code for this can be found <a href="https://github.com/robole/vscode-javascript-extensions/tree/main/statusbar" target="_blank" rel="noopener">here</a>.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="38756" data-permalink="https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/statusbaritem/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/04/statusbaritem.png" data-orig-size="730,64" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Status bar item" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/04/statusbaritem.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/04/statusbaritem.png?w=730" class="aligncenter size-full wp-image-38756" src="https://blog.logrocket.com/wp-content/uploads/2021/04/statusbaritem.png" alt="Status Bar Item" width="730" height="64" srcset="https://blog.logrocket.com/wp-content/uploads/2021/04/statusbaritem.png 730w, https://blog.logrocket.com/wp-content/uploads/2021/04/statusbaritem.png?resize=300,26 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>From our namespace overview, we know that <code>window.createStatusBarItem(..)</code> is the function we are interested in. The function definition is below.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="38759" data-permalink="https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/createstatusbaritem/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/04/createstatusbaritem.png" data-orig-size="730,393" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Create status bar item" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/04/createstatusbaritem.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/04/createstatusbaritem.png?w=730" class="aligncenter size-full wp-image-38759" src="https://blog.logrocket.com/wp-content/uploads/2021/04/createstatusbaritem.png" alt="Create Status Bar Item" width="730" height="393" srcset="https://blog.logrocket.com/wp-content/uploads/2021/04/createstatusbaritem.png 730w, https://blog.logrocket.com/wp-content/uploads/2021/04/createstatusbaritem.png?resize=300,162 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>The first parameter is named alignment and has a type of <a href="https://code.visualstudio.com/api/references/vscode-api#StatusBarAlignment" target="_blank" rel="noopener">StatusBarAlignment</a>. So what value do we provide for that?</p>
<p>Looking at the definition, we see it is an enumeration.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="38761" data-permalink="https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/statusbaralignment-2/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/04/statusbaralignment-1.png" data-orig-size="730,339" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Status bar alignment" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/04/statusbaralignment-1.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/04/statusbaralignment-1.png?w=730" class="aligncenter size-full wp-image-38761" src="https://blog.logrocket.com/wp-content/uploads/2021/04/statusbaralignment-1.png" alt="Status Bar Alignment" width="730" height="339" srcset="https://blog.logrocket.com/wp-content/uploads/2021/04/statusbaralignment-1.png 730w, https://blog.logrocket.com/wp-content/uploads/2021/04/statusbaralignment-1.png?resize=300,139 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>An enumeration defines a fixed list of values. The native value of the enumeration is a number. So, if we want our status bar item aligned left: we can provide a value of <code>1</code> or <code>vscode.StatusBarAlignment.Left</code> for this parameter. The latter is more readable.</p>
<p>The second parameter is a number. Simply provide a number of your choosing.</p>
<pre>let item = vscode.window.createStatusBarItem(
      vscode.StatusBarAlignment.Left,
      1
);

item.text = `$(megaphone) 0 line(s) selected`;
item.show();
</pre>
<p>We can then consult the <a href="https://code.visualstudio.com/api/references/vscode-api#StatusBarItem" target="_blank" rel="noopener">StatusBarItem</a> definition to understand how to add a label and display the item. The code above is sufficient to display a status bar item.</p>
<h3>How to handle objects and callbacks</h3>
<p>Let’s create a progress notification, as below. The code for this can be found <a href="https://github.com/robole/vscode-javascript-extensions/tree/main/progress" target="_blank" rel="noopener">here</a>.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="38762" data-permalink="https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/progress/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/04/progress.png" data-orig-size="730,152" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Progress" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/04/progress.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/04/progress.png?w=730" class="aligncenter size-full wp-image-38762" src="https://blog.logrocket.com/wp-content/uploads/2021/04/progress.png" alt="Progress" width="730" height="152" srcset="https://blog.logrocket.com/wp-content/uploads/2021/04/progress.png 730w, https://blog.logrocket.com/wp-content/uploads/2021/04/progress.png?resize=300,62 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>From our namespace overview, we know that <code>window.withProgress(..)</code> is the function we are interested in. The function definition is below.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="38763" data-permalink="https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/withprogress/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/04/withprogress.png" data-orig-size="730,728" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="With progress" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/04/withprogress.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/04/withprogress.png?w=730" class="aligncenter size-full wp-image-38763" src="https://blog.logrocket.com/wp-content/uploads/2021/04/withprogress.png" alt="With Progress" width="730" height="728" srcset="https://blog.logrocket.com/wp-content/uploads/2021/04/withprogress.png 730w, https://blog.logrocket.com/wp-content/uploads/2021/04/withprogress.png?resize=150,150 150w, https://blog.logrocket.com/wp-content/uploads/2021/04/withprogress.png?resize=300,300 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>This definition is more complicated, but don’t be intimidated.</p>
<p>The first parameter, <em>options</em>, is a type of <a href="https://code.visualstudio.com/api/references/vscode-api#ProgressOptions" target="_blank" rel="noopener">ProgressOptions</a>. You need to check the definition and create an object literal for it.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="38764" data-permalink="https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/progressoptions/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/04/progressoptions.png" data-orig-size="730,517" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Progress options" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/04/progressoptions.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/04/progressoptions.png?w=730" class="aligncenter size-full wp-image-38764" src="https://blog.logrocket.com/wp-content/uploads/2021/04/progressoptions.png" alt="Progress Options" width="730" height="517" srcset="https://blog.logrocket.com/wp-content/uploads/2021/04/progressoptions.png 730w, https://blog.logrocket.com/wp-content/uploads/2021/04/progressoptions.png?resize=300,212 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>The properties <em>cancellable</em> and <em>title</em> are primitive types. The <em>location</em> property is an enumeration again.</p>
<pre>let progressOptions = {
    cancellable: true,
    location: vscode.ProgressLocation.Notification,
    title: "I am long running!",
};
</pre>
<p>The second parameter is a callback with its own set of parameters. Here, I create an anonymous function with the two parameters I am interested in using. The <em>progress</em> parameter is what we use to report the status of our task.</p>
<p>The return type of this function is <strong>Thenable</strong>, which is VS Code’s type for a promise. We create some timeouts to simulate a running task and resolve a promise when we are done. We return this promise from the function to satisfy the asynchronous behavior expected.</p>
<pre>vscode.window.withProgress(progressOptions, (progress, token) =&gt; {
    token.onCancellationRequested(() =&gt; {
      console.log("User canceled the long running operation");
    });

    progress.report({ increment: 0 });

    setTimeout(() =&gt; {
      progress.report({
        increment: 50,
        message: "Half way done!",
      });
    }, 2000);

    const p = new Promise((resolve) =&gt; {
      setTimeout(() =&gt; {
        resolve();
      }, 4000);
    });

    return p;
  });
}
</pre>
<h2>Examples of VS Code extensions in JavaScript</h2>
<p>I gathered a collection of example, which can be found in the <a href="https://github.com/robole/vscode-javascript-extensions" target="_blank" rel="noopener">GitHub repo</a>.</p>
<h2>Testing extensions</h2>
<p>You should test your extensions the same as any JavaScript code.</p>
<p>The <a href="https://code.visualstudio.com/api/get-started/your-first-extension" target="_blank" rel="noopener">Yeoman Generator</a> creates a boilerplate test suite for you using the <a href="https://mochajs.org" target="_blank" rel="noopener">Mocha</a> test framework. You can use whatever testing framework you want. If you are happy with Mocha, the <a href="https://code.visualstudio.com/api/working-with-extensions/testing-extension" target="_blank" rel="noopener">testing extensions guide</a> covers the basics.</p>
<p>Note that if you try to run tests from the command-line, it will throw an error:</p>
<pre>Running extension tests from the command line is currently only supported if no other instance of Code is running.
</pre>
<p>This is a limitation of running potentially different versions of VS Code concurrently. The solution is to use <a href="https://code.visualstudio.com/insiders/" target="_blank" rel="noopener">VS Code Insiders</a> for development where you can run tests from the command-line. Or you can launch the extension tests from the debug launch config (as below).</p>
<p><img loading="lazy" decoding="async" data-attachment-id="38765" data-permalink="https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/testing/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/04/testing.jpg" data-orig-size="730,259" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Testing" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/04/testing.jpg?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/04/testing.jpg?w=730" class="aligncenter size-full wp-image-38765" src="https://blog.logrocket.com/wp-content/uploads/2021/04/testing.jpg" alt="Testing" width="730" height="259" srcset="https://blog.logrocket.com/wp-content/uploads/2021/04/testing.jpg 730w, https://blog.logrocket.com/wp-content/uploads/2021/04/testing.jpg?resize=300,106 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<h2>Publishing extensions</h2>
<p>If you want to share your extension with others, you can publish it to the <a href="https://marketplace.visualstudio.com/vscode" target="_blank" rel="noopener">VS Code Extension Marketplace</a>. Alternatively, you can <a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension#packaging-extensions" target="_blank" rel="noopener">package</a> an extension into the installable VSIX format, and distribute it yourself. You can read the <a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension" target="_blank" rel="noopener">publishing extension guide</a> for the rundown on this.</p>
<h2>Conclusion</h2>
<p>Writing your own VS Code extension can be a fun and rewarding project. It can be incredibly satisfying to build something that you use every day to assist your workflow. It does require some time and effort to get to grips with the development environment and learn how to use the API effectively. If you have experience with Node already, it is not much of a stretch.</p>
<p>The key takeaway is that knowing TypeScript is not a prerequisite — anyone with some JavaScript knowledge should be able to build their own extension without headaches. I hope that this article is able to provide a smooth learning path for building extensions with plain ‘ole JavaScript.</p>
</html>
<p>The post <a href="https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/">Writing VS Code extensions in JavaScript</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.logrocket.com/writing-vs-code-extensions-in-javascript/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">38729</post-id>	</item>
		<item>
		<title>The latest features of CSS in 2021</title>
		<link>https://blog.logrocket.com/the-latest-features-of-css-in-2021/</link>
					<comments>https://blog.logrocket.com/the-latest-features-of-css-in-2021/#respond</comments>
		
		<dc:creator><![CDATA[Rob O'Leary]]></dc:creator>
		<pubDate>Tue, 02 Mar 2021 17:00:04 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[css]]></category>
		<guid isPermaLink="false">https://blog.logrocket.com/?p=35098</guid>

					<description><![CDATA[<p>This overview covers the latest major CSS features to make it to browsers in 2021 and includes clear use cases for them.</p>
<p>The post <a href="https://blog.logrocket.com/the-latest-features-of-css-in-2021/">The latest features of CSS in 2021</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[<!DOCTYPE html>
<html><p>CSS is growing in scope and power with each passing year. It’s a great time to be a web developer, but it can be challenging to stay up-to-date with the latest features.</p>
<img loading="lazy" decoding="async" width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2021/02/CSS-new-features-2021.png" class="attachment-full size-full wp-post-image" alt="CSS Logo" srcset="https://blog.logrocket.com/wp-content/uploads/2021/02/CSS-new-features-2021.png 730w, https://blog.logrocket.com/wp-content/uploads/2021/02/CSS-new-features-2021.png?resize=300,200 300w" sizes="(max-width: 730px) 100vw, 730px" data-attachment-id="35103" data-permalink="https://blog.logrocket.com/the-latest-features-of-css-in-2021/css-new-features-2021/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/02/CSS-new-features-2021.png" data-orig-size="730,487" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="CSS new features in 2021" data-image-description data-image-caption data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/02/CSS-new-features-2021.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/02/CSS-new-features-2021.png?w=730"><p>CSS does not have definite versions like JavaScript. So, how do you find out what the latest features are?</p>
<p>The <a href="https://en.wikipedia.org/wiki/World_Wide_Web_Consortium" target="_blank" rel="noopener">World Wide Web Consortium (W3C)</a> produces an <a href="https://www.w3.org/TR/CSS/" target="_blank" rel="noopener">annual snapshot</a> that has all of the current specs in a single document. Unfortunately, it doesn’t itemize what’s new. You need to read through each of the specs to see what has changed. And who wants to do that? Not me!</p>
<p>It’s up to the browser vendors to implement the features outlined in the specs. They act independently to decide when they will implement the features. They have their own roadmaps, so they tend to do it at different times. In an ideal world, there would be a unified source to follow this, but right now, there isn’t.</p>
<p>To save you the trouble, I’ve gathered the major features that have been added to at least one browser in the last year or so.</p>
<h2>Conical gradients</h2>
<p>The <code>conic-gradient</code> function can be used to create an interesting range of image patterns such as conical shapes, pie charts, color wheels, and glossy surfaces.</p>
<p>Conical gradients rotate color-stops around a central point (rather than radiate from a central point like a radial gradient). Conical gradient color-stops are placed around the circumference of a circle.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="35123" data-permalink="https://blog.logrocket.com/the-latest-features-of-css-in-2021/conical-gradient-visual-explanation/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/03/conical-gradient-visual-explanation.png" data-orig-size="730,486" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Conical gradient visual explanation" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/03/conical-gradient-visual-explanation.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/03/conical-gradient-visual-explanation.png?w=730" class="aligncenter size-full wp-image-35123" src="https://blog.logrocket.com/wp-content/uploads/2021/03/conical-gradient-visual-explanation.png" alt="Conical Gradient Visual Explanation" width="730" height="486" srcset="https://blog.logrocket.com/wp-content/uploads/2021/03/conical-gradient-visual-explanation.png 730w, https://blog.logrocket.com/wp-content/uploads/2021/03/conical-gradient-visual-explanation.png?resize=300,200 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>To create a pie chart, we use color-stops that overlap (have abrupt transitions).</p>
<p><img loading="lazy" decoding="async" data-attachment-id="35124" data-permalink="https://blog.logrocket.com/the-latest-features-of-css-in-2021/pie-chart/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/03/pie-chart.png" data-orig-size="252,195" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Pie chart" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/03/pie-chart.png?w=252" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/03/pie-chart.png?w=252" class="aligncenter size-full wp-image-35124" src="https://blog.logrocket.com/wp-content/uploads/2021/03/pie-chart.png" alt="Pie Chart" width="252" height="195"></p>
<pre>.pie-chart{
    background: conic-gradient(red 120deg, green 120deg 240deg, blue 240deg);
}
</pre>
<p>The <code>repeating-conic-gradient()</code> function offers the possibility to create impressive repeating patterns with a short list of parameters.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="35125" data-permalink="https://blog.logrocket.com/the-latest-features-of-css-in-2021/sunburst/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/03/sunburst.png" data-orig-size="252,195" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Sunburst" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/03/sunburst.png?w=252" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/03/sunburst.png?w=252" class="aligncenter size-full wp-image-35125" src="https://blog.logrocket.com/wp-content/uploads/2021/03/sunburst.png" alt="Sunburst" width="252" height="195"></p>
<pre>.sunburst{
    background: repeating-conic-gradient(red 0 15deg,darkred 0 30deg);
}
</pre>
<p>You can see further examples in <a href="https://codepen.io/newinweb/details/BOEwza" target="_blank" rel="noopener">this codepen</a>.</p>
<h3>Browser Support</h3>
<ul>
<li><a href="https://caniuse.com/css-conic-gradients" target="_blank" rel="noopener">Support is excellent</a>. It is available in all <a href="https://www.hanselman.com/blog/the-evergreen-web" target="_blank" rel="noopener">evergreen browsers</a>.</li>
</ul>
<p><img loading="lazy" decoding="async" data-attachment-id="35127" data-permalink="https://blog.logrocket.com/the-latest-features-of-css-in-2021/css-conical-gradient-browser-support-table/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/03/css-conical-gradient-browser-support-table.jpeg" data-orig-size="730,334" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="CSS conical gradient browser support table" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/03/css-conical-gradient-browser-support-table.jpeg?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/03/css-conical-gradient-browser-support-table.jpeg?w=730" class="aligncenter size-full wp-image-35127" src="https://blog.logrocket.com/wp-content/uploads/2021/03/css-conical-gradient-browser-support-table.jpeg" alt="CSS Conical Gradient Browser Support Table" width="730" height="334" srcset="https://blog.logrocket.com/wp-content/uploads/2021/03/css-conical-gradient-browser-support-table.jpeg 730w, https://blog.logrocket.com/wp-content/uploads/2021/03/css-conical-gradient-browser-support-table.jpeg?resize=300,137 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<h3>Further Reading</h3>
<p>If you want to learn more, you can check out the following resources.</p>
<ul>
<li><a href="https://www.w3.org/TR/css-images-4/#conic-gradients" target="_blank" rel="noopener">CSS Image Values and Replaced Content Module Level 4 Specification (Working Draft)</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/conic-gradient()" target="_blank" rel="noopener">MDN Web Docs: conic-gradient()</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/repeating-conic-gradient()" target="_blank" rel="noopener">MDN Web Docs: repeating-conic-gradient()</a></li>
<li><a href="https://css-tricks.com/background-patterns-simplified-by-conic-gradients/" target="_blank" rel="noopener">Background Patterns, Simplified by Conic Gradients</a></li>
</ul>
<h2>The aspect ratio feature</h2>
<p>Another new feature is aspect ratio, which is the proportional relationship between width and height. Maintaining a consistent aspect ratio is important in creating responsive layouts and for preventing <a href="https://web.dev/cls/" target="_blank" rel="noopener">cumulative layout shift</a> (a <a href="https://web.dev/vitals/" target="_blank" rel="noopener">web vital performance metric</a>).</p>
<p>Some examples of where aspect ratio is usually used:</p>
<ul>
<li>Creating placeholder containers for content that will be loaded</li>
<li>Creating consistent, uniform-sized components such as cards</li>
<li>Creating responsive iframes</li>
</ul>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio" target="_blank" rel="noopener">This property</a> allows you to fix the <a href="https://wistia.com/learn/production/what-is-aspect-ratio" target="_blank" rel="noopener">aspect ratio</a> on <em>any</em> element. Images and videos have an intrinsic aspect ratio, but other elements don’t.</p>
<p>The syntax is very simple. The value is: the width ratio, a forward slash, and the height ratio.</p>
<pre>.widescreen {
  aspect-ratio: 16 / 9;
}
</pre>
<p>It’s important to note that elements won’t respect <code>aspect-ratio</code> if both a <code>height</code> and <code>width</code> is defined for an element.</p>
<p class="codepen" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-height="265" data-theme-id="light" data-default-tab="result" data-user="robjoeol" data-slug-hash="oNYvRJg" data-pen-title="aspect-ratio (Chrome only)">See the Pen <a href="https://codepen.io/robjoeol/pen/oNYvRJg"><br>
aspect-ratio (Chrome only)</a> by Rob (<a href="https://codepen.io/robjoeol">@robjoeol</a>)<br>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script></p>
<p>You can start using the property straight away and use <code>a</code> feature query to provide a fallback, as below.</p>
<pre>.standard {
  aspect-ratio: 4 / 3;
}

@supports not (aspect-ratio: 4 / 3) {
  .standard {
    width: 16rem;
    height: 9rem;
  }
}
</pre>
<h3>Browser Support</h3>
<ul>
<li>Since January 2021, <a href="https://caniuse.com/mdn-css_properties_aspect-ratio" target="_blank" rel="noopener">the property is available in Chrome and Edge</a> without requiring an experimental flag to be enabled. It is also available in Firefox.</li>
</ul>
<p><img loading="lazy" decoding="async" data-attachment-id="35128" data-permalink="https://blog.logrocket.com/the-latest-features-of-css-in-2021/css-property-aspect-ratio-table/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/03/css-property-aspect-ratio-table.jpeg" data-orig-size="730,334" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="CSS property aspect ratio table" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/03/css-property-aspect-ratio-table.jpeg?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/03/css-property-aspect-ratio-table.jpeg?w=730" class="aligncenter size-full wp-image-35128" src="https://blog.logrocket.com/wp-content/uploads/2021/03/css-property-aspect-ratio-table.jpeg" alt="CSS Property Aspect Ratio Table" width="730" height="334" srcset="https://blog.logrocket.com/wp-content/uploads/2021/03/css-property-aspect-ratio-table.jpeg 730w, https://blog.logrocket.com/wp-content/uploads/2021/03/css-property-aspect-ratio-table.jpeg?resize=300,137 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<h3>Further Reading</h3>
<p>If you want to learn more, you can check out the following resources.</p>
<ul>
<li><a href="https://drafts.csswg.org/css-sizing-4/#aspect-ratio" target="_blank" rel="noopener">CSS Box Sizing Module Level 4</a> <a href="https://www.w3.org/TR/css-images-4/#conic-gradients" target="_blank" rel="noopener">Specification</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/aspect-ratio" target="_blank" rel="noopener">MDN Web Docs: aspect-ratio</a></li>
<li><a href="https://web.dev/aspect-ratio/" target="_blank" rel="noopener">New aspect-ratio CSS property supported in Chromium, Safari Technology Preview, and Firefox Nightly</a></li>
</ul>
<h2><code>Content-visibility</code> property</h2>
<p>The <code>content-visibility</code> property is a new CSS property that can improve page rendering performance. It enables the browser to skip an element’s rendering work until it is needed (when an element is in view). If a large portion of your content is off-screen, leveraging this property can reduce the initial loading time of a page drastically.</p>
<p>Reaping the benefits of <code>content-visibility</code> requires you to consider which content must be loaded initially, and which content could potentially be deferred. The property has an <code>auto</code> option that lets the browser decide if it can skip the rendering of an element.</p>
<p>There are some important considerations when using this property such as:</p>
<ul>
<li>The height of the page: the browser will make an element with <code>content-visibility: auto</code> or <code>content-visibility: hidden</code> invisible by making its <code>height</code> zero until it is rendered. This changes the page height and scrolling.You can use the <code>contain-intrinsic-size</code> property to give an explicit height for the element to compensate for this, this is likely to be a guess on your part, but you don’t need to be exact! Orkan <a href="https://blog.logrocket.com/using-css-content-visibility-to-boost-your-rendering-performance/" target="_blank" rel="noopener">discusses this topic in this article</a>.</li>
<li>The impact on accessibility: If you’re using <code>content-visibility</code> on a section that has headings and landmarks, screen readers won’t be able to access these when the page loads. Unfortunately, this degrades the accessibility of your content. <a href="https://marcysutton.com/content-visibility-accessible-semantics" target="_blank" rel="noopener">Marcy Sutton discusses this use case</a> for a recent a pull request she reviewed for <em>Dev.to</em>.</li>
</ul>
<h3>Browser Support</h3>
<ul>
<li>This is <a href="https://caniuse.com/css-content-visibility" target="_blank" rel="noopener">available in Edge and Chrome</a>.</li>
</ul>
<p><img loading="lazy" decoding="async" data-attachment-id="35129" data-permalink="https://blog.logrocket.com/the-latest-features-of-css-in-2021/css-content-visibility-browser-support-table/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/03/css-content-visibility-browser-support-table.jpeg" data-orig-size="730,354" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="CSS content visibility browser support table" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/03/css-content-visibility-browser-support-table.jpeg?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/03/css-content-visibility-browser-support-table.jpeg?w=730" class="aligncenter size-full wp-image-35129" src="https://blog.logrocket.com/wp-content/uploads/2021/03/css-content-visibility-browser-support-table.jpeg" alt="CSS Content Visibility Browser Support Table" width="730" height="354" srcset="https://blog.logrocket.com/wp-content/uploads/2021/03/css-content-visibility-browser-support-table.jpeg 730w, https://blog.logrocket.com/wp-content/uploads/2021/03/css-content-visibility-browser-support-table.jpeg?resize=300,145 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<h3>Further Reading</h3>
<p>If you want to learn more, you can check out the following resources.</p>
<ul>
<li><a href="https://www.w3.org/TR/css-contain-2/#content-visibility" target="_blank" rel="noopener">CSS Containment Module Level 2 (Working Draft) Specification</a></li>
<li><a href="https://developer.mozilla.org/en-us/docs/Web/CSS/content-visibility" target="_blank" rel="noopener">MDN Web Docs: content-visibility</a></li>
<li><a href="https://web.dev/content-visibility/" target="_blank" rel="noopener">content-visibility: the new CSS property that boosts your rendering performance</a></li>
<li><a href="https://marcysutton.com/content-visibility-accessible-semantics" target="_blank" rel="noopener">Content-visibility and Accessible Semantics</a></li>
</ul>
<h2>Logical properties</h2>
<p>Logical properties are <a href="https://www.w3.org/TR/css-writing-modes-4/#writing-mode" target="_blank" rel="noopener">writing mode</a> equivalents of physical properties. They offer a way to describe the layout of webpages in an universal vocabulary that is unambiguous across different languages.</p>
<p>For example, you would use <code>margin-block-start</code> instead of <code>margin-left</code> for left-to-right text.</p>
<figure id="attachment_35130" aria-describedby="caption-attachment-35130" style="width: 730px" class="wp-caption aligncenter"><img loading="lazy" decoding="async" data-attachment-id="35130" data-permalink="https://blog.logrocket.com/the-latest-features-of-css-in-2021/webpage-layouts/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/03/webpage-layouts.png" data-orig-size="730,526" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Webpage layouts" data-image-description="" data-image-caption="&lt;p&gt;ddd&lt;/p&gt;
" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/03/webpage-layouts.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/03/webpage-layouts.png?w=730" class="size-full wp-image-35130" src="https://blog.logrocket.com/wp-content/uploads/2021/03/webpage-layouts.png" alt="Webpage Layouts" width="730" height="526" srcset="https://blog.logrocket.com/wp-content/uploads/2021/03/webpage-layouts.png 730w, https://blog.logrocket.com/wp-content/uploads/2021/03/webpage-layouts.png?resize=300,216 300w" sizes="(max-width: 730px) 100vw, 730px" /><figcaption id="caption-attachment-35130" class="wp-caption-text">Image credit – <a href="https://web.dev/logical-property-shorthands/" target="_blank" rel="noopener">Web.dev</a></figcaption></figure>
<p><a href="https://web.dev/logical-property-shorthands/#document-flow" target="_blank" rel="noopener">Adam Argyle</a> has a nice of way of describing logical properties:</p>
<blockquote><p>A logical property is one that references a side, corner, or axis of the box model in context of the applicable language direction. It’s akin to referencing someone’s <code>strong</code> arm, rather than assuming it’s their <code>right</code> arm. “Right” is a physical arm reference, “strong” is a logical arm reference, contextual to the individual.</p></blockquote>
<p>Logical properties have been around for quite some time, but support was minimal in most browsers. Now, the support is a lot better across the board.</p>
<p>However, some shorthand versions of properties are still considered experimental. Until these properties are supported widely, it is tricky to use logical properties wholesale. Elad Schether <a href="https://elad.medium.com/why-css-logical-properties-arent-ready-for-use-c102925a5cba" target="_blank" rel="noopener">discusses this topic in his article</a>.</p>
<p>More progress has been made since he wrote that article (shorthand properties were not implemented when he wrote the article), but we are still not quite there yet for going all-in!</p>
<h3>Browser Support</h3>
<ul>
<li>Now, the logical properties for <code>margin</code>, <code>border</code> and <code>padding</code> <a href="https://caniuse.com/css-logical-props" target="_blank" rel="noopener">are supported in all the major browsers</a>. Shorthand versions of these properties are available as experimental features. Logical border properties are pending in most browsers.</li>
</ul>
<p><img loading="lazy" decoding="async" data-attachment-id="35132" data-permalink="https://blog.logrocket.com/the-latest-features-of-css-in-2021/css-logical-properties-table/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/03/css-logical-properties-table.jpeg" data-orig-size="730,374" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="CS logical properties table" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/03/css-logical-properties-table.jpeg?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/03/css-logical-properties-table.jpeg?w=730" class="aligncenter size-full wp-image-35132" src="https://blog.logrocket.com/wp-content/uploads/2021/03/css-logical-properties-table.jpeg" alt="CS Logical Properties Table" width="730" height="374" srcset="https://blog.logrocket.com/wp-content/uploads/2021/03/css-logical-properties-table.jpeg 730w, https://blog.logrocket.com/wp-content/uploads/2021/03/css-logical-properties-table.jpeg?resize=300,154 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<h3>Further Reading</h3>
<p>If you want to learn more, you can check out the following resources.</p>
<ul>
<li><a href="https://drafts.csswg.org/css-logical/" target="_blank" rel="noopener">CSS Logical Properties and Values Level 1 Specification (Editor’s Draft)</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties" target="_blank" rel="noopener">MDN Web Docs: CSS Logical Properties and Values</a></li>
<li><a href="https://web.dev/logical-property-shorthands/" target="_blank" rel="noopener">Logical layout enhancements with flow-relative shorthands</a></li>
<li><a href="https://css-tricks.com/late-to-logical/" target="_blank" rel="noopener">Late to Logical</a></li>
<li><a href="https://elad.medium.com/why-css-logical-properties-arent-ready-for-use-c102925a5cba" target="_blank" rel="noopener">Why CSS Logical Properties Aren’t Ready for Use!</a></li>
</ul>
<h2>CSS Subgrid</h2>
<p>CSS Subgrid makes a number of difficult layout patterns much simpler to pull off. It’s the icing and cherry on top of the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout" target="_blank" rel="noopener">CSS Grid</a> cake.</p>
<p>If you already know CSS grid, it will not require much effort to learn CSS subgrid. The new syntax is short and sweet.</p>
<p>Conceptually, a grid defined as a subgrid is pretty much the same as a regular nested grid, but it shares the tracks of the parent grid. The payoff is that it provides a way to align a nested grid with its parent grid.</p>
<p>A common example would be a card layout that has different sections. These sections can vary in size depending on the content. With a regular nested grid, you cannot maintain vertical alignment of the same sections between different cards (see below).</p>
<p><img loading="lazy" decoding="async" data-attachment-id="35133" data-permalink="https://blog.logrocket.com/the-latest-features-of-css-in-2021/nested-grid-sections-not-vertically-aligned/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/03/nested-grid-sections-not-vertically-aligned.png" data-orig-size="730,249" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Nested grid sections not vertically aligned" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/03/nested-grid-sections-not-vertically-aligned.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/03/nested-grid-sections-not-vertically-aligned.png?w=730" class="aligncenter size-full wp-image-35133" src="https://blog.logrocket.com/wp-content/uploads/2021/03/nested-grid-sections-not-vertically-aligned.png" alt="Nested Grid Sections Not Vertically Aligned" width="730" height="249" srcset="https://blog.logrocket.com/wp-content/uploads/2021/03/nested-grid-sections-not-vertically-aligned.png 730w, https://blog.logrocket.com/wp-content/uploads/2021/03/nested-grid-sections-not-vertically-aligned.png?resize=300,102 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<pre>.container {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
}

.card {
    display: grid;
}
</pre>
<p><img loading="lazy" decoding="async" data-attachment-id="35134" data-permalink="https://blog.logrocket.com/the-latest-features-of-css-in-2021/subgrid-sections-vertically-aligned/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/03/subgrid-sections-vertically-aligned.png" data-orig-size="651,222" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Subgrid sections vertically aligned" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/03/subgrid-sections-vertically-aligned.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/03/subgrid-sections-vertically-aligned.png?w=651" class="aligncenter size-full wp-image-35134" src="https://blog.logrocket.com/wp-content/uploads/2021/03/subgrid-sections-vertically-aligned.png" alt="Subgrid Sections Vertically Aligned" width="651" height="222" srcset="https://blog.logrocket.com/wp-content/uploads/2021/03/subgrid-sections-vertically-aligned.png 651w, https://blog.logrocket.com/wp-content/uploads/2021/03/subgrid-sections-vertically-aligned.png?resize=300,102 300w" sizes="(max-width: 651px) 100vw, 651px" /></p>
<p>If we change the card to be a subgrid, we can get the sections perfectly aligned vertically.</p>
<pre>.card {
    display: grid;
    grid-template-rows: subgrid;
    grid-row: auto / span 3;
}
</pre>
<p>You can start using the property straight away, and use a feature query to provide a fallback for any browser where it is not supported.</p>
<pre>@supports not (grid-template-rows: subgrid) {
  .card {
    /* ..alternative layout */
  }
}
</pre>
<p>You can explore the example above in <a href="https://codepen.io/robjoeol/pen/eYBYvNJ" target="_blank" rel="noopener">this codepen</a>.</p>
<h3>Browser Support</h3>
<ul>
<li>Firefox is the <a href="https://caniuse.com/css-subgrid" target="_blank" rel="noopener">only browser to implement this feature so far</a>.</li>
</ul>
<p><img loading="lazy" decoding="async" data-attachment-id="35135" data-permalink="https://blog.logrocket.com/the-latest-features-of-css-in-2021/css-subgrid-browser-support-table/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/03/css-subgrid-browser-support-table.jpeg" data-orig-size="730,354" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="CSS subgrid browser support table" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/03/css-subgrid-browser-support-table.jpeg?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/03/css-subgrid-browser-support-table.jpeg?w=730" class="aligncenter size-full wp-image-35135" src="https://blog.logrocket.com/wp-content/uploads/2021/03/css-subgrid-browser-support-table.jpeg" alt="CSS Subgrid Browser Support Table" width="730" height="354" srcset="https://blog.logrocket.com/wp-content/uploads/2021/03/css-subgrid-browser-support-table.jpeg 730w, https://blog.logrocket.com/wp-content/uploads/2021/03/css-subgrid-browser-support-table.jpeg?resize=300,145 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<h3>Further Reading</h3>
<p>If you want to learn more, you can check out the following resources.</p>
<ul>
<li><a href="https://drafts.csswg.org/css-grid-2/#subgrids" target="_blank" rel="noopener">CSS Grid Layout Module Level 2 Specification (Working Draft)</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Subgrid" target="_blank" rel="noopener">MDN Web Docs: Subgrid</a></li>
<li><a href="https://css-tricks.com/achieving-vertical-alignment-thanks-subgrid/" target="_blank" rel="noopener">Achieving Vertical Alignment (Thanks, Subgrid!)</a></li>
</ul>
<h2>The <code>color</code> function</h2>
<p>The <code>color()</code> function allows a color to be specified in a particular <a href="https://drafts.csswg.org/css-color/#colorspace" target="_blank" rel="noopener">colorspace</a>, rather than the implicit sRGB colorspace that most of the other color functions operate in. This will allow web developers to specify a much bigger range of colors going forward.</p>
<p>Real physical devices cannot yet produce every possible color that the human eye can see. The range of colors that a given device can produce is termed the gamut. The gamuts of different colorspaces may be compared by looking at the volume (in cubic Lab units) of colors that can be expressed. The following table shows the <a href="https://drafts.csswg.org/css-color/#predefined" target="_blank" rel="noopener">pre-defined</a> colorspaces available in CSS.</p>
<table>
<thead>
<tr>
<th>Colorspace</th>
<th>Volume (million Lab units)</th>
</tr>
</thead>
<tbody>
<tr>
<td>sRGB</td>
<td>0.820</td>
</tr>
<tr>
<td>display-p3</td>
<td>1.233</td>
</tr>
<tr>
<td>a98-rgb</td>
<td>1.310</td>
</tr>
<tr>
<td>prophoto-rgb</td>
<td>2.896</td>
</tr>
<tr>
<td>rec2020</td>
<td>2.042</td>
</tr>
<tr>
<td>lab</td>
<td>6.578</td>
</tr>
</tbody>
</table>
<p>The takeaway is that <strong>display-p3 is around 35% larger than sRGB.</strong> Many modern displays cover 100% of the display-p3 colorspace now.</p>
<p>You can start using the color function straight away and provide a backward compatible sRGB color via a feature query as below.</p>
<pre>/* sRGB color. */
:root {
    --bright-green: rgb(0, 255, 0);
}

/* Display-p3 color, when supported. */
@supports (color: color(display-p3 1 1 1)) {
    :root {
        --bright-green: color(display-p3 0 1 0);
    }
}

header {
    color: var(--bright-green);
}
</pre>
<h3>Browser Support</h3>
<ul>
<li>Currently, <a href="https://caniuse.com/css-color-function" target="_blank" rel="noopener">Safari is the only browser</a> to implement this feature.</li>
</ul>
<p><img loading="lazy" decoding="async" data-attachment-id="35137" data-permalink="https://blog.logrocket.com/the-latest-features-of-css-in-2021/css-color-function-browser-support-table/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/03/css-color-function-browser-support-table.jpeg" data-orig-size="730,354" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="CSS color function browser support table" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/03/css-color-function-browser-support-table.jpeg?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/03/css-color-function-browser-support-table.jpeg?w=730" class="aligncenter size-full wp-image-35137" src="https://blog.logrocket.com/wp-content/uploads/2021/03/css-color-function-browser-support-table.jpeg" alt="CSS Color Function Browser Support Table" width="730" height="354" srcset="https://blog.logrocket.com/wp-content/uploads/2021/03/css-color-function-browser-support-table.jpeg 730w, https://blog.logrocket.com/wp-content/uploads/2021/03/css-color-function-browser-support-table.jpeg?resize=300,145 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<h3>Further Reading</h3>
<p>If you want to learn more, you can check out the following resources.</p>
<ul>
<li><a href="https://drafts.csswg.org/css-color/#color-function" target="_blank" rel="noopener">CSS Color Module Level 4 Specification (Working Draft)</a></li>
<li><a href="https://webkit.org/blog/10042/wide-gamut-color-in-css-with-display-p3/" target="_blank" rel="noopener">Wide Gamut Color in CSS with Display-P3</a></li>
</ul>
<h2>URL Scroll-To-Text Fragments</h2>
<p>This is a HTML feature, really, but I will include it here, otherwise you might not hear about it at all soon!</p>
<p>Scroll-to-text fragments (also known as text fragments) append a text query to a URL. Upon clicking the link, the browser finds the text in the webpage, scrolls it into view, and highlights the matched text. They enable links to specify which portion of the page is being linked to, without relying on the page-author annotating the page with <code>id</code> attributes.</p>
<p>The fragment format is: <code>#:~:text=\[prefix-,]textStart[,textEnd\][,-suffix]</code>.</p>
<p>Here is a <a href="https://en.wikipedia.org/wiki/History_of_computing#:~:text=By%20the%20late%201960s" target="_blank" rel="noopener">simple example</a> you can test in your browser.</p>
<p><img loading="lazy" decoding="async" data-attachment-id="35138" data-permalink="https://blog.logrocket.com/the-latest-features-of-css-in-2021/scroll-to-text-fragment-wikipedia/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/03/scroll-to-text-fragment-wikipedia.png" data-orig-size="730,455" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Scroll-to-text Fragment on Wikipedia" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/03/scroll-to-text-fragment-wikipedia.png?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/03/scroll-to-text-fragment-wikipedia.png?w=730" class="aligncenter size-full wp-image-35138" src="https://blog.logrocket.com/wp-content/uploads/2021/03/scroll-to-text-fragment-wikipedia.png" alt="Scroll-to-text Fragment on Wikipedia" width="730" height="455" srcset="https://blog.logrocket.com/wp-content/uploads/2021/03/scroll-to-text-fragment-wikipedia.png 730w, https://blog.logrocket.com/wp-content/uploads/2021/03/scroll-to-text-fragment-wikipedia.png?resize=300,187 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>You can begin using scroll-to-text fragments immediately without any ill-effects in browsers that do not support them.</p>
<h3>Browser Support</h3>
<ul>
<li><a href="https://caniuse.com/url-scroll-to-text-fragment" target="_blank" rel="noopener">Available</a> in Edge and Chrome.</li>
</ul>
<p><img loading="lazy" decoding="async" data-attachment-id="35139" data-permalink="https://blog.logrocket.com/the-latest-features-of-css-in-2021/url-scroll-to-text-fragment-browser-support-table/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2021/03/url-scroll-to-text-fragment-browser-support-table.jpeg" data-orig-size="730,334" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="URL scroll-to-text fragment browser support table" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2021/03/url-scroll-to-text-fragment-browser-support-table.jpeg?w=300" data-large-file="https://blog.logrocket.com/wp-content/uploads/2021/03/url-scroll-to-text-fragment-browser-support-table.jpeg?w=730" class="aligncenter size-full wp-image-35139" src="https://blog.logrocket.com/wp-content/uploads/2021/03/url-scroll-to-text-fragment-browser-support-table.jpeg" alt="URL Scroll-to-text Fragment Browser Support Table" width="730" height="334" srcset="https://blog.logrocket.com/wp-content/uploads/2021/03/url-scroll-to-text-fragment-browser-support-table.jpeg 730w, https://blog.logrocket.com/wp-content/uploads/2021/03/url-scroll-to-text-fragment-browser-support-table.jpeg?resize=300,137 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<h3>Further Reading</h3>
<p>If you want to learn more, you can check out the following resources.</p>
<ul>
<li><a href="https://wicg.github.io/scroll-to-text-fragment/#navigating-to-text-fragment" target="_blank" rel="noopener">Text Fragments Specification (Unofficial Draft)</a></li>
<li><a href="https://trevorfox.com/2020/06/how-to-highlight-text-on-a-page-with-scroll-to-text-fragments/" target="_blank" rel="noopener">How to Highlight Text On a Page with “Scroll to Text Fragments”</a></li>
</ul>
<h2>Conclusion</h2>
<p>I hope this article has given you a clear overview of the latest major CSS features to make it to browsers, and identified clear use cases for them. In the age of <a href="https://www.hanselman.com/blog/the-evergreen-web" target="_blank" rel="noopener">evergreen browsers</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Conditional_Rules/Using_Feature_Queries" target="_blank" rel="noopener">feature queries</a>, there are no barriers to adopting new features early. The challenge is to know what new features have actually landed in browsers, finding the time to learn about them, and making them part of your web design arsenal over time. I hope the web community can find a better way to publicize this information in the future.</p>
</html>
<p>The post <a href="https://blog.logrocket.com/the-latest-features-of-css-in-2021/">The latest features of CSS in 2021</a> appeared first on <a href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://blog.logrocket.com/the-latest-features-of-css-in-2021/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">35098</post-id>	</item>
	</channel>
</rss>
